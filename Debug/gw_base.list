
gw_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .lcd          000ad700  24000000  24000000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 ._extflash    00000000  90000000  90000000  000dd700  2**0
                  CONTENTS
  2 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         0000b3f0  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000248c  0800b69c  0800b69c  0001b69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0800db28  0800db28  0001db28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800db2c  0800db2c  0001db2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000038  20000000  0800db30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000608  20000038  0800db68  00020038  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000640  0800db68  00020640  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000dd700  2**0
                  CONTENTS, READONLY
 11 .debug_info   00021871  00000000  00000000  000dd72e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003526  00000000  00000000  000fef9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001048  00000000  00000000  001024c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f18  00000000  00000000  00103510  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000316f3  00000000  00000000  00104428  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00010dd2  00000000  00000000  00135b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0013b7bd  00000000  00000000  001468ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  002820aa  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004364  00000000  00000000  00282128  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	20000038 	.word	0x20000038
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800b684 	.word	0x0800b684

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	2000003c 	.word	0x2000003c
 80002e8:	0800b684 	.word	0x0800b684

080002ec <buttons_get>:
//#define B_B (1 << 5)
//#define B_TIME (1 << 6)
//#define B_GAME (1 << 7)
//#define B_PAUSE (1 << 8)

uint32_t buttons_get() {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
    bool left = HAL_GPIO_ReadPin(BTN_Left_GPIO_Port, BTN_Left_Pin) == GPIO_PIN_RESET;
 80002f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002f6:	4843      	ldr	r0, [pc, #268]	; (8000404 <buttons_get+0x118>)
 80002f8:	f005 fb52 	bl	80059a0 <HAL_GPIO_ReadPin>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	bf0c      	ite	eq
 8000302:	2301      	moveq	r3, #1
 8000304:	2300      	movne	r3, #0
 8000306:	73fb      	strb	r3, [r7, #15]
    bool right = HAL_GPIO_ReadPin(BTN_Right_GPIO_Port, BTN_Right_Pin) == GPIO_PIN_RESET;
 8000308:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800030c:	483d      	ldr	r0, [pc, #244]	; (8000404 <buttons_get+0x118>)
 800030e:	f005 fb47 	bl	80059a0 <HAL_GPIO_ReadPin>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	bf0c      	ite	eq
 8000318:	2301      	moveq	r3, #1
 800031a:	2300      	movne	r3, #0
 800031c:	73bb      	strb	r3, [r7, #14]
    bool up = HAL_GPIO_ReadPin(BTN_Up_GPIO_Port, BTN_Up_Pin) == GPIO_PIN_RESET ;
 800031e:	2101      	movs	r1, #1
 8000320:	4838      	ldr	r0, [pc, #224]	; (8000404 <buttons_get+0x118>)
 8000322:	f005 fb3d 	bl	80059a0 <HAL_GPIO_ReadPin>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	bf0c      	ite	eq
 800032c:	2301      	moveq	r3, #1
 800032e:	2300      	movne	r3, #0
 8000330:	737b      	strb	r3, [r7, #13]
    bool down = HAL_GPIO_ReadPin(BTN_Down_GPIO_Port, BTN_Down_Pin) == GPIO_PIN_RESET;
 8000332:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000336:	4833      	ldr	r0, [pc, #204]	; (8000404 <buttons_get+0x118>)
 8000338:	f005 fb32 	bl	80059a0 <HAL_GPIO_ReadPin>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	bf0c      	ite	eq
 8000342:	2301      	moveq	r3, #1
 8000344:	2300      	movne	r3, #0
 8000346:	733b      	strb	r3, [r7, #12]
    bool a = HAL_GPIO_ReadPin(BTN_A_GPIO_Port, BTN_A_Pin) == GPIO_PIN_RESET;
 8000348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034c:	482d      	ldr	r0, [pc, #180]	; (8000404 <buttons_get+0x118>)
 800034e:	f005 fb27 	bl	80059a0 <HAL_GPIO_ReadPin>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	bf0c      	ite	eq
 8000358:	2301      	moveq	r3, #1
 800035a:	2300      	movne	r3, #0
 800035c:	72fb      	strb	r3, [r7, #11]
    bool b = HAL_GPIO_ReadPin(BTN_A_GPIO_Port, BTN_B_Pin) == GPIO_PIN_RESET;
 800035e:	2120      	movs	r1, #32
 8000360:	4828      	ldr	r0, [pc, #160]	; (8000404 <buttons_get+0x118>)
 8000362:	f005 fb1d 	bl	80059a0 <HAL_GPIO_ReadPin>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	bf0c      	ite	eq
 800036c:	2301      	moveq	r3, #1
 800036e:	2300      	movne	r3, #0
 8000370:	72bb      	strb	r3, [r7, #10]
    bool time = HAL_GPIO_ReadPin(BTN_TIME_GPIO_Port, BTN_TIME_Pin) == GPIO_PIN_RESET;
 8000372:	2120      	movs	r1, #32
 8000374:	4824      	ldr	r0, [pc, #144]	; (8000408 <buttons_get+0x11c>)
 8000376:	f005 fb13 	bl	80059a0 <HAL_GPIO_ReadPin>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	bf0c      	ite	eq
 8000380:	2301      	moveq	r3, #1
 8000382:	2300      	movne	r3, #0
 8000384:	727b      	strb	r3, [r7, #9]
    bool game = HAL_GPIO_ReadPin(BTN_GAME_GPIO_Port, BTN_GAME_Pin) == GPIO_PIN_RESET;
 8000386:	2102      	movs	r1, #2
 8000388:	481f      	ldr	r0, [pc, #124]	; (8000408 <buttons_get+0x11c>)
 800038a:	f005 fb09 	bl	80059a0 <HAL_GPIO_ReadPin>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	bf0c      	ite	eq
 8000394:	2301      	moveq	r3, #1
 8000396:	2300      	movne	r3, #0
 8000398:	723b      	strb	r3, [r7, #8]
    bool pause = HAL_GPIO_ReadPin(BTN_PAUSE_GPIO_Port, BTN_PAUSE_Pin) == GPIO_PIN_RESET;
 800039a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800039e:	481a      	ldr	r0, [pc, #104]	; (8000408 <buttons_get+0x11c>)
 80003a0:	f005 fafe 	bl	80059a0 <HAL_GPIO_ReadPin>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	bf0c      	ite	eq
 80003aa:	2301      	moveq	r3, #1
 80003ac:	2300      	movne	r3, #0
 80003ae:	71fb      	strb	r3, [r7, #7]
    bool power = HAL_GPIO_ReadPin(BTN_PWR_GPIO_Port, BTN_PWR_Pin) == GPIO_PIN_RESET;
 80003b0:	2101      	movs	r1, #1
 80003b2:	4816      	ldr	r0, [pc, #88]	; (800040c <buttons_get+0x120>)
 80003b4:	f005 faf4 	bl	80059a0 <HAL_GPIO_ReadPin>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	bf0c      	ite	eq
 80003be:	2301      	moveq	r3, #1
 80003c0:	2300      	movne	r3, #0
 80003c2:	71bb      	strb	r3, [r7, #6]

    return (
        left | (up << 1) | (right << 2) | (down << 3) | (a << 4) | (b << 5) | (time << 6) | (game << 7) | (pause << 8) | (power << 9)
 80003c4:	7bfa      	ldrb	r2, [r7, #15]
 80003c6:	7b7b      	ldrb	r3, [r7, #13]
 80003c8:	005b      	lsls	r3, r3, #1
 80003ca:	431a      	orrs	r2, r3
 80003cc:	7bbb      	ldrb	r3, [r7, #14]
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	431a      	orrs	r2, r3
 80003d2:	7b3b      	ldrb	r3, [r7, #12]
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	431a      	orrs	r2, r3
 80003d8:	7afb      	ldrb	r3, [r7, #11]
 80003da:	011b      	lsls	r3, r3, #4
 80003dc:	431a      	orrs	r2, r3
 80003de:	7abb      	ldrb	r3, [r7, #10]
 80003e0:	015b      	lsls	r3, r3, #5
 80003e2:	431a      	orrs	r2, r3
 80003e4:	7a7b      	ldrb	r3, [r7, #9]
 80003e6:	019b      	lsls	r3, r3, #6
 80003e8:	431a      	orrs	r2, r3
 80003ea:	7a3b      	ldrb	r3, [r7, #8]
 80003ec:	01db      	lsls	r3, r3, #7
 80003ee:	431a      	orrs	r2, r3
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	021b      	lsls	r3, r3, #8
 80003f4:	431a      	orrs	r2, r3
 80003f6:	79bb      	ldrb	r3, [r7, #6]
 80003f8:	025b      	lsls	r3, r3, #9
 80003fa:	4313      	orrs	r3, r2
    );


}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3710      	adds	r7, #16
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	58020c00 	.word	0x58020c00
 8000408:	58020800 	.word	0x58020800
 800040c:	58020000 	.word	0x58020000

08000410 <flash_memory_map>:
#include "flash.h"


void flash_memory_map(OSPI_HandleTypeDef *spi) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b0ac      	sub	sp, #176	; 0xb0
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef cmd = {
 8000418:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800041c:	2250      	movs	r2, #80	; 0x50
 800041e:	2100      	movs	r1, #0
 8000420:	4618      	mov	r0, r3
 8000422:	f00b f927 	bl	800b674 <memset>
 8000426:	23eb      	movs	r3, #235	; 0xeb
 8000428:	66bb      	str	r3, [r7, #104]	; 0x68
 800042a:	2301      	movs	r3, #1
 800042c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800042e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000432:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000438:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800043c:	2304      	movs	r3, #4
 800043e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000442:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800044a:	2301      	movs	r3, #1
 800044c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000450:	2304      	movs	r3, #4
 8000452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    .AlternateBytesSize = HAL_OSPI_ALTERNATE_BYTES_8_BITS, // ??? firmware uses '1' ??
    .NbData = 1, // Data length
    .AlternateBytes = 0b000100, //0xa5, // Hmmmm
  };

  HAL_Delay(1);
 8000456:	2001      	movs	r0, #1
 8000458:	f002 fd30 	bl	8002ebc <HAL_Delay>
  
  if(HAL_OSPI_Command(spi, &cmd, 1000) != HAL_OK) {
 800045c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000460:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000464:	4619      	mov	r1, r3
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f005 ffd4 	bl	8006414 <HAL_OSPI_Command>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <flash_memory_map+0x66>
      Error_Handler();
 8000472:	f002 f873 	bl	800255c <Error_Handler>
  }
  HAL_Delay(50);
 8000476:	2032      	movs	r0, #50	; 0x32
 8000478:	f002 fd20 	bl	8002ebc <HAL_Delay>


  OSPI_MemoryMappedTypeDef sMemMappedCfg;

  OSPI_RegularCmdTypeDef sCommand = {
 800047c:	f107 0308 	add.w	r3, r7, #8
 8000480:	2250      	movs	r2, #80	; 0x50
 8000482:	2100      	movs	r1, #0
 8000484:	4618      	mov	r0, r3
 8000486:	f00b f8f5 	bl	800b674 <memset>
 800048a:	2301      	movs	r3, #1
 800048c:	60bb      	str	r3, [r7, #8]
 800048e:	23eb      	movs	r3, #235	; 0xeb
 8000490:	613b      	str	r3, [r7, #16]
 8000492:	2301      	movs	r3, #1
 8000494:	617b      	str	r3, [r7, #20]
 8000496:	f44f 7340 	mov.w	r3, #768	; 0x300
 800049a:	627b      	str	r3, [r7, #36]	; 0x24
 800049c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80004a2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80004a6:	643b      	str	r3, [r7, #64]	; 0x40
 80004a8:	2301      	movs	r3, #1
 80004aa:	647b      	str	r3, [r7, #68]	; 0x44
 80004ac:	2304      	movs	r3, #4
 80004ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  // }
  // HAL_Delay(100);



  sCommand.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 80004b0:	2302      	movs	r3, #2
 80004b2:	60bb      	str	r3, [r7, #8]
  sCommand.Instruction = 0x38; /* 4PP / 4 x page program */ // LINEAR_BURST_WRITE;
 80004b4:	2338      	movs	r3, #56	; 0x38
 80004b6:	613b      	str	r3, [r7, #16]
  sCommand.DummyCycles = 0; //DUMMY_CLOCK_CYCLES_SRAM_WRITE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_OSPI_Command(spi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) !=
 80004bc:	f107 0308 	add.w	r3, r7, #8
 80004c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80004c4:	4619      	mov	r1, r3
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	f005 ffa4 	bl	8006414 <HAL_OSPI_Command>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <flash_memory_map+0xc6>
      HAL_OK) {
    Error_Handler();
 80004d2:	f002 f843 	bl	800255c <Error_Handler>
  }
  /* Memory-mapped mode configuration for Linear burst read operations */
  sCommand.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
 80004d6:	2301      	movs	r3, #1
 80004d8:	60bb      	str	r3, [r7, #8]
  sCommand.Instruction = 0xEB; /* 4READ */  //LINEAR_BURST_READ;
 80004da:	23eb      	movs	r3, #235	; 0xeb
 80004dc:	613b      	str	r3, [r7, #16]
  sCommand.DummyCycles = 6; //DUMMY_CLOCK_CYCLES_SRAM_READ;
 80004de:	2306      	movs	r3, #6
 80004e0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(spi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) !=
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80004ea:	4619      	mov	r1, r3
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f005 ff91 	bl	8006414 <HAL_OSPI_Command>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <flash_memory_map+0xec>
      HAL_OK) {
    Error_Handler();
 80004f8:	f002 f830 	bl	800255c <Error_Handler>
  }
  /*Disable timeout counter for memory mapped mode*/
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80004fc:	2300      	movs	r3, #0
 80004fe:	65bb      	str	r3, [r7, #88]	; 0x58
  sMemMappedCfg.TimeOutPeriod = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	65fb      	str	r3, [r7, #92]	; 0x5c
  /*Enable memory mapped mode*/
  if (HAL_OSPI_MemoryMapped(spi, &sMemMappedCfg) != HAL_OK) {
 8000504:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000508:	4619      	mov	r1, r3
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f006 f810 	bl	8006530 <HAL_OSPI_MemoryMapped>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <flash_memory_map+0x10a>
    Error_Handler();
 8000516:	f002 f821 	bl	800255c <Error_Handler>
  }
 800051a:	bf00      	nop
 800051c:	37b0      	adds	r7, #176	; 0xb0
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <lcd_backlight_off>:

uint32_t framebufferBG[320 * 240];
uint16_t framebufferSEG0[320 * 240];
uint16_t framebufferSEG1[320 * 240];

void lcd_backlight_off() {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2110      	movs	r1, #16
 800052c:	4807      	ldr	r0, [pc, #28]	; (800054c <lcd_backlight_off+0x28>)
 800052e:	f005 fa4f 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2120      	movs	r1, #32
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <lcd_backlight_off+0x28>)
 8000538:	f005 fa4a 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2140      	movs	r1, #64	; 0x40
 8000540:	4802      	ldr	r0, [pc, #8]	; (800054c <lcd_backlight_off+0x28>)
 8000542:	f005 fa45 	bl	80059d0 <HAL_GPIO_WritePin>
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	58020000 	.word	0x58020000

08000550 <lcd_backlight_on>:
void lcd_backlight_on() {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2110      	movs	r1, #16
 8000558:	4807      	ldr	r0, [pc, #28]	; (8000578 <lcd_backlight_on+0x28>)
 800055a:	f005 fa39 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2120      	movs	r1, #32
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <lcd_backlight_on+0x28>)
 8000564:	f005 fa34 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2140      	movs	r1, #64	; 0x40
 800056c:	4802      	ldr	r0, [pc, #8]	; (8000578 <lcd_backlight_on+0x28>)
 800056e:	f005 fa2f 	bl	80059d0 <HAL_GPIO_WritePin>
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	58020000 	.word	0x58020000

0800057c <bufferSwap>:

void bufferSwap(LTDC_HandleTypeDef *ltdc, int whichBuffer) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]

	if (whichBuffer) {
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d006      	beq.n	800059a <bufferSwap+0x1e>
		HAL_LTDC_SetAddress(ltdc,(uint32_t) &framebufferSEG1, 1);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <bufferSwap+0x34>)
 800058e:	2201      	movs	r2, #1
 8000590:	4619      	mov	r1, r3
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f005 fb44 	bl	8005c20 <HAL_LTDC_SetAddress>
	}
	else {
		HAL_LTDC_SetAddress(ltdc,(uint32_t) &framebufferSEG0, 1);
	}

}
 8000598:	e005      	b.n	80005a6 <bufferSwap+0x2a>
		HAL_LTDC_SetAddress(ltdc,(uint32_t) &framebufferSEG0, 1);
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <bufferSwap+0x38>)
 800059c:	2201      	movs	r2, #1
 800059e:	4619      	mov	r1, r3
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f005 fb3d 	bl	8005c20 <HAL_LTDC_SetAddress>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	24070800 	.word	0x24070800
 80005b4:	2404b000 	.word	0x2404b000

080005b8 <lcd_init>:

void lcd_init(SPI_HandleTypeDef *spi, LTDC_HandleTypeDef *ltdc) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]

  // Turn display *off* completely.
  lcd_backlight_off();
 80005c2:	f7ff ffaf 	bl	8000524 <lcd_backlight_off>

  // 3.3v power to display *SET* to disable supply.
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2102      	movs	r1, #2
 80005ca:	48a8      	ldr	r0, [pc, #672]	; (800086c <lcd_init+0x2b4>)
 80005cc:	f005 fa00 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2110      	movs	r1, #16
 80005d4:	48a5      	ldr	r0, [pc, #660]	; (800086c <lcd_init+0x2b4>)
 80005d6:	f005 f9fb 	bl	80059d0 <HAL_GPIO_WritePin>


  // TURN OFF CHIP SELECT
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e0:	48a3      	ldr	r0, [pc, #652]	; (8000870 <lcd_init+0x2b8>)
 80005e2:	f005 f9f5 	bl	80059d0 <HAL_GPIO_WritePin>
  // TURN OFF PD8
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ec:	489f      	ldr	r0, [pc, #636]	; (800086c <lcd_init+0x2b4>)
 80005ee:	f005 f9ef 	bl	80059d0 <HAL_GPIO_WritePin>

  // Turn off CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f8:	489d      	ldr	r0, [pc, #628]	; (8000870 <lcd_init+0x2b8>)
 80005fa:	f005 f9e9 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80005fe:	2064      	movs	r0, #100	; 0x64
 8000600:	f002 fc5c 	bl	8002ebc <HAL_Delay>

  lcd_backlight_on();
 8000604:	f7ff ffa4 	bl	8000550 <lcd_backlight_on>


// Wake
// Enable 3.3v
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2102      	movs	r1, #2
 800060c:	4897      	ldr	r0, [pc, #604]	; (800086c <lcd_init+0x2b4>)
 800060e:	f005 f9df 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f002 fc52 	bl	8002ebc <HAL_Delay>
  // Enable 1.8V
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2110      	movs	r1, #16
 800061c:	4893      	ldr	r0, [pc, #588]	; (800086c <lcd_init+0x2b4>)
 800061e:	f005 f9d7 	bl	80059d0 <HAL_GPIO_WritePin>
  // also assert CS, not sure where to put this yet
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000628:	4891      	ldr	r0, [pc, #580]	; (8000870 <lcd_init+0x2b8>)
 800062a:	f005 f9d1 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_Delay(7);
 800062e:	2007      	movs	r0, #7
 8000630:	f002 fc44 	bl	8002ebc <HAL_Delay>



// HAL_SPI_Transmit(spi, "\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55", 10, 100);
  // Lets go, bootup sequence.
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063a:	488c      	ldr	r0, [pc, #560]	; (800086c <lcd_init+0x2b4>)
 800063c:	f005 f9c8 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000640:	2002      	movs	r0, #2
 8000642:	f002 fc3b 	bl	8002ebc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064c:	4887      	ldr	r0, [pc, #540]	; (800086c <lcd_init+0x2b4>)
 800064e:	f005 f9bf 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000652:	2002      	movs	r0, #2
 8000654:	f002 fc32 	bl	8002ebc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065e:	4883      	ldr	r0, [pc, #524]	; (800086c <lcd_init+0x2b4>)
 8000660:	f005 f9b6 	bl	80059d0 <HAL_GPIO_WritePin>

  HAL_Delay(10);
 8000664:	200a      	movs	r0, #10
 8000666:	f002 fc29 	bl	8002ebc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000670:	487f      	ldr	r0, [pc, #508]	; (8000870 <lcd_init+0x2b8>)
 8000672:	f005 f9ad 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000676:	2002      	movs	r0, #2
 8000678:	f002 fc20 	bl	8002ebc <HAL_Delay>
  HAL_SPI_Transmit(spi, "\x08\x80", 2, 100);
 800067c:	2364      	movs	r3, #100	; 0x64
 800067e:	2202      	movs	r2, #2
 8000680:	497c      	ldr	r1, [pc, #496]	; (8000874 <lcd_init+0x2bc>)
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f00a fcf6 	bl	800b074 <HAL_SPI_Transmit>
  HAL_Delay(2);
 8000688:	2002      	movs	r0, #2
 800068a:	f002 fc17 	bl	8002ebc <HAL_Delay>
  
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000694:	4876      	ldr	r0, [pc, #472]	; (8000870 <lcd_init+0x2b8>)
 8000696:	f005 f99b 	bl	80059d0 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a0:	4873      	ldr	r0, [pc, #460]	; (8000870 <lcd_init+0x2b8>)
 80006a2:	f005 f995 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80006a6:	2002      	movs	r0, #2
 80006a8:	f002 fc08 	bl	8002ebc <HAL_Delay>
  HAL_SPI_Transmit(spi, "\x6E\x80", 2, 100);
 80006ac:	2364      	movs	r3, #100	; 0x64
 80006ae:	2202      	movs	r2, #2
 80006b0:	4971      	ldr	r1, [pc, #452]	; (8000878 <lcd_init+0x2c0>)
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f00a fcde 	bl	800b074 <HAL_SPI_Transmit>
  HAL_Delay(2);
 80006b8:	2002      	movs	r0, #2
 80006ba:	f002 fbff 	bl	8002ebc <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c4:	486a      	ldr	r0, [pc, #424]	; (8000870 <lcd_init+0x2b8>)
 80006c6:	f005 f983 	bl	80059d0 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d0:	4867      	ldr	r0, [pc, #412]	; (8000870 <lcd_init+0x2b8>)
 80006d2:	f005 f97d 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80006d6:	2002      	movs	r0, #2
 80006d8:	f002 fbf0 	bl	8002ebc <HAL_Delay>
  HAL_SPI_Transmit(spi, "\x80\x80", 2, 100);
 80006dc:	2364      	movs	r3, #100	; 0x64
 80006de:	2202      	movs	r2, #2
 80006e0:	4966      	ldr	r1, [pc, #408]	; (800087c <lcd_init+0x2c4>)
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f00a fcc6 	bl	800b074 <HAL_SPI_Transmit>
  
  HAL_Delay(2);
 80006e8:	2002      	movs	r0, #2
 80006ea:	f002 fbe7 	bl	8002ebc <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f4:	485e      	ldr	r0, [pc, #376]	; (8000870 <lcd_init+0x2b8>)
 80006f6:	f005 f96b 	bl	80059d0 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000700:	485b      	ldr	r0, [pc, #364]	; (8000870 <lcd_init+0x2b8>)
 8000702:	f005 f965 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000706:	2002      	movs	r0, #2
 8000708:	f002 fbd8 	bl	8002ebc <HAL_Delay>
  HAL_SPI_Transmit(spi, "\x68\x00", 2, 100);
 800070c:	2364      	movs	r3, #100	; 0x64
 800070e:	2202      	movs	r2, #2
 8000710:	495b      	ldr	r1, [pc, #364]	; (8000880 <lcd_init+0x2c8>)
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f00a fcae 	bl	800b074 <HAL_SPI_Transmit>
  HAL_Delay(2);
 8000718:	2002      	movs	r0, #2
 800071a:	f002 fbcf 	bl	8002ebc <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000724:	4852      	ldr	r0, [pc, #328]	; (8000870 <lcd_init+0x2b8>)
 8000726:	f005 f953 	bl	80059d0 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000730:	484f      	ldr	r0, [pc, #316]	; (8000870 <lcd_init+0x2b8>)
 8000732:	f005 f94d 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000736:	2002      	movs	r0, #2
 8000738:	f002 fbc0 	bl	8002ebc <HAL_Delay>
  HAL_SPI_Transmit(spi, "\xd0\x00", 2, 100);
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	2202      	movs	r2, #2
 8000740:	4950      	ldr	r1, [pc, #320]	; (8000884 <lcd_init+0x2cc>)
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f00a fc96 	bl	800b074 <HAL_SPI_Transmit>
  HAL_Delay(2);
 8000748:	2002      	movs	r0, #2
 800074a:	f002 fbb7 	bl	8002ebc <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000754:	4846      	ldr	r0, [pc, #280]	; (8000870 <lcd_init+0x2b8>)
 8000756:	f005 f93b 	bl	80059d0 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000760:	4843      	ldr	r0, [pc, #268]	; (8000870 <lcd_init+0x2b8>)
 8000762:	f005 f935 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000766:	2002      	movs	r0, #2
 8000768:	f002 fba8 	bl	8002ebc <HAL_Delay>
  HAL_SPI_Transmit(spi, "\x1b\x00", 2, 100);
 800076c:	2364      	movs	r3, #100	; 0x64
 800076e:	2202      	movs	r2, #2
 8000770:	4945      	ldr	r1, [pc, #276]	; (8000888 <lcd_init+0x2d0>)
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f00a fc7e 	bl	800b074 <HAL_SPI_Transmit>
  
  HAL_Delay(2);
 8000778:	2002      	movs	r0, #2
 800077a:	f002 fb9f 	bl	8002ebc <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000784:	483a      	ldr	r0, [pc, #232]	; (8000870 <lcd_init+0x2b8>)
 8000786:	f005 f923 	bl	80059d0 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000790:	4837      	ldr	r0, [pc, #220]	; (8000870 <lcd_init+0x2b8>)
 8000792:	f005 f91d 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000796:	2002      	movs	r0, #2
 8000798:	f002 fb90 	bl	8002ebc <HAL_Delay>
  HAL_SPI_Transmit(spi, "\xe0\x00", 2, 100);
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	2202      	movs	r2, #2
 80007a0:	493a      	ldr	r1, [pc, #232]	; (800088c <lcd_init+0x2d4>)
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f00a fc66 	bl	800b074 <HAL_SPI_Transmit>
  
  
  HAL_Delay(2);
 80007a8:	2002      	movs	r0, #2
 80007aa:	f002 fb87 	bl	8002ebc <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b4:	482e      	ldr	r0, [pc, #184]	; (8000870 <lcd_init+0x2b8>)
 80007b6:	f005 f90b 	bl	80059d0 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c0:	482b      	ldr	r0, [pc, #172]	; (8000870 <lcd_init+0x2b8>)
 80007c2:	f005 f905 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80007c6:	2002      	movs	r0, #2
 80007c8:	f002 fb78 	bl	8002ebc <HAL_Delay>
  HAL_SPI_Transmit(spi, "\x6a\x80", 2, 100);
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	2202      	movs	r2, #2
 80007d0:	492f      	ldr	r1, [pc, #188]	; (8000890 <lcd_init+0x2d8>)
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f00a fc4e 	bl	800b074 <HAL_SPI_Transmit>
  
  HAL_Delay(2);
 80007d8:	2002      	movs	r0, #2
 80007da:	f002 fb6f 	bl	8002ebc <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e4:	4822      	ldr	r0, [pc, #136]	; (8000870 <lcd_init+0x2b8>)
 80007e6:	f005 f8f3 	bl	80059d0 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f0:	481f      	ldr	r0, [pc, #124]	; (8000870 <lcd_init+0x2b8>)
 80007f2:	f005 f8ed 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80007f6:	2002      	movs	r0, #2
 80007f8:	f002 fb60 	bl	8002ebc <HAL_Delay>
  HAL_SPI_Transmit(spi, "\x80\x00", 2, 100);
 80007fc:	2364      	movs	r3, #100	; 0x64
 80007fe:	2202      	movs	r2, #2
 8000800:	4924      	ldr	r1, [pc, #144]	; (8000894 <lcd_init+0x2dc>)
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f00a fc36 	bl	800b074 <HAL_SPI_Transmit>
  HAL_Delay(2);
 8000808:	2002      	movs	r0, #2
 800080a:	f002 fb57 	bl	8002ebc <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000814:	4816      	ldr	r0, [pc, #88]	; (8000870 <lcd_init+0x2b8>)
 8000816:	f005 f8db 	bl	80059d0 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000820:	4813      	ldr	r0, [pc, #76]	; (8000870 <lcd_init+0x2b8>)
 8000822:	f005 f8d5 	bl	80059d0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000826:	2002      	movs	r0, #2
 8000828:	f002 fb48 	bl	8002ebc <HAL_Delay>
  HAL_SPI_Transmit(spi, "\x14\x80", 2, 100);
 800082c:	2364      	movs	r3, #100	; 0x64
 800082e:	2202      	movs	r2, #2
 8000830:	4919      	ldr	r1, [pc, #100]	; (8000898 <lcd_init+0x2e0>)
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f00a fc1e 	bl	800b074 <HAL_SPI_Transmit>
  HAL_Delay(2);
 8000838:	2002      	movs	r0, #2
 800083a:	f002 fb3f 	bl	8002ebc <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800083e:	2201      	movs	r2, #1
 8000840:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000844:	480a      	ldr	r0, [pc, #40]	; (8000870 <lcd_init+0x2b8>)
 8000846:	f005 f8c3 	bl	80059d0 <HAL_GPIO_WritePin>


  HAL_LTDC_SetAddress(ltdc,(uint32_t) &framebufferBG, 0);
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <lcd_init+0x2e4>)
 800084c:	2200      	movs	r2, #0
 800084e:	4619      	mov	r1, r3
 8000850:	6838      	ldr	r0, [r7, #0]
 8000852:	f005 f9e5 	bl	8005c20 <HAL_LTDC_SetAddress>
  HAL_LTDC_SetAddress(ltdc,(uint32_t) &framebufferSEG0, 1);
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <lcd_init+0x2e8>)
 8000858:	2201      	movs	r2, #1
 800085a:	4619      	mov	r1, r3
 800085c:	6838      	ldr	r0, [r7, #0]
 800085e:	f005 f9df 	bl	8005c20 <HAL_LTDC_SetAddress>

}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	58020c00 	.word	0x58020c00
 8000870:	58020400 	.word	0x58020400
 8000874:	0800b69c 	.word	0x0800b69c
 8000878:	0800b6a0 	.word	0x0800b6a0
 800087c:	0800b6a4 	.word	0x0800b6a4
 8000880:	0800b6a8 	.word	0x0800b6a8
 8000884:	0800b6ac 	.word	0x0800b6ac
 8000888:	0800b6b0 	.word	0x0800b6b0
 800088c:	0800b6b4 	.word	0x0800b6b4
 8000890:	0800b6b8 	.word	0x0800b6b8
 8000894:	0800b6bc 	.word	0x0800b6bc
 8000898:	0800b6c0 	.word	0x0800b6c0
 800089c:	24000000 	.word	0x24000000
 80008a0:	2404b000 	.word	0x2404b000

080008a4 <fillRLE>:

int buffer = 0;

uint32_t buttonDebounce;

void fillRLE(const char *pointer, int xPos, int yPos, int shadow, int alpha) {
 80008a4:	b480      	push	{r7}
 80008a6:	b08f      	sub	sp, #60	; 0x3c
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
 80008b0:	603b      	str	r3, [r7, #0]

	int imageWidth = (*pointer++ << 8) | *pointer++;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	1c5a      	adds	r2, r3, #1
 80008b6:	60fa      	str	r2, [r7, #12]
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	021a      	lsls	r2, r3, #8
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	1c59      	adds	r1, r3, #1
 80008c0:	60f9      	str	r1, [r7, #12]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	623b      	str	r3, [r7, #32]
	int imageHeight = (*pointer++ << 8) | *pointer++;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	1c5a      	adds	r2, r3, #1
 80008cc:	60fa      	str	r2, [r7, #12]
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	021a      	lsls	r2, r3, #8
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	1c59      	adds	r1, r3, #1
 80008d6:	60f9      	str	r1, [r7, #12]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4313      	orrs	r3, r2
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34

	if (imageHeight + yPos > 240) {						//Check for scroll off bottom
 80008de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4413      	add	r3, r2
 80008e4:	2bf0      	cmp	r3, #240	; 0xf0
 80008e6:	dd03      	ble.n	80008f0 <fillRLE+0x4c>
		imageHeight = 240 - yPos;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
	}

	xPos += shadow;
 80008f0:	68ba      	ldr	r2, [r7, #8]
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	4413      	add	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]
	yPos += shadow;
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	4413      	add	r3, r2
 80008fe:	607b      	str	r3, [r7, #4]

	char countRLE = 1;
 8000900:	2301      	movs	r3, #1
 8000902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint16_t currentPixel;

	int line = yPos * 320;
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	4613      	mov	r3, r2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4413      	add	r3, r2
 800090e:	019b      	lsls	r3, r3, #6
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c

	for (int y = 0 ; y < imageHeight ; y++) {
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
 8000916:	e07c      	b.n	8000a12 <fillRLE+0x16e>

		for (int x = 0 ; x < imageWidth ; x++) {
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
 800091c:	e06e      	b.n	80009fc <fillRLE+0x158>

			 if (--countRLE == 0) {
 800091e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000922:	3b01      	subs	r3, #1
 8000924:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000928:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800092c:	2b00      	cmp	r3, #0
 800092e:	d113      	bne.n	8000958 <fillRLE+0xb4>
				 currentPixel = (*pointer++ << 8) | *pointer++;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	60fa      	str	r2, [r7, #12]
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	021b      	lsls	r3, r3, #8
 800093a:	b21a      	sxth	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	1c59      	adds	r1, r3, #1
 8000940:	60f9      	str	r1, [r7, #12]
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b21b      	sxth	r3, r3
 800094a:	863b      	strh	r3, [r7, #48]	; 0x30
				 countRLE = *pointer++;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	60fa      	str	r2, [r7, #12]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			 }

			uint32_t outPixel = ((currentPixel >> 15) * 255) << 24;		//Turns the single alpha bit into 0 or 255
 8000958:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800095a:	0bdb      	lsrs	r3, r3, #15
 800095c:	b29b      	uxth	r3, r3
 800095e:	461a      	mov	r2, r3
 8000960:	4613      	mov	r3, r2
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	1a9b      	subs	r3, r3, r2
 8000966:	061b      	lsls	r3, r3, #24
 8000968:	61fb      	str	r3, [r7, #28]

			outPixel |= (currentPixel & 0x001F) << 3 | (currentPixel & 0x03E0) << 6 | (currentPixel & 0x7C00) << 9;
 800096a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	b2da      	uxtb	r2, r3
 8000970:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000972:	019b      	lsls	r3, r3, #6
 8000974:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8000978:	431a      	orrs	r2, r3
 800097a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800097c:	025b      	lsls	r3, r3, #9
 800097e:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8000982:	4313      	orrs	r3, r2
 8000984:	461a      	mov	r2, r3
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	4313      	orrs	r3, r2
 800098a:	61fb      	str	r3, [r7, #28]

			int xTemp = x + xPos;
 800098c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	4413      	add	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]
			int yTemp = y + yPos;
 8000994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	617b      	str	r3, [r7, #20]

			if (xTemp > -1 && xTemp < 320 && yTemp > -1 && yTemp < 240) {						//Prevent edge rollover
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	db29      	blt.n	80009f6 <fillRLE+0x152>
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80009a8:	da25      	bge.n	80009f6 <fillRLE+0x152>
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	db22      	blt.n	80009f6 <fillRLE+0x152>
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	2bef      	cmp	r3, #239	; 0xef
 80009b4:	dc1f      	bgt.n	80009f6 <fillRLE+0x152>
				if (shadow) {
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d00e      	beq.n	80009da <fillRLE+0x136>
					if (currentPixel & 0x8000) {
 80009bc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	da18      	bge.n	80009f6 <fillRLE+0x152>
						framebufferBG[line + x + xPos] = alpha << 24;
 80009c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009c6:	0619      	lsls	r1, r3, #24
 80009c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009cc:	441a      	add	r2, r3
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	4413      	add	r3, r2
 80009d2:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <fillRLE+0x184>)
 80009d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009d8:	e00d      	b.n	80009f6 <fillRLE+0x152>
					}
				}
				else {
					if (outPixel & 0xFF000000) {						//Only draw in our solid pixel parts
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d008      	beq.n	80009f6 <fillRLE+0x152>
						framebufferBG[line + x + xPos] = outPixel;
 80009e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e8:	441a      	add	r2, r3
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	4413      	add	r3, r2
 80009ee:	490e      	ldr	r1, [pc, #56]	; (8000a28 <fillRLE+0x184>)
 80009f0:	69fa      	ldr	r2, [r7, #28]
 80009f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int x = 0 ; x < imageWidth ; x++) {
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	3301      	adds	r3, #1
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
 80009fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009fe:	6a3b      	ldr	r3, [r7, #32]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	db8c      	blt.n	800091e <fillRLE+0x7a>
					}
				}
			}

		}
		line += 320;
 8000a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a06:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int y = 0 ; y < imageHeight ; y++) {
 8000a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0e:	3301      	adds	r3, #1
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a16:	429a      	cmp	r2, r3
 8000a18:	f6ff af7e 	blt.w	8000918 <fillRLE+0x74>
	}


}
 8000a1c:	bf00      	nop
 8000a1e:	373c      	adds	r7, #60	; 0x3c
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	24000000 	.word	0x24000000

08000a2c <fillRLEshadow>:

void fillRLEshadow(const char *pointer, int xPos, int yPos, int shadow, int alpha) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af02      	add	r7, sp, #8
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
 8000a38:	603b      	str	r3, [r7, #0]

	  fillRLE(pointer, xPos-3, yPos, 3, 8);
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1ed9      	subs	r1, r3, #3
 8000a3e:	2308      	movs	r3, #8
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2303      	movs	r3, #3
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	68f8      	ldr	r0, [r7, #12]
 8000a48:	f7ff ff2c 	bl	80008a4 <fillRLE>
	  fillRLE(pointer, xPos+3, yPos, 3, 8);
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	1cd9      	adds	r1, r3, #3
 8000a50:	2308      	movs	r3, #8
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2303      	movs	r3, #3
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f7ff ff23 	bl	80008a4 <fillRLE>
	  fillRLE(pointer, xPos, yPos - 3, 3, 8);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	1eda      	subs	r2, r3, #3
 8000a62:	2308      	movs	r3, #8
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2303      	movs	r3, #3
 8000a68:	68b9      	ldr	r1, [r7, #8]
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f7ff ff1a 	bl	80008a4 <fillRLE>
	  fillRLE(pointer, xPos, yPos + 3, 3, 8);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	1cda      	adds	r2, r3, #3
 8000a74:	2308      	movs	r3, #8
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	2303      	movs	r3, #3
 8000a7a:	68b9      	ldr	r1, [r7, #8]
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f7ff ff11 	bl	80008a4 <fillRLE>

	  fillRLE(pointer, xPos, yPos, 3, 32);
 8000a82:	2320      	movs	r3, #32
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	2303      	movs	r3, #3
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	68b9      	ldr	r1, [r7, #8]
 8000a8c:	68f8      	ldr	r0, [r7, #12]
 8000a8e:	f7ff ff09 	bl	80008a4 <fillRLE>
	  fillRLE(pointer, xPos, yPos, 0, 0);
 8000a92:	2300      	movs	r3, #0
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2300      	movs	r3, #0
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	68b9      	ldr	r1, [r7, #8]
 8000a9c:	68f8      	ldr	r0, [r7, #12]
 8000a9e:	f7ff ff01 	bl	80008a4 <fillRLE>

}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <fillSegment>:

int barRow = 0;
int keepRow = 0;			//What row the barkeep is on

void fillSegment(char *pointer, int xPos, int yPos) {
 8000aac:	b480      	push	{r7}
 8000aae:	b08f      	sub	sp, #60	; 0x3c
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]

	int imageWidth = *pointer++;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	1c5a      	adds	r2, r3, #1
 8000abc:	60fa      	str	r2, [r7, #12]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	61fb      	str	r3, [r7, #28]

	int imageHeight = *pointer++;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	1c5a      	adds	r2, r3, #1
 8000ac6:	60fa      	str	r2, [r7, #12]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34

	if (barRow) {
 8000acc:	4b51      	ldr	r3, [pc, #324]	; (8000c14 <fillSegment+0x168>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d010      	beq.n	8000af6 <fillSegment+0x4a>
		xPos -= (barRow * 10);
 8000ad4:	4b4f      	ldr	r3, [pc, #316]	; (8000c14 <fillSegment+0x168>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f06f 0209 	mvn.w	r2, #9
 8000adc:	fb02 f303 	mul.w	r3, r2, r3
 8000ae0:	68ba      	ldr	r2, [r7, #8]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60bb      	str	r3, [r7, #8]
		yPos += (barRow * 63);
 8000ae6:	4b4b      	ldr	r3, [pc, #300]	; (8000c14 <fillSegment+0x168>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4613      	mov	r3, r2
 8000aec:	019b      	lsls	r3, r3, #6
 8000aee:	1a9b      	subs	r3, r3, r2
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	4413      	add	r3, r2
 8000af4:	607b      	str	r3, [r7, #4]
	}

	if (imageHeight + yPos > 240) {						//Check for scroll off bottom
 8000af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4413      	add	r3, r2
 8000afc:	2bf0      	cmp	r3, #240	; 0xf0
 8000afe:	dd03      	ble.n	8000b08 <fillSegment+0x5c>
		imageHeight = 240 - yPos;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
	}

	int line = yPos * 320;
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	4413      	add	r3, r2
 8000b10:	019b      	lsls	r3, r3, #6
 8000b12:	633b      	str	r3, [r7, #48]	; 0x30

	int bitCount = 7;								//7 triggers first byte load
 8000b14:	2307      	movs	r3, #7
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint16_t byteOut = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	857b      	strh	r3, [r7, #42]	; 0x2a

	for (int y = 0 ; y < imageHeight ; y++) {
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b20:	e06e      	b.n	8000c00 <fillSegment+0x154>

		for (int x = 0 ; x < imageWidth ; x++) {
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
 8000b26:	e060      	b.n	8000bea <fillSegment+0x13e>

			if (++bitCount == 8) {					//Time to load new byte from flash?
 8000b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b30:	2b08      	cmp	r3, #8
 8000b32:	d108      	bne.n	8000b46 <fillSegment+0x9a>
				byteOut = *pointer++ << 8;				//Get the byte
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	1c5a      	adds	r2, r3, #1
 8000b38:	60fa      	str	r2, [r7, #12]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	857b      	strh	r3, [r7, #42]	; 0x2a
				bitCount = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
			}

			int xTemp = x + xPos;
 8000b46:	6a3a      	ldr	r2, [r7, #32]
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	61bb      	str	r3, [r7, #24]
			int yTemp = y + yPos;
 8000b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4413      	add	r3, r2
 8000b54:	617b      	str	r3, [r7, #20]

			if (xTemp > -1 && xTemp < 320 && yTemp > -1 && yTemp < 240) {						//Prevent edge rollover
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	db40      	blt.n	8000bde <fillSegment+0x132>
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b62:	da3c      	bge.n	8000bde <fillSegment+0x132>
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db39      	blt.n	8000bde <fillSegment+0x132>
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	2bef      	cmp	r3, #239	; 0xef
 8000b6e:	dc36      	bgt.n	8000bde <fillSegment+0x132>

				if (buffer) {
 8000b70:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <fillSegment+0x16c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d019      	beq.n	8000bac <fillSegment+0x100>
					framebufferSEG1[line + x + xPos] |= byteOut & 0x8000;	//AND the current MSB of byte into alpha bit of this pixel
 8000b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b7a:	6a3b      	ldr	r3, [r7, #32]
 8000b7c:	441a      	add	r2, r3
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a26      	ldr	r2, [pc, #152]	; (8000c1c <fillSegment+0x170>)
 8000b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b88:	b21a      	sxth	r2, r3
 8000b8a:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8000b8e:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <fillSegment+0x174>)
 8000b90:	400b      	ands	r3, r1
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	b219      	sxth	r1, r3
 8000b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b9a:	6a3b      	ldr	r3, [r7, #32]
 8000b9c:	441a      	add	r2, r3
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b289      	uxth	r1, r1
 8000ba4:	4a1d      	ldr	r2, [pc, #116]	; (8000c1c <fillSegment+0x170>)
 8000ba6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000baa:	e018      	b.n	8000bde <fillSegment+0x132>
				}
				else {
					framebufferSEG0[line + x + xPos] |= byteOut & 0x8000;	//AND the current MSB of byte into alpha bit of this pixel
 8000bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bae:	6a3b      	ldr	r3, [r7, #32]
 8000bb0:	441a      	add	r2, r3
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <fillSegment+0x178>)
 8000bb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bbc:	b21a      	sxth	r2, r3
 8000bbe:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <fillSegment+0x174>)
 8000bc4:	400b      	ands	r3, r1
 8000bc6:	b21b      	sxth	r3, r3
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	b219      	sxth	r1, r3
 8000bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bce:	6a3b      	ldr	r3, [r7, #32]
 8000bd0:	441a      	add	r2, r3
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	b289      	uxth	r1, r1
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <fillSegment+0x178>)
 8000bda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}

			}

			byteOut <<= 1;							//Shift in new MSB for next run
 8000bde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	857b      	strh	r3, [r7, #42]	; 0x2a
		for (int x = 0 ; x < imageWidth ; x++) {
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	3301      	adds	r3, #1
 8000be8:	623b      	str	r3, [r7, #32]
 8000bea:	6a3a      	ldr	r2, [r7, #32]
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	db9a      	blt.n	8000b28 <fillSegment+0x7c>

		}
		line += 320;
 8000bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
	for (int y = 0 ; y < imageHeight ; y++) {
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8000c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c04:	429a      	cmp	r2, r3
 8000c06:	db8c      	blt.n	8000b22 <fillSegment+0x76>
	}


}
 8000c08:	bf00      	nop
 8000c0a:	373c      	adds	r7, #60	; 0x3c
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	20000058 	.word	0x20000058
 8000c18:	20000054 	.word	0x20000054
 8000c1c:	24070800 	.word	0x24070800
 8000c20:	ffff8000 	.word	0xffff8000
 8000c24:	2404b000 	.word	0x2404b000

08000c28 <drawRect>:

void drawRect(int xStart, int yStart, int xEnd, int yEnd, uint16_t theAlpha) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
 8000c34:	603b      	str	r3, [r7, #0]

	if (barRow) {
 8000c36:	4b2e      	ldr	r3, [pc, #184]	; (8000cf0 <drawRect+0xc8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d021      	beq.n	8000c82 <drawRect+0x5a>
		xStart -= (barRow * 10);
 8000c3e:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <drawRect+0xc8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f06f 0209 	mvn.w	r2, #9
 8000c46:	fb02 f303 	mul.w	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]
		yStart += (barRow * 63);
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <drawRect+0xc8>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4613      	mov	r3, r2
 8000c56:	019b      	lsls	r3, r3, #6
 8000c58:	1a9b      	subs	r3, r3, r2
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
		xEnd -= (barRow * 10);
 8000c60:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <drawRect+0xc8>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f06f 0209 	mvn.w	r2, #9
 8000c68:	fb02 f303 	mul.w	r3, r2, r3
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	4413      	add	r3, r2
 8000c70:	607b      	str	r3, [r7, #4]
		yEnd += (barRow * 63);
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <drawRect+0xc8>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4613      	mov	r3, r2
 8000c78:	019b      	lsls	r3, r3, #6
 8000c7a:	1a9b      	subs	r3, r3, r2
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	603b      	str	r3, [r7, #0]
	}

	int line = yStart * 320;
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	4613      	mov	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	019b      	lsls	r3, r3, #6
 8000c8c:	61fb      	str	r3, [r7, #28]

	for (int y = yStart ; y < yEnd ; y++) {
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	61bb      	str	r3, [r7, #24]
 8000c92:	e023      	b.n	8000cdc <drawRect+0xb4>

		for (int x = xStart ; x < xEnd ; x++) {
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	e015      	b.n	8000cc6 <drawRect+0x9e>

			if (buffer) {
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <drawRect+0xcc>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d007      	beq.n	8000cb2 <drawRect+0x8a>
				framebufferSEG1[line + x] = theAlpha;	//AND the current MSB of byte into alpha bit of this pixel
 8000ca2:	69fa      	ldr	r2, [r7, #28]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4913      	ldr	r1, [pc, #76]	; (8000cf8 <drawRect+0xd0>)
 8000caa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8000cb0:	e006      	b.n	8000cc0 <drawRect+0x98>
			}
			else {
				framebufferSEG0[line + x] = theAlpha;	//AND the current MSB of byte into alpha bit of this pixel
 8000cb2:	69fa      	ldr	r2, [r7, #28]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4910      	ldr	r1, [pc, #64]	; (8000cfc <drawRect+0xd4>)
 8000cba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cbc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int x = xStart ; x < xEnd ; x++) {
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	dbe5      	blt.n	8000c9a <drawRect+0x72>
			}

		}

		line += 320;
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000cd4:	61fb      	str	r3, [r7, #28]
	for (int y = yStart ; y < yEnd ; y++) {
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	61bb      	str	r3, [r7, #24]
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	dbd7      	blt.n	8000c94 <drawRect+0x6c>
	}

}
 8000ce4:	bf00      	nop
 8000ce6:	3724      	adds	r7, #36	; 0x24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	20000058 	.word	0x20000058
 8000cf4:	20000054 	.word	0x20000054
 8000cf8:	24070800 	.word	0x24070800
 8000cfc:	2404b000 	.word	0x2404b000

08000d00 <decimal>:

void decimal(uint16_t theNumber, int xPos, int yPos) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	81fb      	strh	r3, [r7, #14]

	uint16_t divider = 1000;
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	82fb      	strh	r3, [r7, #22]
	uint8_t zero = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	757b      	strb	r3, [r7, #21]

	if (theNumber == 0) {
 8000d18:	89fb      	ldrh	r3, [r7, #14]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d107      	bne.n	8000d2e <decimal+0x2e>
		fillSegment(&digits, xPos + 45, yPos);
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	332d      	adds	r3, #45	; 0x2d
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	4619      	mov	r1, r3
 8000d26:	4821      	ldr	r0, [pc, #132]	; (8000dac <decimal+0xac>)
 8000d28:	f7ff fec0 	bl	8000aac <fillSegment>
		return;
 8000d2c:	e03a      	b.n	8000da4 <decimal+0xa4>
	}


	for (int g = 0 ; g < 4 ; g++) {
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	e034      	b.n	8000d9e <decimal+0x9e>
		if (theNumber >= divider) {
 8000d34:	89fa      	ldrh	r2, [r7, #14]
 8000d36:	8afb      	ldrh	r3, [r7, #22]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d31c      	bcc.n	8000d76 <decimal+0x76>
			zero = 1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	757b      	strb	r3, [r7, #21]
			//sendByte((theNumber / divider) + 48);		//Convert to ASCII
			fillSegment(&digits[(theNumber/divider) * 40], xPos, yPos);
 8000d40:	89fa      	ldrh	r2, [r7, #14]
 8000d42:	8afb      	ldrh	r3, [r7, #22]
 8000d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <decimal+0xac>)
 8000d58:	4413      	add	r3, r2
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fea4 	bl	8000aac <fillSegment>

			theNumber %= divider;
 8000d64:	89fb      	ldrh	r3, [r7, #14]
 8000d66:	8afa      	ldrh	r2, [r7, #22]
 8000d68:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d6c:	fb02 f201 	mul.w	r2, r2, r1
 8000d70:	1a9b      	subs	r3, r3, r2
 8000d72:	81fb      	strh	r3, [r7, #14]
 8000d74:	e007      	b.n	8000d86 <decimal+0x86>
		}
		else if (zero) {
 8000d76:	7d7b      	ldrb	r3, [r7, #21]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d004      	beq.n	8000d86 <decimal+0x86>
			fillSegment(&digits, xPos, yPos);
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	68b9      	ldr	r1, [r7, #8]
 8000d80:	480a      	ldr	r0, [pc, #40]	; (8000dac <decimal+0xac>)
 8000d82:	f7ff fe93 	bl	8000aac <fillSegment>
			//sendByte('0');
		}

		divider /= 10;
 8000d86:	8afb      	ldrh	r3, [r7, #22]
 8000d88:	4a09      	ldr	r2, [pc, #36]	; (8000db0 <decimal+0xb0>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	08db      	lsrs	r3, r3, #3
 8000d90:	82fb      	strh	r3, [r7, #22]
		xPos += 15;
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	330f      	adds	r3, #15
 8000d96:	60bb      	str	r3, [r7, #8]
	for (int g = 0 ; g < 4 ; g++) {
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	ddc7      	ble.n	8000d34 <decimal+0x34>

	}

}
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	0800d194 	.word	0x0800d194
 8000db0:	cccccccd 	.word	0xcccccccd

08000db4 <spawnMug>:

uint8_t tableTop[3][12];						//Where mugs are on the table
uint8_t tips[3][5];								//Tips left behind


void spawnMug() {
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0

	for (int x = 0 ; x < 20 ; x++) {			//Find next available mug to spawn
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	e04b      	b.n	8000e58 <spawnMug+0xa4>

		if (!mug[x].state) {
 8000dc0:	4929      	ldr	r1, [pc, #164]	; (8000e68 <spawnMug+0xb4>)
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	440b      	add	r3, r1
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d13e      	bne.n	8000e52 <spawnMug+0x9e>

			mug[x].state = 1;
 8000dd4:	4924      	ldr	r1, [pc, #144]	; (8000e68 <spawnMug+0xb4>)
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	440b      	add	r3, r1
 8000de2:	2201      	movs	r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
			//mug[x].xPos = 227;
			mug[x].xCoarse = 11;
 8000de6:	4920      	ldr	r1, [pc, #128]	; (8000e68 <spawnMug+0xb4>)
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	440b      	add	r3, r1
 8000df4:	3304      	adds	r3, #4
 8000df6:	220b      	movs	r2, #11
 8000df8:	701a      	strb	r2, [r3, #0]
			mug[x].yPos = 73;
 8000dfa:	491b      	ldr	r1, [pc, #108]	; (8000e68 <spawnMug+0xb4>)
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4413      	add	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	440b      	add	r3, r1
 8000e08:	3306      	adds	r3, #6
 8000e0a:	2249      	movs	r2, #73	; 0x49
 8000e0c:	801a      	strh	r2, [r3, #0]
			mug[x].counter= 0;
 8000e0e:	4916      	ldr	r1, [pc, #88]	; (8000e68 <spawnMug+0xb4>)
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3308      	adds	r3, #8
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
			mug[x].speed = 2;
 8000e22:	4911      	ldr	r1, [pc, #68]	; (8000e68 <spawnMug+0xb4>)
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	4613      	mov	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	440b      	add	r3, r1
 8000e30:	3309      	adds	r3, #9
 8000e32:	2202      	movs	r2, #2
 8000e34:	701a      	strb	r2, [r3, #0]
			mug[x].whichRow = keepRow;
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <spawnMug+0xb8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	b2d8      	uxtb	r0, r3
 8000e3c:	490a      	ldr	r1, [pc, #40]	; (8000e68 <spawnMug+0xb4>)
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	4613      	mov	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	4413      	add	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	440b      	add	r3, r1
 8000e4a:	330a      	adds	r3, #10
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	701a      	strb	r2, [r3, #0]

			return;
 8000e50:	e005      	b.n	8000e5e <spawnMug+0xaa>
	for (int x = 0 ; x < 20 ; x++) {			//Find next available mug to spawn
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3301      	adds	r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b13      	cmp	r3, #19
 8000e5c:	ddb0      	ble.n	8000dc0 <spawnMug+0xc>
		}
	}

}
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	2000030c 	.word	0x2000030c
 8000e6c:	2000005c 	.word	0x2000005c

08000e70 <drawBarkeep>:

void drawBarkeep() {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af02      	add	r7, sp, #8

	uint32_t buttons = buttons_get();
 8000e76:	f7ff fa39 	bl	80002ec <buttons_get>
 8000e7a:	6038      	str	r0, [r7, #0]

	if (buttons & B_B) {
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	f003 0320 	and.w	r3, r3, #32
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00b      	beq.n	8000e9e <drawBarkeep+0x2e>

		if (buttonDebounce & B_B) {
 8000e86:	4bac      	ldr	r3, [pc, #688]	; (8001138 <drawBarkeep+0x2c8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0320 	and.w	r3, r3, #32
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00b      	beq.n	8000eaa <drawBarkeep+0x3a>

			buttonDebounce &= !B_B;
 8000e92:	4ba9      	ldr	r3, [pc, #676]	; (8001138 <drawBarkeep+0x2c8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
			spawnPatron();
 8000e98:	f000 fdb0 	bl	80019fc <spawnPatron>
 8000e9c:	e005      	b.n	8000eaa <drawBarkeep+0x3a>
		}
	}
	else {
		buttonDebounce |= B_B;
 8000e9e:	4ba6      	ldr	r3, [pc, #664]	; (8001138 <drawBarkeep+0x2c8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f043 0320 	orr.w	r3, r3, #32
 8000ea6:	4aa4      	ldr	r2, [pc, #656]	; (8001138 <drawBarkeep+0x2c8>)
 8000ea8:	6013      	str	r3, [r2, #0]
	}


	if (buttons & B_Left) {
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d01e      	beq.n	8000ef2 <drawBarkeep+0x82>

		if (barDash > 1 && buttonDebounce & B_Left) {
 8000eb4:	4ba1      	ldr	r3, [pc, #644]	; (800113c <drawBarkeep+0x2cc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	dd20      	ble.n	8000efe <drawBarkeep+0x8e>
 8000ebc:	4b9e      	ldr	r3, [pc, #632]	; (8001138 <drawBarkeep+0x2c8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d01a      	beq.n	8000efe <drawBarkeep+0x8e>
			barKeepState = 3;							//Switch to dash state
 8000ec8:	4b9d      	ldr	r3, [pc, #628]	; (8001140 <drawBarkeep+0x2d0>)
 8000eca:	2203      	movs	r2, #3
 8000ecc:	701a      	strb	r2, [r3, #0]
			buttonDebounce &= !B_Left;
 8000ece:	4b9a      	ldr	r3, [pc, #616]	; (8001138 <drawBarkeep+0x2c8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]

			if (barDash == 6) {							//Starting the whoosh?
 8000ed4:	4b99      	ldr	r3, [pc, #612]	; (800113c <drawBarkeep+0x2cc>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b06      	cmp	r3, #6
 8000eda:	d104      	bne.n	8000ee6 <drawBarkeep+0x76>
				dashWhoosh[keepRow] = 4;
 8000edc:	4b99      	ldr	r3, [pc, #612]	; (8001144 <drawBarkeep+0x2d4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a99      	ldr	r2, [pc, #612]	; (8001148 <drawBarkeep+0x2d8>)
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	54d1      	strb	r1, [r2, r3]
			}

			barDash -= 1;
 8000ee6:	4b95      	ldr	r3, [pc, #596]	; (800113c <drawBarkeep+0x2cc>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	4a93      	ldr	r2, [pc, #588]	; (800113c <drawBarkeep+0x2cc>)
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	e005      	b.n	8000efe <drawBarkeep+0x8e>
		}
	}
	else {
		buttonDebounce |= B_Left;
 8000ef2:	4b91      	ldr	r3, [pc, #580]	; (8001138 <drawBarkeep+0x2c8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	4a8f      	ldr	r2, [pc, #572]	; (8001138 <drawBarkeep+0x2c8>)
 8000efc:	6013      	str	r3, [r2, #0]
	}

	if (buttons & B_Right) {
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d021      	beq.n	8000f4c <drawBarkeep+0xdc>

		if (barDash < 6 && buttonDebounce & B_Right) {
 8000f08:	4b8c      	ldr	r3, [pc, #560]	; (800113c <drawBarkeep+0x2cc>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b05      	cmp	r3, #5
 8000f0e:	dc23      	bgt.n	8000f58 <drawBarkeep+0xe8>
 8000f10:	4b89      	ldr	r3, [pc, #548]	; (8001138 <drawBarkeep+0x2c8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d01d      	beq.n	8000f58 <drawBarkeep+0xe8>
			barKeepState = 3;							//Switch to dash state
 8000f1c:	4b88      	ldr	r3, [pc, #544]	; (8001140 <drawBarkeep+0x2d0>)
 8000f1e:	2203      	movs	r2, #3
 8000f20:	701a      	strb	r2, [r3, #0]
			buttonDebounce &= !B_Right;
 8000f22:	4b85      	ldr	r3, [pc, #532]	; (8001138 <drawBarkeep+0x2c8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
			if (++barDash == 6) {						//Moved all the way to right? Tending bar again
 8000f28:	4b84      	ldr	r3, [pc, #528]	; (800113c <drawBarkeep+0x2cc>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	4a83      	ldr	r2, [pc, #524]	; (800113c <drawBarkeep+0x2cc>)
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	4b82      	ldr	r3, [pc, #520]	; (800113c <drawBarkeep+0x2cc>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d10e      	bne.n	8000f58 <drawBarkeep+0xe8>
				dashWhoosh[keepRow] = 4;
 8000f3a:	4b82      	ldr	r3, [pc, #520]	; (8001144 <drawBarkeep+0x2d4>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a82      	ldr	r2, [pc, #520]	; (8001148 <drawBarkeep+0x2d8>)
 8000f40:	2104      	movs	r1, #4
 8000f42:	54d1      	strb	r1, [r2, r3]
				barKeepState = 1;
 8000f44:	4b7e      	ldr	r3, [pc, #504]	; (8001140 <drawBarkeep+0x2d0>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	e005      	b.n	8000f58 <drawBarkeep+0xe8>
			}
		}
	}
	else {
		buttonDebounce |= B_Right;
 8000f4c:	4b7a      	ldr	r3, [pc, #488]	; (8001138 <drawBarkeep+0x2c8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	4a78      	ldr	r2, [pc, #480]	; (8001138 <drawBarkeep+0x2c8>)
 8000f56:	6013      	str	r3, [r2, #0]
	}

	switch(barKeepState) {
 8000f58:	4b79      	ldr	r3, [pc, #484]	; (8001140 <drawBarkeep+0x2d0>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d03d      	beq.n	8000fdc <drawBarkeep+0x16c>
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	f000 80a5 	beq.w	80010b0 <drawBarkeep+0x240>
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	f040 8109 	bne.w	800117e <drawBarkeep+0x30e>

		case 1:						//Tending bar
			fillSegment(&barKeepTend, 253, 53);
 8000f6c:	2235      	movs	r2, #53	; 0x35
 8000f6e:	21fd      	movs	r1, #253	; 0xfd
 8000f70:	4876      	ldr	r0, [pc, #472]	; (800114c <drawBarkeep+0x2dc>)
 8000f72:	f7ff fd9b 	bl	8000aac <fillSegment>

			if (barAnimation < 20) {
 8000f76:	4b76      	ldr	r3, [pc, #472]	; (8001150 <drawBarkeep+0x2e0>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b13      	cmp	r3, #19
 8000f7c:	dc05      	bgt.n	8000f8a <drawBarkeep+0x11a>
				fillSegment(&wipe1, 240, 74);
 8000f7e:	224a      	movs	r2, #74	; 0x4a
 8000f80:	21f0      	movs	r1, #240	; 0xf0
 8000f82:	4874      	ldr	r0, [pc, #464]	; (8001154 <drawBarkeep+0x2e4>)
 8000f84:	f7ff fd92 	bl	8000aac <fillSegment>
 8000f88:	e004      	b.n	8000f94 <drawBarkeep+0x124>
			}
			else {
				fillSegment(&wipe2, 240, 74);
 8000f8a:	224a      	movs	r2, #74	; 0x4a
 8000f8c:	21f0      	movs	r1, #240	; 0xf0
 8000f8e:	4872      	ldr	r0, [pc, #456]	; (8001158 <drawBarkeep+0x2e8>)
 8000f90:	f7ff fd8c 	bl	8000aac <fillSegment>
			}

			if (++barAnimation > 40) {
 8000f94:	4b6e      	ldr	r3, [pc, #440]	; (8001150 <drawBarkeep+0x2e0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	4a6d      	ldr	r2, [pc, #436]	; (8001150 <drawBarkeep+0x2e0>)
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b6c      	ldr	r3, [pc, #432]	; (8001150 <drawBarkeep+0x2e0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b28      	cmp	r3, #40	; 0x28
 8000fa4:	dd02      	ble.n	8000fac <drawBarkeep+0x13c>
				barAnimation = 0;
 8000fa6:	4b6a      	ldr	r3, [pc, #424]	; (8001150 <drawBarkeep+0x2e0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
			}

			if(buttons & B_A) {		//Start filling glass?
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	f003 0310 	and.w	r3, r3, #16
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d005      	beq.n	8000fc2 <drawBarkeep+0x152>
				barKeepState = 2;
 8000fb6:	4b62      	ldr	r3, [pc, #392]	; (8001140 <drawBarkeep+0x2d0>)
 8000fb8:	2202      	movs	r2, #2
 8000fba:	701a      	strb	r2, [r3, #0]
				barAnimation = 0;
 8000fbc:	4b64      	ldr	r3, [pc, #400]	; (8001150 <drawBarkeep+0x2e0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
			}

			if(buttons & B_POWER) {		//Start filling glass?
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80b0 	beq.w	800112e <drawBarkeep+0x2be>
				barKeepState = 2;
 8000fce:	4b5c      	ldr	r3, [pc, #368]	; (8001140 <drawBarkeep+0x2d0>)
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	701a      	strb	r2, [r3, #0]
				barAnimation = 0;
 8000fd4:	4b5e      	ldr	r3, [pc, #376]	; (8001150 <drawBarkeep+0x2e0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
			}

		break;
 8000fda:	e0a8      	b.n	800112e <drawBarkeep+0x2be>

		case 2:						//Filling glass

			fillSegment(&barKeepPour, 274, 52);
 8000fdc:	2234      	movs	r2, #52	; 0x34
 8000fde:	f44f 7189 	mov.w	r1, #274	; 0x112
 8000fe2:	485e      	ldr	r0, [pc, #376]	; (800115c <drawBarkeep+0x2ec>)
 8000fe4:	f7ff fd62 	bl	8000aac <fillSegment>
			fillSegment(&mugFilling, 297, 70);
 8000fe8:	2246      	movs	r2, #70	; 0x46
 8000fea:	f240 1129 	movw	r1, #297	; 0x129
 8000fee:	485c      	ldr	r0, [pc, #368]	; (8001160 <drawBarkeep+0x2f0>)
 8000ff0:	f7ff fd5c 	bl	8000aac <fillSegment>

			barAnimation++;
 8000ff4:	4b56      	ldr	r3, [pc, #344]	; (8001150 <drawBarkeep+0x2e0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a55      	ldr	r2, [pc, #340]	; (8001150 <drawBarkeep+0x2e0>)
 8000ffc:	6013      	str	r3, [r2, #0]

			if (barAnimation > 2) {						//After a couple ticks show his arm pulling lever
 8000ffe:	4b54      	ldr	r3, [pc, #336]	; (8001150 <drawBarkeep+0x2e0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b02      	cmp	r3, #2
 8001004:	dd0f      	ble.n	8001026 <drawBarkeep+0x1b6>
				fillSegment(&armPull, 293, 51);
 8001006:	2233      	movs	r2, #51	; 0x33
 8001008:	f240 1125 	movw	r1, #293	; 0x125
 800100c:	4855      	ldr	r0, [pc, #340]	; (8001164 <drawBarkeep+0x2f4>)
 800100e:	f7ff fd4d 	bl	8000aac <fillSegment>
				drawRect(310, 48, 312, 60, 0);			//Erase the previously drawn erect tapper lever
 8001012:	2300      	movs	r3, #0
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	233c      	movs	r3, #60	; 0x3c
 8001018:	f44f 729c 	mov.w	r2, #312	; 0x138
 800101c:	2130      	movs	r1, #48	; 0x30
 800101e:	f44f 709b 	mov.w	r0, #310	; 0x136
 8001022:	f7ff fe01 	bl	8000c28 <drawRect>
			}

			if (barAnimation > 3) {
 8001026:	4b4a      	ldr	r3, [pc, #296]	; (8001150 <drawBarkeep+0x2e0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b03      	cmp	r3, #3
 800102c:	dd0a      	ble.n	8001044 <drawBarkeep+0x1d4>
				drawRect(303, 81, 308, 83, 0x8000);
 800102e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2353      	movs	r3, #83	; 0x53
 8001036:	f44f 729a 	mov.w	r2, #308	; 0x134
 800103a:	2151      	movs	r1, #81	; 0x51
 800103c:	f240 102f 	movw	r0, #303	; 0x12f
 8001040:	f7ff fdf2 	bl	8000c28 <drawRect>
			}
			if (barAnimation > 4) {
 8001044:	4b42      	ldr	r3, [pc, #264]	; (8001150 <drawBarkeep+0x2e0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b04      	cmp	r3, #4
 800104a:	dd0a      	ble.n	8001062 <drawBarkeep+0x1f2>
				drawRect(303, 77, 308, 79, 0x8000);
 800104c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	234f      	movs	r3, #79	; 0x4f
 8001054:	f44f 729a 	mov.w	r2, #308	; 0x134
 8001058:	214d      	movs	r1, #77	; 0x4d
 800105a:	f240 102f 	movw	r0, #303	; 0x12f
 800105e:	f7ff fde3 	bl	8000c28 <drawRect>
			}
			if (barAnimation > 5) {
 8001062:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <drawBarkeep+0x2e0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b05      	cmp	r3, #5
 8001068:	dd10      	ble.n	800108c <drawBarkeep+0x21c>
				drawRect(303, 73, 308, 75, 0x8000);
 800106a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	234b      	movs	r3, #75	; 0x4b
 8001072:	f44f 729a 	mov.w	r2, #308	; 0x134
 8001076:	2149      	movs	r1, #73	; 0x49
 8001078:	f240 102f 	movw	r0, #303	; 0x12f
 800107c:	f7ff fdd4 	bl	8000c28 <drawRect>
				beerFull = 1;
 8001080:	4b39      	ldr	r3, [pc, #228]	; (8001168 <drawBarkeep+0x2f8>)
 8001082:	2201      	movs	r2, #1
 8001084:	601a      	str	r2, [r3, #0]
				barAnimation = 12;
 8001086:	4b32      	ldr	r3, [pc, #200]	; (8001150 <drawBarkeep+0x2e0>)
 8001088:	220c      	movs	r2, #12
 800108a:	601a      	str	r2, [r3, #0]
			}

			if(!(buttons & B_A)) {	//Stop filling glass?
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	2b00      	cmp	r3, #0
 8001094:	d14d      	bne.n	8001132 <drawBarkeep+0x2c2>
				barKeepState = 1;
 8001096:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <drawBarkeep+0x2d0>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
				if (barAnimation > 11) {
 800109c:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <drawBarkeep+0x2e0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b0b      	cmp	r3, #11
 80010a2:	dd01      	ble.n	80010a8 <drawBarkeep+0x238>
					spawnMug();
 80010a4:	f7ff fe86 	bl	8000db4 <spawnMug>
				}

				barAnimation = 0;
 80010a8:	4b29      	ldr	r3, [pc, #164]	; (8001150 <drawBarkeep+0x2e0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
			}

		break;
 80010ae:	e040      	b.n	8001132 <drawBarkeep+0x2c2>

		case 3:											//Dash for cash. 38 pixel H spacing x 6 dash positions. 87 byte offset per dash position (0-5)
			fillSegment(&barDashGFX[barDash * 87], 17 + (barDash * 38), 97);			//Draw the dashing bartender
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <drawBarkeep+0x2cc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2257      	movs	r2, #87	; 0x57
 80010b6:	fb02 f303 	mul.w	r3, r2, r3
 80010ba:	4a2c      	ldr	r2, [pc, #176]	; (800116c <drawBarkeep+0x2fc>)
 80010bc:	1898      	adds	r0, r3, r2
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <drawBarkeep+0x2cc>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2226      	movs	r2, #38	; 0x26
 80010c4:	fb02 f303 	mul.w	r3, r2, r3
 80010c8:	3311      	adds	r3, #17
 80010ca:	2261      	movs	r2, #97	; 0x61
 80010cc:	4619      	mov	r1, r3
 80010ce:	f7ff fced 	bl	8000aac <fillSegment>

			if (tips[barRow][barDash - 1]) {			//Grabbed a tip?
 80010d2:	4b27      	ldr	r3, [pc, #156]	; (8001170 <drawBarkeep+0x300>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <drawBarkeep+0x2cc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	1e59      	subs	r1, r3, #1
 80010dc:	4825      	ldr	r0, [pc, #148]	; (8001174 <drawBarkeep+0x304>)
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	4403      	add	r3, r0
 80010e6:	440b      	add	r3, r1
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d046      	beq.n	800117c <drawBarkeep+0x30c>
				tipsTotal += tips[barRow][barDash - 1];	//Add them to the pile
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <drawBarkeep+0x300>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <drawBarkeep+0x2cc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	1e59      	subs	r1, r3, #1
 80010f8:	481e      	ldr	r0, [pc, #120]	; (8001174 <drawBarkeep+0x304>)
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	4403      	add	r3, r0
 8001102:	440b      	add	r3, r1
 8001104:	781a      	ldrb	r2, [r3, #0]
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <drawBarkeep+0x308>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <drawBarkeep+0x308>)
 8001110:	701a      	strb	r2, [r3, #0]
				tips[barRow][barDash - 1] = 0;			//Clear tips
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <drawBarkeep+0x300>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <drawBarkeep+0x2cc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1e59      	subs	r1, r3, #1
 800111c:	4815      	ldr	r0, [pc, #84]	; (8001174 <drawBarkeep+0x304>)
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	4403      	add	r3, r0
 8001126:	440b      	add	r3, r1
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
			}


			//Collect monies or mugs here---------------------------

		break;
 800112c:	e026      	b.n	800117c <drawBarkeep+0x30c>
		break;
 800112e:	bf00      	nop
 8001130:	e025      	b.n	800117e <drawBarkeep+0x30e>
		break;
 8001132:	bf00      	nop
 8001134:	e023      	b.n	800117e <drawBarkeep+0x30e>
 8001136:	bf00      	nop
 8001138:	2000058c 	.word	0x2000058c
 800113c:	20000004 	.word	0x20000004
 8001140:	20000000 	.word	0x20000000
 8001144:	2000005c 	.word	0x2000005c
 8001148:	20000628 	.word	0x20000628
 800114c:	0800d324 	.word	0x0800d324
 8001150:	20000060 	.word	0x20000060
 8001154:	0800d77c 	.word	0x0800d77c
 8001158:	0800d798 	.word	0x0800d798
 800115c:	0800d3bc 	.word	0x0800d3bc
 8001160:	0800d458 	.word	0x0800d458
 8001164:	0800d47c 	.word	0x0800d47c
 8001168:	20000064 	.word	0x20000064
 800116c:	0800d4ec 	.word	0x0800d4ec
 8001170:	20000058 	.word	0x20000058
 8001174:	2000062c 	.word	0x2000062c
 8001178:	20000069 	.word	0x20000069
		break;
 800117c:	bf00      	nop

	}


	if (buttons & B_Up) {
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d020      	beq.n	80011ca <drawBarkeep+0x35a>

		if (keepRow > 0 && buttonDebounce & B_Up) {
 8001188:	4b4f      	ldr	r3, [pc, #316]	; (80012c8 <drawBarkeep+0x458>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	dd22      	ble.n	80011d6 <drawBarkeep+0x366>
 8001190:	4b4e      	ldr	r3, [pc, #312]	; (80012cc <drawBarkeep+0x45c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d01c      	beq.n	80011d6 <drawBarkeep+0x366>
			buttonDebounce &= !B_Up;
 800119c:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <drawBarkeep+0x45c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
			keepRow -= 1;
 80011a2:	4b49      	ldr	r3, [pc, #292]	; (80012c8 <drawBarkeep+0x458>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	4a47      	ldr	r2, [pc, #284]	; (80012c8 <drawBarkeep+0x458>)
 80011aa:	6013      	str	r3, [r2, #0]
			whoosh[keepRow] = 4;
 80011ac:	4b46      	ldr	r3, [pc, #280]	; (80012c8 <drawBarkeep+0x458>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a47      	ldr	r2, [pc, #284]	; (80012d0 <drawBarkeep+0x460>)
 80011b2:	2104      	movs	r1, #4
 80011b4:	54d1      	strb	r1, [r2, r3]
			barAnimation = 16;
 80011b6:	4b47      	ldr	r3, [pc, #284]	; (80012d4 <drawBarkeep+0x464>)
 80011b8:	2210      	movs	r2, #16
 80011ba:	601a      	str	r2, [r3, #0]
			barDash = 6;
 80011bc:	4b46      	ldr	r3, [pc, #280]	; (80012d8 <drawBarkeep+0x468>)
 80011be:	2206      	movs	r2, #6
 80011c0:	601a      	str	r2, [r3, #0]
			barKeepState = 1;
 80011c2:	4b46      	ldr	r3, [pc, #280]	; (80012dc <drawBarkeep+0x46c>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]
 80011c8:	e005      	b.n	80011d6 <drawBarkeep+0x366>
		}
	}
	else {
		buttonDebounce |= B_Up;
 80011ca:	4b40      	ldr	r3, [pc, #256]	; (80012cc <drawBarkeep+0x45c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	4a3e      	ldr	r2, [pc, #248]	; (80012cc <drawBarkeep+0x45c>)
 80011d4:	6013      	str	r3, [r2, #0]
	}

	if (buttons & B_Down) {
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d021      	beq.n	8001224 <drawBarkeep+0x3b4>
		if (keepRow < 2 && buttonDebounce & B_Down) {
 80011e0:	4b39      	ldr	r3, [pc, #228]	; (80012c8 <drawBarkeep+0x458>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	dc23      	bgt.n	8001230 <drawBarkeep+0x3c0>
 80011e8:	4b38      	ldr	r3, [pc, #224]	; (80012cc <drawBarkeep+0x45c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d01d      	beq.n	8001230 <drawBarkeep+0x3c0>
			buttonDebounce &= !B_Down;
 80011f4:	4b35      	ldr	r3, [pc, #212]	; (80012cc <drawBarkeep+0x45c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
			keepRow += 1;
 80011fa:	4b33      	ldr	r3, [pc, #204]	; (80012c8 <drawBarkeep+0x458>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	4a31      	ldr	r2, [pc, #196]	; (80012c8 <drawBarkeep+0x458>)
 8001202:	6013      	str	r3, [r2, #0]
			whoosh[keepRow - 1] = 4;
 8001204:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <drawBarkeep+0x458>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	3b01      	subs	r3, #1
 800120a:	4a31      	ldr	r2, [pc, #196]	; (80012d0 <drawBarkeep+0x460>)
 800120c:	2104      	movs	r1, #4
 800120e:	54d1      	strb	r1, [r2, r3]
			barAnimation = 16;
 8001210:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <drawBarkeep+0x464>)
 8001212:	2210      	movs	r2, #16
 8001214:	601a      	str	r2, [r3, #0]
			barDash = 6;
 8001216:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <drawBarkeep+0x468>)
 8001218:	2206      	movs	r2, #6
 800121a:	601a      	str	r2, [r3, #0]
			barKeepState = 1;
 800121c:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <drawBarkeep+0x46c>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	e005      	b.n	8001230 <drawBarkeep+0x3c0>
		}
	}
	else {
		buttonDebounce |= B_Down;
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <drawBarkeep+0x45c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	4a27      	ldr	r2, [pc, #156]	; (80012cc <drawBarkeep+0x45c>)
 800122e:	6013      	str	r3, [r2, #0]
	}

	if (whoosh[0]) {
 8001230:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <drawBarkeep+0x460>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00e      	beq.n	8001256 <drawBarkeep+0x3e6>
		--whoosh[0];
 8001238:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <drawBarkeep+0x460>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	3b01      	subs	r3, #1
 800123e:	b2da      	uxtb	r2, r3
 8001240:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <drawBarkeep+0x460>)
 8001242:	701a      	strb	r2, [r3, #0]
		barRow = 0;
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <drawBarkeep+0x470>)
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
		fillSegment(&vWhoosh, 267, 105);
 800124a:	2269      	movs	r2, #105	; 0x69
 800124c:	f240 110b 	movw	r1, #267	; 0x10b
 8001250:	4824      	ldr	r0, [pc, #144]	; (80012e4 <drawBarkeep+0x474>)
 8001252:	f7ff fc2b 	bl	8000aac <fillSegment>
	}
	if (whoosh[1]) {
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <drawBarkeep+0x460>)
 8001258:	785b      	ldrb	r3, [r3, #1]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00e      	beq.n	800127c <drawBarkeep+0x40c>
		--whoosh[1];
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <drawBarkeep+0x460>)
 8001260:	785b      	ldrb	r3, [r3, #1]
 8001262:	3b01      	subs	r3, #1
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <drawBarkeep+0x460>)
 8001268:	705a      	strb	r2, [r3, #1]
		barRow = 1;
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <drawBarkeep+0x470>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]
		fillSegment(&vWhoosh, 267, 105);
 8001270:	2269      	movs	r2, #105	; 0x69
 8001272:	f240 110b 	movw	r1, #267	; 0x10b
 8001276:	481b      	ldr	r0, [pc, #108]	; (80012e4 <drawBarkeep+0x474>)
 8001278:	f7ff fc18 	bl	8000aac <fillSegment>
	}

	for (int x = 0 ; x < 3 ; x++) {
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	e01b      	b.n	80012ba <drawBarkeep+0x44a>

		if (dashWhoosh[x]) {
 8001282:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <drawBarkeep+0x478>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4413      	add	r3, r2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d012      	beq.n	80012b4 <drawBarkeep+0x444>
			--dashWhoosh[x];
 800128e:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <drawBarkeep+0x478>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	3b01      	subs	r3, #1
 8001298:	b2d9      	uxtb	r1, r3
 800129a:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <drawBarkeep+0x478>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4413      	add	r3, r2
 80012a0:	460a      	mov	r2, r1
 80012a2:	701a      	strb	r2, [r3, #0]
			barRow = x;
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <drawBarkeep+0x470>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
			fillSegment(&hWhoosh, 241, 105);
 80012aa:	2269      	movs	r2, #105	; 0x69
 80012ac:	21f1      	movs	r1, #241	; 0xf1
 80012ae:	480f      	ldr	r0, [pc, #60]	; (80012ec <drawBarkeep+0x47c>)
 80012b0:	f7ff fbfc 	bl	8000aac <fillSegment>
	for (int x = 0 ; x < 3 ; x++) {
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3301      	adds	r3, #1
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	dde0      	ble.n	8001282 <drawBarkeep+0x412>
		}

	}

}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000005c 	.word	0x2000005c
 80012cc:	2000058c 	.word	0x2000058c
 80012d0:	20000574 	.word	0x20000574
 80012d4:	20000060 	.word	0x20000060
 80012d8:	20000004 	.word	0x20000004
 80012dc:	20000000 	.word	0x20000000
 80012e0:	20000058 	.word	0x20000058
 80012e4:	0800d6f8 	.word	0x0800d6f8
 80012e8:	20000628 	.word	0x20000628
 80012ec:	0800d714 	.word	0x0800d714

080012f0 <drawMugs>:

void drawMugs() {
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0

	memset(&tableTop, 0xFF, 36);					//Clear the tabletop array with 0xFF (no mug index)
 80012f6:	2224      	movs	r2, #36	; 0x24
 80012f8:	21ff      	movs	r1, #255	; 0xff
 80012fa:	4880      	ldr	r0, [pc, #512]	; (80014fc <drawMugs+0x20c>)
 80012fc:	f00a f9ba 	bl	800b674 <memset>

	for (int x = 0 ; x < 20 ; x++) {
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	e0f1      	b.n	80014ea <drawMugs+0x1fa>

		if (mug[x].state) {
 8001306:	497e      	ldr	r1, [pc, #504]	; (8001500 <drawMugs+0x210>)
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 80e4 	beq.w	80014e4 <drawMugs+0x1f4>

			switch(mug[x].state) {
 800131c:	4978      	ldr	r1, [pc, #480]	; (8001500 <drawMugs+0x210>)
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	4613      	mov	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d003      	beq.n	8001338 <drawMugs+0x48>
 8001330:	2b02      	cmp	r3, #2
 8001332:	f000 80a7 	beq.w	8001484 <drawMugs+0x194>
 8001336:	e0d5      	b.n	80014e4 <drawMugs+0x1f4>

				case 1:													//Going towards customer?
					barRow = mug[x].whichRow;
 8001338:	4971      	ldr	r1, [pc, #452]	; (8001500 <drawMugs+0x210>)
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	330a      	adds	r3, #10
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	4b6d      	ldr	r3, [pc, #436]	; (8001504 <drawMugs+0x214>)
 800134e:	601a      	str	r2, [r3, #0]
					fillSegment(&mugThrown, 18 + (mug[x].xCoarse * 19), mug[x].yPos);
 8001350:	496b      	ldr	r1, [pc, #428]	; (8001500 <drawMugs+0x210>)
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	3304      	adds	r3, #4
 8001360:	f993 3000 	ldrsb.w	r3, [r3]
 8001364:	461a      	mov	r2, r3
 8001366:	4613      	mov	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	4413      	add	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	f103 0012 	add.w	r0, r3, #18
 8001374:	4962      	ldr	r1, [pc, #392]	; (8001500 <drawMugs+0x210>)
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	3306      	adds	r3, #6
 8001384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001388:	461a      	mov	r2, r3
 800138a:	4601      	mov	r1, r0
 800138c:	485e      	ldr	r0, [pc, #376]	; (8001508 <drawMugs+0x218>)
 800138e:	f7ff fb8d 	bl	8000aac <fillSegment>
					tableTop[barRow][mug[x].xCoarse] = x;				//Mark what mug is in this position
 8001392:	4b5c      	ldr	r3, [pc, #368]	; (8001504 <drawMugs+0x214>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	485a      	ldr	r0, [pc, #360]	; (8001500 <drawMugs+0x210>)
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	460b      	mov	r3, r1
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	440b      	add	r3, r1
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4403      	add	r3, r0
 80013a4:	3304      	adds	r3, #4
 80013a6:	f993 3000 	ldrsb.w	r3, [r3]
 80013aa:	461c      	mov	r4, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	b2d8      	uxtb	r0, r3
 80013b0:	4952      	ldr	r1, [pc, #328]	; (80014fc <drawMugs+0x20c>)
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	4423      	add	r3, r4
 80013be:	4602      	mov	r2, r0
 80013c0:	701a      	strb	r2, [r3, #0]

					if (++mug[x].counter == mug[x].speed) {				//Time to move this mug?
 80013c2:	494f      	ldr	r1, [pc, #316]	; (8001500 <drawMugs+0x210>)
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	3308      	adds	r3, #8
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	b2d8      	uxtb	r0, r3
 80013d8:	4949      	ldr	r1, [pc, #292]	; (8001500 <drawMugs+0x210>)
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	3308      	adds	r3, #8
 80013e8:	4602      	mov	r2, r0
 80013ea:	701a      	strb	r2, [r3, #0]
 80013ec:	4944      	ldr	r1, [pc, #272]	; (8001500 <drawMugs+0x210>)
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	3308      	adds	r3, #8
 80013fc:	7819      	ldrb	r1, [r3, #0]
 80013fe:	4840      	ldr	r0, [pc, #256]	; (8001500 <drawMugs+0x210>)
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4403      	add	r3, r0
 800140c:	3309      	adds	r3, #9
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4299      	cmp	r1, r3
 8001412:	d166      	bne.n	80014e2 <drawMugs+0x1f2>
						mug[x].counter = 0;
 8001414:	493a      	ldr	r1, [pc, #232]	; (8001500 <drawMugs+0x210>)
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	3308      	adds	r3, #8
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
						mug[x].xCoarse -= 1;
 8001428:	4935      	ldr	r1, [pc, #212]	; (8001500 <drawMugs+0x210>)
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	3304      	adds	r3, #4
 8001438:	f993 3000 	ldrsb.w	r3, [r3]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	3b01      	subs	r3, #1
 8001440:	b2db      	uxtb	r3, r3
 8001442:	b258      	sxtb	r0, r3
 8001444:	492e      	ldr	r1, [pc, #184]	; (8001500 <drawMugs+0x210>)
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	3304      	adds	r3, #4
 8001454:	4602      	mov	r2, r0
 8001456:	701a      	strb	r2, [r3, #0]

						if (mug[x].xCoarse < 0) {
 8001458:	4929      	ldr	r1, [pc, #164]	; (8001500 <drawMugs+0x210>)
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	3304      	adds	r3, #4
 8001468:	f993 3000 	ldrsb.w	r3, [r3]
 800146c:	2b00      	cmp	r3, #0
 800146e:	da38      	bge.n	80014e2 <drawMugs+0x1f2>
							mug[x].state = 0;							//Despawn mug
 8001470:	4923      	ldr	r1, [pc, #140]	; (8001500 <drawMugs+0x210>)
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
						}

					}

				break;
 8001482:	e02e      	b.n	80014e2 <drawMugs+0x1f2>

				case 2:													//Customer has beer?
					barRow = mug[x].whichRow;
 8001484:	491e      	ldr	r1, [pc, #120]	; (8001500 <drawMugs+0x210>)
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	330a      	adds	r3, #10
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <drawMugs+0x214>)
 800149a:	601a      	str	r2, [r3, #0]
					fillSegment(&mugFull, 18 + (mug[x].xCoarse * 19), mug[x].yPos + 6);
 800149c:	4918      	ldr	r1, [pc, #96]	; (8001500 <drawMugs+0x210>)
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	3304      	adds	r3, #4
 80014ac:	f993 3000 	ldrsb.w	r3, [r3]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	4413      	add	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4413      	add	r3, r2
 80014bc:	f103 0012 	add.w	r0, r3, #18
 80014c0:	490f      	ldr	r1, [pc, #60]	; (8001500 <drawMugs+0x210>)
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	3306      	adds	r3, #6
 80014d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d4:	3306      	adds	r3, #6
 80014d6:	461a      	mov	r2, r3
 80014d8:	4601      	mov	r1, r0
 80014da:	480c      	ldr	r0, [pc, #48]	; (800150c <drawMugs+0x21c>)
 80014dc:	f7ff fae6 	bl	8000aac <fillSegment>
				break;
 80014e0:	e000      	b.n	80014e4 <drawMugs+0x1f4>
				break;
 80014e2:	bf00      	nop
	for (int x = 0 ; x < 20 ; x++) {
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3301      	adds	r3, #1
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b13      	cmp	r3, #19
 80014ee:	f77f af0a 	ble.w	8001306 <drawMugs+0x16>

		}

	}

}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd90      	pop	{r4, r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000550 	.word	0x20000550
 8001500:	2000030c 	.word	0x2000030c
 8001504:	20000058 	.word	0x20000058
 8001508:	0800d734 	.word	0x0800d734
 800150c:	0800d4bc 	.word	0x0800d4bc

08001510 <drawTips>:

void drawTips() {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0

	for (int y = 0 ; y < 3 ; y++) {
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	e023      	b.n	8001564 <drawTips+0x54>

		barRow = y;
 800151c:	4a15      	ldr	r2, [pc, #84]	; (8001574 <drawTips+0x64>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]

		for (int x = 0 ; x < 5 ; x++) {
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	e017      	b.n	8001558 <drawTips+0x48>
			if (tips[y][x]) {
 8001528:	4913      	ldr	r1, [pc, #76]	; (8001578 <drawTips+0x68>)
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	18ca      	adds	r2, r1, r3
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	4413      	add	r3, r2
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d009      	beq.n	8001552 <drawTips+0x42>
				fillSegment(&money, 42 + (x * 38), 97);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2226      	movs	r2, #38	; 0x26
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	332a      	adds	r3, #42	; 0x2a
 8001548:	2261      	movs	r2, #97	; 0x61
 800154a:	4619      	mov	r1, r3
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <drawTips+0x6c>)
 800154e:	f7ff faad 	bl	8000aac <fillSegment>
		for (int x = 0 ; x < 5 ; x++) {
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	3301      	adds	r3, #1
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2b04      	cmp	r3, #4
 800155c:	dde4      	ble.n	8001528 <drawTips+0x18>
	for (int y = 0 ; y < 3 ; y++) {
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3301      	adds	r3, #1
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b02      	cmp	r3, #2
 8001568:	ddd8      	ble.n	800151c <drawTips+0xc>
			}
		}

	}

}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000058 	.word	0x20000058
 8001578:	2000062c 	.word	0x2000062c
 800157c:	0800d4e0 	.word	0x0800d4e0

08001580 <checkCollisions>:

void checkCollisions() {
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0

	for (int x = 0 ; x < 36 ; x++) {
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	e0c1      	b.n	8001710 <checkCollisions+0x190>

		if (patron[x].state == 1) {
 800158c:	4965      	ldr	r1, [pc, #404]	; (8001724 <checkCollisions+0x1a4>)
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b01      	cmp	r3, #1
 800159e:	f040 80b4 	bne.w	800170a <checkCollisions+0x18a>

			barRow = patron[x].whichRow;
 80015a2:	4960      	ldr	r1, [pc, #384]	; (8001724 <checkCollisions+0x1a4>)
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4413      	add	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	3305      	adds	r3, #5
 80015b2:	f993 3000 	ldrsb.w	r3, [r3]
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b5b      	ldr	r3, [pc, #364]	; (8001728 <checkCollisions+0x1a8>)
 80015ba:	601a      	str	r2, [r3, #0]

			if (tableTop[barRow][patron[x].xCoarse] != 0xFF) {			//A mug is here?
 80015bc:	4b5a      	ldr	r3, [pc, #360]	; (8001728 <checkCollisions+0x1a8>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4858      	ldr	r0, [pc, #352]	; (8001724 <checkCollisions+0x1a4>)
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	440b      	add	r3, r1
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4403      	add	r3, r0
 80015ce:	3304      	adds	r3, #4
 80015d0:	f993 3000 	ldrsb.w	r3, [r3]
 80015d4:	4618      	mov	r0, r3
 80015d6:	4955      	ldr	r1, [pc, #340]	; (800172c <checkCollisions+0x1ac>)
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	4403      	add	r3, r0
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2bff      	cmp	r3, #255	; 0xff
 80015e8:	f000 808f 	beq.w	800170a <checkCollisions+0x18a>
				patron[x].state = 2;
 80015ec:	494d      	ldr	r1, [pc, #308]	; (8001724 <checkCollisions+0x1a4>)
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	2202      	movs	r2, #2
 80015fc:	601a      	str	r2, [r3, #0]
				mug[tableTop[barRow][patron[x].xCoarse]].state = 2;		//Change state of captured mug
 80015fe:	4b4a      	ldr	r3, [pc, #296]	; (8001728 <checkCollisions+0x1a8>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4848      	ldr	r0, [pc, #288]	; (8001724 <checkCollisions+0x1a4>)
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	440b      	add	r3, r1
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4403      	add	r3, r0
 8001610:	3304      	adds	r3, #4
 8001612:	f993 3000 	ldrsb.w	r3, [r3]
 8001616:	4618      	mov	r0, r3
 8001618:	4944      	ldr	r1, [pc, #272]	; (800172c <checkCollisions+0x1ac>)
 800161a:	4613      	mov	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	4403      	add	r3, r0
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	4a41      	ldr	r2, [pc, #260]	; (8001730 <checkCollisions+0x1b0>)
 800162c:	460b      	mov	r3, r1
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	440b      	add	r3, r1
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	2202      	movs	r2, #2
 8001638:	601a      	str	r2, [r3, #0]
				patron[x].owned = tableTop[barRow][patron[x].xCoarse];	//Assign this mug to this patron
 800163a:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <checkCollisions+0x1a8>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4839      	ldr	r0, [pc, #228]	; (8001724 <checkCollisions+0x1a4>)
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	460b      	mov	r3, r1
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	440b      	add	r3, r1
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4403      	add	r3, r0
 800164c:	3304      	adds	r3, #4
 800164e:	f993 3000 	ldrsb.w	r3, [r3]
 8001652:	4618      	mov	r0, r3
 8001654:	4935      	ldr	r1, [pc, #212]	; (800172c <checkCollisions+0x1ac>)
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	440b      	add	r3, r1
 8001660:	4403      	add	r3, r0
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b258      	sxtb	r0, r3
 8001666:	492f      	ldr	r1, [pc, #188]	; (8001724 <checkCollisions+0x1a4>)
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3306      	adds	r3, #6
 8001676:	4602      	mov	r2, r0
 8001678:	701a      	strb	r2, [r3, #0]
				patron[x].counter = 0;
 800167a:	492a      	ldr	r1, [pc, #168]	; (8001724 <checkCollisions+0x1a4>)
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	3307      	adds	r3, #7
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
				patron[x].speed = 2;
 800168e:	4925      	ldr	r1, [pc, #148]	; (8001724 <checkCollisions+0x1a4>)
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	3308      	adds	r3, #8
 800169e:	2202      	movs	r2, #2
 80016a0:	701a      	strb	r2, [r3, #0]
				score += 3;												//3 bucks for serving a beer
 80016a2:	4b24      	ldr	r3, [pc, #144]	; (8001734 <checkCollisions+0x1b4>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	3303      	adds	r3, #3
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	4b22      	ldr	r3, [pc, #136]	; (8001734 <checkCollisions+0x1b4>)
 80016ac:	801a      	strh	r2, [r3, #0]
				//TIP RANDO
				int divX = patron[x].xCoarse / 2.75;
 80016ae:	491d      	ldr	r1, [pc, #116]	; (8001724 <checkCollisions+0x1a4>)
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	3304      	adds	r3, #4
 80016be:	f993 3000 	ldrsb.w	r3, [r3]
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016ca:	eeb0 5b06 	vmov.f64	d5, #6	; 0x40300000  2.750
 80016ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016d2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80016d6:	ee17 3a90 	vmov	r3, s15
 80016da:	603b      	str	r3, [r7, #0]
				tips[barRow][divX] += 1;				//Leave a tip
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <checkCollisions+0x1a8>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4915      	ldr	r1, [pc, #84]	; (8001738 <checkCollisions+0x1b8>)
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	18ca      	adds	r2, r1, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	4413      	add	r3, r2
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <checkCollisions+0x1a8>)
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	3301      	adds	r3, #1
 80016f6:	b2d8      	uxtb	r0, r3
 80016f8:	490f      	ldr	r1, [pc, #60]	; (8001738 <checkCollisions+0x1b8>)
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	18ca      	adds	r2, r1, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	4413      	add	r3, r2
 8001706:	4602      	mov	r2, r0
 8001708:	701a      	strb	r2, [r3, #0]
	for (int x = 0 ; x < 36 ; x++) {
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3301      	adds	r3, #1
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b23      	cmp	r3, #35	; 0x23
 8001714:	f77f af3a 	ble.w	800158c <checkCollisions+0xc>
			}

		}
	}

}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	200000fc 	.word	0x200000fc
 8001728:	20000058 	.word	0x20000058
 800172c:	20000550 	.word	0x20000550
 8001730:	2000030c 	.word	0x2000030c
 8001734:	2000006a 	.word	0x2000006a
 8001738:	2000062c 	.word	0x2000062c

0800173c <drawPatrons>:

void drawPatrons() {
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0

	int moveFlag = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
	patronCounter++;
 8001746:	4ba6      	ldr	r3, [pc, #664]	; (80019e0 <drawPatrons+0x2a4>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4ba4      	ldr	r3, [pc, #656]	; (80019e0 <drawPatrons+0x2a4>)
 8001750:	701a      	strb	r2, [r3, #0]

	if (patronCounter == patronSpeed) {
 8001752:	4ba3      	ldr	r3, [pc, #652]	; (80019e0 <drawPatrons+0x2a4>)
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	4ba3      	ldr	r3, [pc, #652]	; (80019e4 <drawPatrons+0x2a8>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d104      	bne.n	8001768 <drawPatrons+0x2c>
		patronCounter = 0;
 800175e:	4ba0      	ldr	r3, [pc, #640]	; (80019e0 <drawPatrons+0x2a4>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
		moveFlag = 1;
 8001764:	2301      	movs	r3, #1
 8001766:	607b      	str	r3, [r7, #4]
	}

	for (int x = 0 ; x < 36 ; x++) {
 8001768:	2300      	movs	r3, #0
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	e130      	b.n	80019d0 <drawPatrons+0x294>

		if (patron[x].state) {
 800176e:	499e      	ldr	r1, [pc, #632]	; (80019e8 <drawPatrons+0x2ac>)
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8123 	beq.w	80019ca <drawPatrons+0x28e>

			barRow = patron[x].whichRow;
 8001784:	4998      	ldr	r1, [pc, #608]	; (80019e8 <drawPatrons+0x2ac>)
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	3305      	adds	r3, #5
 8001794:	f993 3000 	ldrsb.w	r3, [r3]
 8001798:	461a      	mov	r2, r3
 800179a:	4b94      	ldr	r3, [pc, #592]	; (80019ec <drawPatrons+0x2b0>)
 800179c:	601a      	str	r2, [r3, #0]

			switch(patron[x].state) {
 800179e:	4992      	ldr	r1, [pc, #584]	; (80019e8 <drawPatrons+0x2ac>)
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	4613      	mov	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d002      	beq.n	80017b8 <drawPatrons+0x7c>
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d053      	beq.n	800185e <drawPatrons+0x122>
 80017b6:	e108      	b.n	80019ca <drawPatrons+0x28e>

				case 1:
					fillSegment(patronGFX[patron[x].xCoarse], patronXpos[patron[x].xCoarse], 54);
 80017b8:	498b      	ldr	r1, [pc, #556]	; (80019e8 <drawPatrons+0x2ac>)
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	3304      	adds	r3, #4
 80017c8:	f993 3000 	ldrsb.w	r3, [r3]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b88      	ldr	r3, [pc, #544]	; (80019f0 <drawPatrons+0x2b4>)
 80017d0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80017d4:	4984      	ldr	r1, [pc, #528]	; (80019e8 <drawPatrons+0x2ac>)
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	4613      	mov	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	3304      	adds	r3, #4
 80017e4:	f993 3000 	ldrsb.w	r3, [r3]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b82      	ldr	r3, [pc, #520]	; (80019f4 <drawPatrons+0x2b8>)
 80017ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80017f0:	2236      	movs	r2, #54	; 0x36
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7ff f95a 	bl	8000aac <fillSegment>
					if (moveFlag) {
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80e2 	beq.w	80019c4 <drawPatrons+0x288>
						if (++patron[x].xCoarse == 12) {
 8001800:	4979      	ldr	r1, [pc, #484]	; (80019e8 <drawPatrons+0x2ac>)
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	3304      	adds	r3, #4
 8001810:	f993 3000 	ldrsb.w	r3, [r3]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	3301      	adds	r3, #1
 8001818:	b2db      	uxtb	r3, r3
 800181a:	b258      	sxtb	r0, r3
 800181c:	4972      	ldr	r1, [pc, #456]	; (80019e8 <drawPatrons+0x2ac>)
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	4613      	mov	r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	3304      	adds	r3, #4
 800182c:	4602      	mov	r2, r0
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	496d      	ldr	r1, [pc, #436]	; (80019e8 <drawPatrons+0x2ac>)
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	3304      	adds	r3, #4
 8001840:	f993 3000 	ldrsb.w	r3, [r3]
 8001844:	2b0c      	cmp	r3, #12
 8001846:	f040 80bd 	bne.w	80019c4 <drawPatrons+0x288>
							patron[x].state = 0;
 800184a:	4967      	ldr	r1, [pc, #412]	; (80019e8 <drawPatrons+0x2ac>)
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
						}
					}

				break;
 800185c:	e0b2      	b.n	80019c4 <drawPatrons+0x288>

				case 2:
					fillSegment(patronGFX[patron[x].xCoarse], patronXpos[patron[x].xCoarse], 54);
 800185e:	4962      	ldr	r1, [pc, #392]	; (80019e8 <drawPatrons+0x2ac>)
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	3304      	adds	r3, #4
 800186e:	f993 3000 	ldrsb.w	r3, [r3]
 8001872:	461a      	mov	r2, r3
 8001874:	4b5e      	ldr	r3, [pc, #376]	; (80019f0 <drawPatrons+0x2b4>)
 8001876:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800187a:	495b      	ldr	r1, [pc, #364]	; (80019e8 <drawPatrons+0x2ac>)
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	4613      	mov	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	3304      	adds	r3, #4
 800188a:	f993 3000 	ldrsb.w	r3, [r3]
 800188e:	461a      	mov	r2, r3
 8001890:	4b58      	ldr	r3, [pc, #352]	; (80019f4 <drawPatrons+0x2b8>)
 8001892:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001896:	2236      	movs	r2, #54	; 0x36
 8001898:	4619      	mov	r1, r3
 800189a:	f7ff f907 	bl	8000aac <fillSegment>

					if (++patron[x].counter == patron[x].speed) {
 800189e:	4952      	ldr	r1, [pc, #328]	; (80019e8 <drawPatrons+0x2ac>)
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	4613      	mov	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	3307      	adds	r3, #7
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	b2d8      	uxtb	r0, r3
 80018b4:	494c      	ldr	r1, [pc, #304]	; (80019e8 <drawPatrons+0x2ac>)
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	4613      	mov	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	3307      	adds	r3, #7
 80018c4:	4602      	mov	r2, r0
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	4947      	ldr	r1, [pc, #284]	; (80019e8 <drawPatrons+0x2ac>)
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	3307      	adds	r3, #7
 80018d8:	7819      	ldrb	r1, [r3, #0]
 80018da:	4843      	ldr	r0, [pc, #268]	; (80019e8 <drawPatrons+0x2ac>)
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	4613      	mov	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4403      	add	r3, r0
 80018e8:	3308      	adds	r3, #8
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4299      	cmp	r1, r3
 80018ee:	d16b      	bne.n	80019c8 <drawPatrons+0x28c>
						patron[x].counter = 0;
 80018f0:	493d      	ldr	r1, [pc, #244]	; (80019e8 <drawPatrons+0x2ac>)
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	4613      	mov	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4413      	add	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	3307      	adds	r3, #7
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
						if (--patron[x].xCoarse < 0) {
 8001904:	4938      	ldr	r1, [pc, #224]	; (80019e8 <drawPatrons+0x2ac>)
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	3304      	adds	r3, #4
 8001914:	f993 3000 	ldrsb.w	r3, [r3]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	b2db      	uxtb	r3, r3
 800191e:	b258      	sxtb	r0, r3
 8001920:	4931      	ldr	r1, [pc, #196]	; (80019e8 <drawPatrons+0x2ac>)
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	3304      	adds	r3, #4
 8001930:	4602      	mov	r2, r0
 8001932:	701a      	strb	r2, [r3, #0]
 8001934:	492c      	ldr	r1, [pc, #176]	; (80019e8 <drawPatrons+0x2ac>)
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	3304      	adds	r3, #4
 8001944:	f993 3000 	ldrsb.w	r3, [r3]
 8001948:	2b00      	cmp	r3, #0
 800194a:	da1c      	bge.n	8001986 <drawPatrons+0x24a>
							patron[x].state = 0;
 800194c:	4926      	ldr	r1, [pc, #152]	; (80019e8 <drawPatrons+0x2ac>)
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
							mug[patron[x].owned].state = 0;
 800195e:	4922      	ldr	r1, [pc, #136]	; (80019e8 <drawPatrons+0x2ac>)
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	3306      	adds	r3, #6
 800196e:	f993 3000 	ldrsb.w	r3, [r3]
 8001972:	4619      	mov	r1, r3
 8001974:	4a20      	ldr	r2, [pc, #128]	; (80019f8 <drawPatrons+0x2bc>)
 8001976:	460b      	mov	r3, r1
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	440b      	add	r3, r1
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
						}
						else {
							mug[patron[x].owned].xCoarse = patron[x].xCoarse;	//Mug moves with the patron
						}
					}
				break;
 8001984:	e020      	b.n	80019c8 <drawPatrons+0x28c>
							mug[patron[x].owned].xCoarse = patron[x].xCoarse;	//Mug moves with the patron
 8001986:	4918      	ldr	r1, [pc, #96]	; (80019e8 <drawPatrons+0x2ac>)
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	3306      	adds	r3, #6
 8001996:	f993 3000 	ldrsb.w	r3, [r3]
 800199a:	4618      	mov	r0, r3
 800199c:	4912      	ldr	r1, [pc, #72]	; (80019e8 <drawPatrons+0x2ac>)
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	3304      	adds	r3, #4
 80019ac:	f993 1000 	ldrsb.w	r1, [r3]
 80019b0:	4a11      	ldr	r2, [pc, #68]	; (80019f8 <drawPatrons+0x2bc>)
 80019b2:	4603      	mov	r3, r0
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4403      	add	r3, r0
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	3304      	adds	r3, #4
 80019be:	460a      	mov	r2, r1
 80019c0:	701a      	strb	r2, [r3, #0]
				break;
 80019c2:	e001      	b.n	80019c8 <drawPatrons+0x28c>
				break;
 80019c4:	bf00      	nop
 80019c6:	e000      	b.n	80019ca <drawPatrons+0x28e>
				break;
 80019c8:	bf00      	nop
	for (int x = 0 ; x < 36 ; x++) {
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	3301      	adds	r3, #1
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	2b23      	cmp	r3, #35	; 0x23
 80019d4:	f77f aecb 	ble.w	800176e <drawPatrons+0x32>

			}
		}
	}

}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000068 	.word	0x20000068
 80019e4:	20000008 	.word	0x20000008
 80019e8:	200000fc 	.word	0x200000fc
 80019ec:	20000058 	.word	0x20000058
 80019f0:	2000051c 	.word	0x2000051c
 80019f4:	2000000c 	.word	0x2000000c
 80019f8:	2000030c 	.word	0x2000030c

080019fc <spawnPatron>:

void spawnPatron() {
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0

	int spawnRow = rando & 0xFF;			//Chop down into 255-0
 8001a02:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <spawnPatron+0x90>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	603b      	str	r3, [r7, #0]

	spawnRow /= 86;							//Divide down to 0-2.96
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	4a20      	ldr	r2, [pc, #128]	; (8001a90 <spawnPatron+0x94>)
 8001a0e:	fb82 1203 	smull	r1, r2, r2, r3
 8001a12:	1112      	asrs	r2, r2, #4
 8001a14:	17db      	asrs	r3, r3, #31
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	603b      	str	r3, [r7, #0]

	for (int x = 0 ; x < 36 ; x++) {			//Find next available mug to spawn
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	e02c      	b.n	8001a7a <spawnPatron+0x7e>

		if (!patron[x].state) {
 8001a20:	491c      	ldr	r1, [pc, #112]	; (8001a94 <spawnPatron+0x98>)
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d11f      	bne.n	8001a74 <spawnPatron+0x78>

			patron[x].state = 1;
 8001a34:	4917      	ldr	r1, [pc, #92]	; (8001a94 <spawnPatron+0x98>)
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]
			patron[x].xCoarse = 0;
 8001a46:	4913      	ldr	r1, [pc, #76]	; (8001a94 <spawnPatron+0x98>)
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	3304      	adds	r3, #4
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
			patron[x].whichRow = spawnRow;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b258      	sxtb	r0, r3
 8001a5e:	490d      	ldr	r1, [pc, #52]	; (8001a94 <spawnPatron+0x98>)
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3305      	adds	r3, #5
 8001a6e:	4602      	mov	r2, r0
 8001a70:	701a      	strb	r2, [r3, #0]
			return;
 8001a72:	e005      	b.n	8001a80 <spawnPatron+0x84>
	for (int x = 0 ; x < 36 ; x++) {			//Find next available mug to spawn
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3301      	adds	r3, #1
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b23      	cmp	r3, #35	; 0x23
 8001a7e:	ddcf      	ble.n	8001a20 <spawnPatron+0x24>
		}

	}

}
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000070 	.word	0x20000070
 8001a90:	2fa0be83 	.word	0x2fa0be83
 8001a94:	200000fc 	.word	0x200000fc

08001a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a9e:	f001 f97b 	bl	8002d98 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aa2:	f000 f9a9 	bl	8001df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aa6:	f000 fc77 	bl	8002398 <MX_GPIO_Init>
  MX_DMA_Init();
 8001aaa:	f000 fc55 	bl	8002358 <MX_DMA_Init>
  MX_LTDC_Init();
 8001aae:	f000 fa9b 	bl	8001fe8 <MX_LTDC_Init>
  MX_SPI2_Init();
 8001ab2:	f000 fbfb 	bl	80022ac <MX_SPI2_Init>
  MX_OCTOSPI1_Init();
 8001ab6:	f000 fb4b 	bl	8002150 <MX_OCTOSPI1_Init>
  MX_SAI1_Init();
 8001aba:	f000 fbc1 	bl	8002240 <MX_SAI1_Init>
  MX_RNG_Init();
 8001abe:	f000 fba9 	bl	8002214 <MX_RNG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001ac2:	f000 fa85 	bl	8001fd0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(&hspi2, &hltdc);
 8001ac6:	49a7      	ldr	r1, [pc, #668]	; (8001d64 <main+0x2cc>)
 8001ac8:	48a7      	ldr	r0, [pc, #668]	; (8001d68 <main+0x2d0>)
 8001aca:	f7fe fd75 	bl	80005b8 <lcd_init>

  memset(framebufferBG, 0x00, 320*240*4);
 8001ace:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	48a5      	ldr	r0, [pc, #660]	; (8001d6c <main+0x2d4>)
 8001ad6:	f009 fdcd 	bl	800b674 <memset>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  flash_memory_map(&hospi1);
 8001ada:	48a5      	ldr	r0, [pc, #660]	; (8001d70 <main+0x2d8>)
 8001adc:	f7fe fc98 	bl	8000410 <flash_memory_map>

  // Sanity check, sometimes this is triggered
  uint32_t add = 0x90000000;
 8001ae0:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8001ae4:	60fb      	str	r3, [r7, #12]
  uint32_t* ptr = (uint32_t*)add;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	60bb      	str	r3, [r7, #8]
  if(*ptr == 0x88888888) {
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 8001af2:	d101      	bne.n	8001af8 <main+0x60>
    Error_Handler();
 8001af4:	f000 fd32 	bl	800255c <Error_Handler>
  }

  // Create a continuous square wave and loop it using DMA in circular mode
  for (uint32_t i = 0; i < sizeof(audiobuffer) / sizeof(audiobuffer[0]); i++) {
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
 8001afc:	e016      	b.n	8001b2c <main+0x94>
    audiobuffer[i] = (i % (48000 / 500)) > 48 ? 200 : -200;
 8001afe:	69f9      	ldr	r1, [r7, #28]
 8001b00:	4b9c      	ldr	r3, [pc, #624]	; (8001d74 <main+0x2dc>)
 8001b02:	fba3 2301 	umull	r2, r3, r3, r1
 8001b06:	099a      	lsrs	r2, r3, #6
 8001b08:	4613      	mov	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	015b      	lsls	r3, r3, #5
 8001b10:	1aca      	subs	r2, r1, r3
 8001b12:	2a30      	cmp	r2, #48	; 0x30
 8001b14:	d901      	bls.n	8001b1a <main+0x82>
 8001b16:	21c8      	movs	r1, #200	; 0xc8
 8001b18:	e001      	b.n	8001b1e <main+0x86>
 8001b1a:	f64f 7138 	movw	r1, #65336	; 0xff38
 8001b1e:	4a96      	ldr	r2, [pc, #600]	; (8001d78 <main+0x2e0>)
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (uint32_t i = 0; i < sizeof(audiobuffer) / sizeof(audiobuffer[0]); i++) {
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d9e3      	bls.n	8001afe <main+0x66>
  }
  //HAL_SAI_Transmit_DMA(&hsai_BlockA1, audiobuffer, sizeof(audiobuffer) / sizeof(audiobuffer[0]));

  fillRLEshadow(&scoregfx, 2, 2, 0, 0);
 8001b36:	2300      	movs	r3, #0
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	2102      	movs	r1, #2
 8001b40:	488e      	ldr	r0, [pc, #568]	; (8001d7c <main+0x2e4>)
 8001b42:	f7fe ff73 	bl	8000a2c <fillRLEshadow>
  fillRLEshadow(&stage, 121, 0, 0, 0);
 8001b46:	2300      	movs	r3, #0
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2179      	movs	r1, #121	; 0x79
 8001b50:	488b      	ldr	r0, [pc, #556]	; (8001d80 <main+0x2e8>)
 8001b52:	f7fe ff6b 	bl	8000a2c <fillRLEshadow>
  fillRLEshadow(&tiptext, 233, 1, 0, 0);
 8001b56:	2300      	movs	r3, #0
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	21e9      	movs	r1, #233	; 0xe9
 8001b60:	4888      	ldr	r0, [pc, #544]	; (8001d84 <main+0x2ec>)
 8001b62:	f7fe ff63 	bl	8000a2c <fillRLEshadow>
  fillRLEshadow(&tipgfx, 276, 10, 0, 0);
 8001b66:	2300      	movs	r3, #0
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	220a      	movs	r2, #10
 8001b6e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001b72:	4885      	ldr	r0, [pc, #532]	; (8001d88 <main+0x2f0>)
 8001b74:	f7fe ff5a 	bl	8000a2c <fillRLEshadow>

  for (int x = 0 ; x < 320 ; x += 24) {
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	e00a      	b.n	8001b94 <main+0xfc>
	  fillRLE(&wall, x, 37, 0, 0);
 8001b7e:	2300      	movs	r3, #0
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	2300      	movs	r3, #0
 8001b84:	2225      	movs	r2, #37	; 0x25
 8001b86:	69b9      	ldr	r1, [r7, #24]
 8001b88:	4880      	ldr	r0, [pc, #512]	; (8001d8c <main+0x2f4>)
 8001b8a:	f7fe fe8b 	bl	80008a4 <fillRLE>
  for (int x = 0 ; x < 320 ; x += 24) {
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	3318      	adds	r3, #24
 8001b92:	61bb      	str	r3, [r7, #24]
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001b9a:	dbf0      	blt.n	8001b7e <main+0xe6>
  }

  fillRLEshadow(&table, 0, 51, 0, 0);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2233      	movs	r2, #51	; 0x33
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	487a      	ldr	r0, [pc, #488]	; (8001d90 <main+0x2f8>)
 8001ba8:	f7fe ff40 	bl	8000a2c <fillRLEshadow>
  fillRLEshadow(&table, -11, 114, 0, 0);
 8001bac:	2300      	movs	r3, #0
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	2272      	movs	r2, #114	; 0x72
 8001bb4:	f06f 010a 	mvn.w	r1, #10
 8001bb8:	4875      	ldr	r0, [pc, #468]	; (8001d90 <main+0x2f8>)
 8001bba:	f7fe ff37 	bl	8000a2c <fillRLEshadow>
  fillRLEshadow(&table, -22, 177, 0, 0);
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	22b1      	movs	r2, #177	; 0xb1
 8001bc6:	f06f 0115 	mvn.w	r1, #21
 8001bca:	4871      	ldr	r0, [pc, #452]	; (8001d90 <main+0x2f8>)
 8001bcc:	f7fe ff2e 	bl	8000a2c <fillRLEshadow>

  fillRLEshadow(&keg, 304, 53, 0, 0);
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2235      	movs	r2, #53	; 0x35
 8001bd8:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001bdc:	486d      	ldr	r0, [pc, #436]	; (8001d94 <main+0x2fc>)
 8001bde:	f7fe ff25 	bl	8000a2c <fillRLEshadow>
  fillRLEshadow(&keg, 294, 116, 0, 0);
 8001be2:	2300      	movs	r3, #0
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2300      	movs	r3, #0
 8001be8:	2274      	movs	r2, #116	; 0x74
 8001bea:	f44f 7193 	mov.w	r1, #294	; 0x126
 8001bee:	4869      	ldr	r0, [pc, #420]	; (8001d94 <main+0x2fc>)
 8001bf0:	f7fe ff1c 	bl	8000a2c <fillRLEshadow>
  fillRLEshadow(&keg, 284, 179, 0, 0);
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	22b3      	movs	r2, #179	; 0xb3
 8001bfc:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8001c00:	4864      	ldr	r0, [pc, #400]	; (8001d94 <main+0x2fc>)
 8001c02:	f7fe ff13 	bl	8000a2c <fillRLEshadow>


  for (int x = 0 ; x < 76800 ; x++) {				//Random noise on BG layer
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	e013      	b.n	8001c34 <main+0x19c>

	  HAL_RNG_GenerateRandomNumber(&hrng, &rando);
 8001c0c:	4962      	ldr	r1, [pc, #392]	; (8001d98 <main+0x300>)
 8001c0e:	4863      	ldr	r0, [pc, #396]	; (8001d9c <main+0x304>)
 8001c10:	f008 fab6 	bl	800a180 <HAL_RNG_GenerateRandomNumber>
	  framebufferBG[x] |= (rando & 0x0101F1F1F);
 8001c14:	4a55      	ldr	r2, [pc, #340]	; (8001d6c <main+0x2d4>)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c1c:	4b5e      	ldr	r3, [pc, #376]	; (8001d98 <main+0x300>)
 8001c1e:	6819      	ldr	r1, [r3, #0]
 8001c20:	4b5f      	ldr	r3, [pc, #380]	; (8001da0 <main+0x308>)
 8001c22:	400b      	ands	r3, r1
 8001c24:	431a      	orrs	r2, r3
 8001c26:	4951      	ldr	r1, [pc, #324]	; (8001d6c <main+0x2d4>)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int x = 0 ; x < 76800 ; x++) {				//Random noise on BG layer
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8001c3a:	dbe7      	blt.n	8001c0c <main+0x174>

  }

  patronGFX[0] = &patron0;
 8001c3c:	4b59      	ldr	r3, [pc, #356]	; (8001da4 <main+0x30c>)
 8001c3e:	4a5a      	ldr	r2, [pc, #360]	; (8001da8 <main+0x310>)
 8001c40:	601a      	str	r2, [r3, #0]
  patronGFX[1] = &patron1;
 8001c42:	4b58      	ldr	r3, [pc, #352]	; (8001da4 <main+0x30c>)
 8001c44:	4a59      	ldr	r2, [pc, #356]	; (8001dac <main+0x314>)
 8001c46:	605a      	str	r2, [r3, #4]
  patronGFX[2] = &patron2;
 8001c48:	4b56      	ldr	r3, [pc, #344]	; (8001da4 <main+0x30c>)
 8001c4a:	4a59      	ldr	r2, [pc, #356]	; (8001db0 <main+0x318>)
 8001c4c:	609a      	str	r2, [r3, #8]
  patronGFX[3] = &patron3;
 8001c4e:	4b55      	ldr	r3, [pc, #340]	; (8001da4 <main+0x30c>)
 8001c50:	4a58      	ldr	r2, [pc, #352]	; (8001db4 <main+0x31c>)
 8001c52:	60da      	str	r2, [r3, #12]
  patronGFX[4] = &patron4;
 8001c54:	4b53      	ldr	r3, [pc, #332]	; (8001da4 <main+0x30c>)
 8001c56:	4a58      	ldr	r2, [pc, #352]	; (8001db8 <main+0x320>)
 8001c58:	611a      	str	r2, [r3, #16]
  patronGFX[5] = &patron5;
 8001c5a:	4b52      	ldr	r3, [pc, #328]	; (8001da4 <main+0x30c>)
 8001c5c:	4a57      	ldr	r2, [pc, #348]	; (8001dbc <main+0x324>)
 8001c5e:	615a      	str	r2, [r3, #20]
  patronGFX[6] = &patron6;
 8001c60:	4b50      	ldr	r3, [pc, #320]	; (8001da4 <main+0x30c>)
 8001c62:	4a57      	ldr	r2, [pc, #348]	; (8001dc0 <main+0x328>)
 8001c64:	619a      	str	r2, [r3, #24]
  patronGFX[7] = &patron7;
 8001c66:	4b4f      	ldr	r3, [pc, #316]	; (8001da4 <main+0x30c>)
 8001c68:	4a56      	ldr	r2, [pc, #344]	; (8001dc4 <main+0x32c>)
 8001c6a:	61da      	str	r2, [r3, #28]
  patronGFX[8] = &patron8;
 8001c6c:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <main+0x30c>)
 8001c6e:	4a56      	ldr	r2, [pc, #344]	; (8001dc8 <main+0x330>)
 8001c70:	621a      	str	r2, [r3, #32]
  patronGFX[9] = &patron9;
 8001c72:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <main+0x30c>)
 8001c74:	4a55      	ldr	r2, [pc, #340]	; (8001dcc <main+0x334>)
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24
  patronGFX[10] = &patron10;
 8001c78:	4b4a      	ldr	r3, [pc, #296]	; (8001da4 <main+0x30c>)
 8001c7a:	4a55      	ldr	r2, [pc, #340]	; (8001dd0 <main+0x338>)
 8001c7c:	629a      	str	r2, [r3, #40]	; 0x28
  patronGFX[11] = &patron11;
 8001c7e:	4b49      	ldr	r3, [pc, #292]	; (8001da4 <main+0x30c>)
 8001c80:	4a54      	ldr	r2, [pc, #336]	; (8001dd4 <main+0x33c>)
 8001c82:	62da      	str	r2, [r3, #44]	; 0x2c
  patronGFX[12] = &patronPunch;
 8001c84:	4b47      	ldr	r3, [pc, #284]	; (8001da4 <main+0x30c>)
 8001c86:	4a54      	ldr	r2, [pc, #336]	; (8001dd8 <main+0x340>)
 8001c88:	631a      	str	r2, [r3, #48]	; 0x30
  */


  while(1) {

	 HAL_RNG_GenerateRandomNumber(&hrng, &rando);
 8001c8a:	4943      	ldr	r1, [pc, #268]	; (8001d98 <main+0x300>)
 8001c8c:	4843      	ldr	r0, [pc, #268]	; (8001d9c <main+0x304>)
 8001c8e:	f008 fa77 	bl	800a180 <HAL_RNG_GenerateRandomNumber>

	 uint32_t nextFrame = HAL_GetTick() + 20;			//50 FPS
 8001c92:	f001 f907 	bl	8002ea4 <HAL_GetTick>
 8001c96:	4603      	mov	r3, r0
 8001c98:	3314      	adds	r3, #20
 8001c9a:	607b      	str	r3, [r7, #4]

	//START DRAW THE FRAME ----- "buffer" is which buffer we are drawing to this frame

	if (buffer) {										//Clear the next draw buffer
 8001c9c:	4b4f      	ldr	r3, [pc, #316]	; (8001ddc <main+0x344>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <main+0x21a>
		memset(framebufferSEG1, 0x00, 320*240*2);		//Clear segment buffer 1
 8001ca4:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 8001ca8:	2100      	movs	r1, #0
 8001caa:	484d      	ldr	r0, [pc, #308]	; (8001de0 <main+0x348>)
 8001cac:	f009 fce2 	bl	800b674 <memset>
 8001cb0:	e005      	b.n	8001cbe <main+0x226>
	}
	else {
		memset(framebufferSEG0, 0x00, 320*240*2);		//Clear segment buffer 0
 8001cb2:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	484a      	ldr	r0, [pc, #296]	; (8001de4 <main+0x34c>)
 8001cba:	f009 fcdb 	bl	800b674 <memset>
	}

	//DRAW THE SEGMENTS HERE

	for (int x = 0 ; x < 3 ; x++) {
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	e010      	b.n	8001ce6 <main+0x24e>
		barRow = x;
 8001cc4:	4a48      	ldr	r2, [pc, #288]	; (8001de8 <main+0x350>)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	6013      	str	r3, [r2, #0]
		drawRect(310, 48, 312, 60, 0x8000);			//Draw the 3 tapper levers (we erase this is keep is pulling one)
 8001cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	233c      	movs	r3, #60	; 0x3c
 8001cd2:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001cd6:	2130      	movs	r1, #48	; 0x30
 8001cd8:	f44f 709b 	mov.w	r0, #310	; 0x136
 8001cdc:	f7fe ffa4 	bl	8000c28 <drawRect>
	for (int x = 0 ; x < 3 ; x++) {
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	ddeb      	ble.n	8001cc4 <main+0x22c>
	}


	barRow = keepRow;
 8001cec:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <main+0x354>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a3d      	ldr	r2, [pc, #244]	; (8001de8 <main+0x350>)
 8001cf2:	6013      	str	r3, [r2, #0]
	drawBarkeep();
 8001cf4:	f7ff f8bc 	bl	8000e70 <drawBarkeep>

	drawMugs();
 8001cf8:	f7ff fafa 	bl	80012f0 <drawMugs>
	checkCollisions();
 8001cfc:	f7ff fc40 	bl	8001580 <checkCollisions>
	drawPatrons();
 8001d00:	f7ff fd1c 	bl	800173c <drawPatrons>
	checkCollisions();
 8001d04:	f7ff fc3c 	bl	8001580 <checkCollisions>

	drawTips();
 8001d08:	f7ff fc02 	bl	8001510 <drawTips>

	barRow = 0;
 8001d0c:	4b36      	ldr	r3, [pc, #216]	; (8001de8 <main+0x350>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
	decimal(score, 10, 13);								//Draw score
 8001d12:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <main+0x358>)
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	220d      	movs	r2, #13
 8001d18:	210a      	movs	r1, #10
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fff0 	bl	8000d00 <decimal>
	decimal(tipsTotal, 245, 13);								//Draw tips
 8001d20:	4b34      	ldr	r3, [pc, #208]	; (8001df4 <main+0x35c>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	220d      	movs	r2, #13
 8001d28:	21f5      	movs	r1, #245	; 0xf5
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe ffe8 	bl	8000d00 <decimal>

	//SWITCH BUFFERS ONCE DRAWING IS DONE

	bufferSwap(&hltdc, buffer);							//Swap to new display buffer
 8001d30:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <main+0x344>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4619      	mov	r1, r3
 8001d36:	480b      	ldr	r0, [pc, #44]	; (8001d64 <main+0x2cc>)
 8001d38:	f7fe fc20 	bl	800057c <bufferSwap>

	if (buffer) {										//Swap the buffer counter
 8001d3c:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <main+0x344>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <main+0x2b4>
		buffer = 0;
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <main+0x344>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	e002      	b.n	8001d52 <main+0x2ba>
	}
	else {
		buffer = 1;
 8001d4c:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <main+0x344>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
	}

	while (HAL_GetTick() < nextFrame) {}				//Wait for next frame (50 FPS, 20ms gap)
 8001d52:	bf00      	nop
 8001d54:	f001 f8a6 	bl	8002ea4 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d8f9      	bhi.n	8001d54 <main+0x2bc>
  while(1) {
 8001d60:	e793      	b.n	8001c8a <main+0x1f2>
 8001d62:	bf00      	nop
 8001d64:	200003fc 	.word	0x200003fc
 8001d68:	20000074 	.word	0x20000074
 8001d6c:	24000000 	.word	0x24000000
 8001d70:	200002ac 	.word	0x200002ac
 8001d74:	aaaaaaab 	.word	0xaaaaaaab
 8001d78:	24096000 	.word	0x24096000
 8001d7c:	0800b6c4 	.word	0x0800b6c4
 8001d80:	0800b934 	.word	0x0800b934
 8001d84:	0800c4f4 	.word	0x0800c4f4
 8001d88:	0800c338 	.word	0x0800c338
 8001d8c:	0800c648 	.word	0x0800c648
 8001d90:	0800c684 	.word	0x0800c684
 8001d94:	0800ceb8 	.word	0x0800ceb8
 8001d98:	20000070 	.word	0x20000070
 8001d9c:	20000578 	.word	0x20000578
 8001da0:	101f1f1f 	.word	0x101f1f1f
 8001da4:	2000051c 	.word	0x2000051c
 8001da8:	0800d7b4 	.word	0x0800d7b4
 8001dac:	0800d80c 	.word	0x0800d80c
 8001db0:	0800d850 	.word	0x0800d850
 8001db4:	0800d87c 	.word	0x0800d87c
 8001db8:	0800d8c0 	.word	0x0800d8c0
 8001dbc:	0800d904 	.word	0x0800d904
 8001dc0:	0800d93c 	.word	0x0800d93c
 8001dc4:	0800d980 	.word	0x0800d980
 8001dc8:	0800d9a8 	.word	0x0800d9a8
 8001dcc:	0800d9ec 	.word	0x0800d9ec
 8001dd0:	0800da30 	.word	0x0800da30
 8001dd4:	0800da74 	.word	0x0800da74
 8001dd8:	0800dab8 	.word	0x0800dab8
 8001ddc:	20000054 	.word	0x20000054
 8001de0:	24070800 	.word	0x24070800
 8001de4:	2404b000 	.word	0x2404b000
 8001de8:	20000058 	.word	0x20000058
 8001dec:	2000005c 	.word	0x2000005c
 8001df0:	2000006a 	.word	0x2000006a
 8001df4:	20000069 	.word	0x20000069

08001df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b0ca      	sub	sp, #296	; 0x128
 8001dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dfe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e02:	224c      	movs	r2, #76	; 0x4c
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f009 fc34 	bl	800b674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e0c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e10:	2220      	movs	r2, #32
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f009 fc2d 	bl	800b674 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	23b8      	movs	r3, #184	; 0xb8
 8001e20:	461a      	mov	r2, r3
 8001e22:	2100      	movs	r1, #0
 8001e24:	f009 fc26 	bl	800b674 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e28:	2002      	movs	r0, #2
 8001e2a:	f005 fb61 	bl	80074f0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001e2e:	463b      	mov	r3, r7
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	4b63      	ldr	r3, [pc, #396]	; (8001fc4 <SystemClock_Config+0x1cc>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a62      	ldr	r2, [pc, #392]	; (8001fc4 <SystemClock_Config+0x1cc>)
 8001e3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	4b60      	ldr	r3, [pc, #384]	; (8001fc4 <SystemClock_Config+0x1cc>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001e48:	463b      	mov	r3, r7
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	463b      	mov	r3, r7
 8001e4e:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e50:	bf00      	nop
 8001e52:	4b5c      	ldr	r3, [pc, #368]	; (8001fc4 <SystemClock_Config+0x1cc>)
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e5e:	d1f8      	bne.n	8001e52 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001e60:	4b59      	ldr	r3, [pc, #356]	; (8001fc8 <SystemClock_Config+0x1d0>)
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <SystemClock_Config+0x1d0>)
 8001e66:	f023 0303 	bic.w	r3, r3, #3
 8001e6a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001e6c:	2322      	movs	r3, #34	; 0x22
 8001e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001e72:	2301      	movs	r3, #1
 8001e74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e78:	2340      	movs	r3, #64	; 0x40
 8001e7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e84:	2302      	movs	r3, #2
 8001e86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e90:	2310      	movs	r3, #16
 8001e92:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLN = 140;
 8001e96:	238c      	movs	r3, #140	; 0x8c
 8001e98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001eae:	2308      	movs	r3, #8
 8001eb0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f005 fb4d 	bl	8007564 <HAL_RCC_OscConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001ed0:	f000 fb44 	bl	800255c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed4:	233f      	movs	r3, #63	; 0x3f
 8001ed6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eda:	2303      	movs	r3, #3
 8001edc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001eec:	2340      	movs	r3, #64	; 0x40
 8001eee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ef2:	2340      	movs	r3, #64	; 0x40
 8001ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001efc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001f00:	2340      	movs	r3, #64	; 0x40
 8001f02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001f06:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f0a:	2107      	movs	r1, #7
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f005 ff11 	bl	8007d34 <HAL_RCC_ClockConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <SystemClock_Config+0x124>
  {
    Error_Handler();
 8001f18:	f000 fb20 	bl	800255c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RNG
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	4a2b      	ldr	r2, [pc, #172]	; (8001fcc <SystemClock_Config+0x1d4>)
 8001f20:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_OSPI|RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2219      	movs	r2, #25
 8001f26:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	22c0      	movs	r2, #192	; 0xc0
 8001f2c:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	2205      	movs	r2, #5
 8001f32:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	2202      	movs	r2, #2
 8001f38:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 5;
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	2205      	movs	r2, #5
 8001f3e:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	2240      	movs	r2, #64	; 0x40
 8001f44:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	2200      	movs	r2, #0
 8001f4a:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	2200      	movs	r2, #0
 8001f50:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.PLL3.PLL3M = 4;
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	2204      	movs	r2, #4
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 9;
 8001f58:	1d3b      	adds	r3, r7, #4
 8001f5a:	2209      	movs	r2, #9
 8001f5c:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	2202      	movs	r2, #2
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	2202      	movs	r2, #2
 8001f68:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 24;
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	2218      	movs	r2, #24
 8001f6e:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001f76:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	2200      	movs	r2, #0
 8001f82:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_CLKP;
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2230      	movs	r2, #48	; 0x30
 8001f88:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	651a      	str	r2, [r3, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	2201      	movs	r2, #1
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f9c:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f006 fa1b 	bl	80083e4 <HAL_RCCEx_PeriphCLKConfig>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <SystemClock_Config+0x1c0>
  {
    Error_Handler();
 8001fb4:	f000 fad2 	bl	800255c <Error_Handler>
  }
}
 8001fb8:	bf00      	nop
 8001fba:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	58024800 	.word	0x58024800
 8001fc8:	58024400 	.word	0x58024400
 8001fcc:	a2021100 	.word	0xa2021100

08001fd0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* OCTOSPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	205c      	movs	r0, #92	; 0x5c
 8001fda:	f001 f86c 	bl	80030b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8001fde:	205c      	movs	r0, #92	; 0x5c
 8001fe0:	f001 f883 	bl	80030ea <HAL_NVIC_EnableIRQ>
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b09a      	sub	sp, #104	; 0x68
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001fee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ff2:	2234      	movs	r2, #52	; 0x34
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f009 fb3c 	bl	800b674 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	2234      	movs	r2, #52	; 0x34
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f009 fb36 	bl	800b674 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002008:	4b4f      	ldr	r3, [pc, #316]	; (8002148 <MX_LTDC_Init+0x160>)
 800200a:	4a50      	ldr	r2, [pc, #320]	; (800214c <MX_LTDC_Init+0x164>)
 800200c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800200e:	4b4e      	ldr	r3, [pc, #312]	; (8002148 <MX_LTDC_Init+0x160>)
 8002010:	2200      	movs	r2, #0
 8002012:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002014:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <MX_LTDC_Init+0x160>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800201a:	4b4b      	ldr	r3, [pc, #300]	; (8002148 <MX_LTDC_Init+0x160>)
 800201c:	2200      	movs	r2, #0
 800201e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IIPC;
 8002020:	4b49      	ldr	r3, [pc, #292]	; (8002148 <MX_LTDC_Init+0x160>)
 8002022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002026:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8002028:	4b47      	ldr	r3, [pc, #284]	; (8002148 <MX_LTDC_Init+0x160>)
 800202a:	2209      	movs	r2, #9
 800202c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800202e:	4b46      	ldr	r3, [pc, #280]	; (8002148 <MX_LTDC_Init+0x160>)
 8002030:	2201      	movs	r2, #1
 8002032:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 60;
 8002034:	4b44      	ldr	r3, [pc, #272]	; (8002148 <MX_LTDC_Init+0x160>)
 8002036:	223c      	movs	r2, #60	; 0x3c
 8002038:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 7;
 800203a:	4b43      	ldr	r3, [pc, #268]	; (8002148 <MX_LTDC_Init+0x160>)
 800203c:	2207      	movs	r2, #7
 800203e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 380;
 8002040:	4b41      	ldr	r3, [pc, #260]	; (8002148 <MX_LTDC_Init+0x160>)
 8002042:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002046:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 247;
 8002048:	4b3f      	ldr	r3, [pc, #252]	; (8002148 <MX_LTDC_Init+0x160>)
 800204a:	22f7      	movs	r2, #247	; 0xf7
 800204c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 392;
 800204e:	4b3e      	ldr	r3, [pc, #248]	; (8002148 <MX_LTDC_Init+0x160>)
 8002050:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8002054:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 255;
 8002056:	4b3c      	ldr	r3, [pc, #240]	; (8002148 <MX_LTDC_Init+0x160>)
 8002058:	22ff      	movs	r2, #255	; 0xff
 800205a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 120;
 800205c:	4b3a      	ldr	r3, [pc, #232]	; (8002148 <MX_LTDC_Init+0x160>)
 800205e:	2278      	movs	r2, #120	; 0x78
 8002060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 128;
 8002064:	4b38      	ldr	r3, [pc, #224]	; (8002148 <MX_LTDC_Init+0x160>)
 8002066:	2280      	movs	r2, #128	; 0x80
 8002068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 128;
 800206c:	4b36      	ldr	r3, [pc, #216]	; (8002148 <MX_LTDC_Init+0x160>)
 800206e:	2280      	movs	r2, #128	; 0x80
 8002070:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002074:	4834      	ldr	r0, [pc, #208]	; (8002148 <MX_LTDC_Init+0x160>)
 8002076:	f003 fcc5 	bl	8005a04 <HAL_LTDC_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_LTDC_Init+0x9c>
  {
    Error_Handler();
 8002080:	f000 fa6c 	bl	800255c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 320;
 8002088:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800208c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 240;
 8002092:	23f0      	movs	r3, #240	; 0xf0
 8002094:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888; //LTDC_PIXEL_FORMAT_ARGB1555; //LTDC_PIXEL_FORMAT_RGB565;
 8002096:	2300      	movs	r3, #0
 8002098:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 230;				//Solid pixel transparency
 800209a:	23e6      	movs	r3, #230	; 0xe6
 800209c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80020a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020a6:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR1_PAxCA;
 80020a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020ac:	657b      	str	r3, [r7, #84]	; 0x54
  //pLayerCfg.FBStartAdress = 0x24000000;
  pLayerCfg.ImageWidth = 320;
 80020ae:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80020b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 240;
 80020b4:	23f0      	movs	r3, #240	; 0xf0
 80020b6:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80020ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020ce:	2200      	movs	r2, #0
 80020d0:	4619      	mov	r1, r3
 80020d2:	481d      	ldr	r0, [pc, #116]	; (8002148 <MX_LTDC_Init+0x160>)
 80020d4:	f003 fd66 	bl	8005ba4 <HAL_LTDC_ConfigLayer>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80020de:	f000 fa3d 	bl	800255c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 320;
 80020e6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80020ea:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 240;
 80020f0:	23f0      	movs	r3, #240	; 0xf0
 80020f2:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB1555;
 80020f4:	2303      	movs	r3, #3
 80020f6:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 170;
 80020f8:	23aa      	movs	r3, #170	; 0xaa
 80020fa:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002100:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002104:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002106:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800210a:	623b      	str	r3, [r7, #32]
  //pLayerCfg1.FBStartAdress = 0x24000000;
  pLayerCfg1.ImageWidth = 320;
 800210c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 240;
 8002112:	23f0      	movs	r3, #240	; 0xf0
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002128:	463b      	mov	r3, r7
 800212a:	2201      	movs	r2, #1
 800212c:	4619      	mov	r1, r3
 800212e:	4806      	ldr	r0, [pc, #24]	; (8002148 <MX_LTDC_Init+0x160>)
 8002130:	f003 fd38 	bl	8005ba4 <HAL_LTDC_ConfigLayer>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 800213a:	f000 fa0f 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800213e:	bf00      	nop
 8002140:	3768      	adds	r7, #104	; 0x68
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200003fc 	.word	0x200003fc
 800214c:	50001000 	.word	0x50001000

08002150 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8002156:	463b      	mov	r3, r7
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
 8002164:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8002166:	4b29      	ldr	r3, [pc, #164]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 8002168:	4a29      	ldr	r2, [pc, #164]	; (8002210 <MX_OCTOSPI1_Init+0xc0>)
 800216a:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 800216c:	4b27      	ldr	r3, [pc, #156]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 800216e:	2204      	movs	r2, #4
 8002170:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8002172:	4b26      	ldr	r3, [pc, #152]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8002178:	4b24      	ldr	r3, [pc, #144]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 800217a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800217e:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 20;
 8002180:	4b22      	ldr	r3, [pc, #136]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 8002182:	2214      	movs	r2, #20
 8002184:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 8002188:	2202      	movs	r2, #2
 800218a:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800218c:	4b1f      	ldr	r3, [pc, #124]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 800218e:	2200      	movs	r2, #0
 8002190:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8002192:	4b1e      	ldr	r3, [pc, #120]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 8002194:	2200      	movs	r2, #0
 8002196:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8002198:	4b1c      	ldr	r3, [pc, #112]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 800219a:	2200      	movs	r2, #0
 800219c:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 800219e:	4b1b      	ldr	r3, [pc, #108]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.ClkChipSelectHighTime = 0;
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 80021be:	2208      	movs	r2, #8
 80021c0:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.MaxTran = 0;
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi1.Init.Refresh = 0;
 80021c8:	4b10      	ldr	r3, [pc, #64]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80021ce:	480f      	ldr	r0, [pc, #60]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 80021d0:	f003 ff1e 	bl	8006010 <HAL_OSPI_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_OCTOSPI1_Init+0x8e>
  {
    Error_Handler();
 80021da:	f000 f9bf 	bl	800255c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80021de:	2301      	movs	r3, #1
 80021e0:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 80021e2:	2301      	movs	r3, #1
 80021e4:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80021e6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80021ea:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021ec:	463b      	mov	r3, r7
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4619      	mov	r1, r3
 80021f4:	4805      	ldr	r0, [pc, #20]	; (800220c <MX_OCTOSPI1_Init+0xbc>)
 80021f6:	f004 fa49 	bl	800668c <HAL_OSPIM_Config>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_OCTOSPI1_Init+0xb4>
  {
    Error_Handler();
 8002200:	f000 f9ac 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8002204:	bf00      	nop
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	200002ac 	.word	0x200002ac
 8002210:	52005000 	.word	0x52005000

08002214 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <MX_RNG_Init+0x24>)
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <MX_RNG_Init+0x28>)
 800221c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <MX_RNG_Init+0x24>)
 8002220:	2200      	movs	r2, #0
 8002222:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002224:	4804      	ldr	r0, [pc, #16]	; (8002238 <MX_RNG_Init+0x24>)
 8002226:	f007 ff15 	bl	800a054 <HAL_RNG_Init>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002230:	f000 f994 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000578 	.word	0x20000578
 800223c:	48021800 	.word	0x48021800

08002240 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002244:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <MX_SAI1_Init+0x64>)
 8002246:	4a18      	ldr	r2, [pc, #96]	; (80022a8 <MX_SAI1_Init+0x68>)
 8002248:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800224a:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <MX_SAI1_Init+0x64>)
 800224c:	2200      	movs	r2, #0
 800224e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <MX_SAI1_Init+0x64>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <MX_SAI1_Init+0x64>)
 8002258:	2200      	movs	r2, #0
 800225a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <MX_SAI1_Init+0x64>)
 800225e:	2200      	movs	r2, #0
 8002260:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <MX_SAI1_Init+0x64>)
 8002264:	2200      	movs	r2, #0
 8002266:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <MX_SAI1_Init+0x64>)
 800226a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800226e:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <MX_SAI1_Init+0x64>)
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <MX_SAI1_Init+0x64>)
 8002278:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800227c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <MX_SAI1_Init+0x64>)
 8002280:	2200      	movs	r2, #0
 8002282:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <MX_SAI1_Init+0x64>)
 8002286:	2200      	movs	r2, #0
 8002288:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800228a:	2302      	movs	r3, #2
 800228c:	2200      	movs	r2, #0
 800228e:	2100      	movs	r1, #0
 8002290:	4804      	ldr	r0, [pc, #16]	; (80022a4 <MX_SAI1_Init+0x64>)
 8002292:	f007 ffc5 	bl	800a220 <HAL_SAI_InitProtocol>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 800229c:	f000 f95e 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000590 	.word	0x20000590
 80022a8:	40015804 	.word	0x40015804

080022ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80022b0:	4b27      	ldr	r3, [pc, #156]	; (8002350 <MX_SPI2_Init+0xa4>)
 80022b2:	4a28      	ldr	r2, [pc, #160]	; (8002354 <MX_SPI2_Init+0xa8>)
 80022b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022b6:	4b26      	ldr	r3, [pc, #152]	; (8002350 <MX_SPI2_Init+0xa4>)
 80022b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80022bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80022be:	4b24      	ldr	r3, [pc, #144]	; (8002350 <MX_SPI2_Init+0xa4>)
 80022c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022c4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80022c6:	4b22      	ldr	r3, [pc, #136]	; (8002350 <MX_SPI2_Init+0xa4>)
 80022c8:	2207      	movs	r2, #7
 80022ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <MX_SPI2_Init+0xa4>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022d2:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <MX_SPI2_Init+0xa4>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80022d8:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <MX_SPI2_Init+0xa4>)
 80022da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <MX_SPI2_Init+0xa4>)
 80022e2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80022e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <MX_SPI2_Init+0xa4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022ee:	4b18      	ldr	r3, [pc, #96]	; (8002350 <MX_SPI2_Init+0xa4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022f4:	4b16      	ldr	r3, [pc, #88]	; (8002350 <MX_SPI2_Init+0xa4>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <MX_SPI2_Init+0xa4>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002300:	4b13      	ldr	r3, [pc, #76]	; (8002350 <MX_SPI2_Init+0xa4>)
 8002302:	2200      	movs	r2, #0
 8002304:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <MX_SPI2_Init+0xa4>)
 8002308:	2200      	movs	r2, #0
 800230a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800230c:	4b10      	ldr	r3, [pc, #64]	; (8002350 <MX_SPI2_Init+0xa4>)
 800230e:	2200      	movs	r2, #0
 8002310:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002312:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <MX_SPI2_Init+0xa4>)
 8002314:	2200      	movs	r2, #0
 8002316:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002318:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <MX_SPI2_Init+0xa4>)
 800231a:	2200      	movs	r2, #0
 800231c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <MX_SPI2_Init+0xa4>)
 8002320:	2200      	movs	r2, #0
 8002322:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <MX_SPI2_Init+0xa4>)
 8002326:	2200      	movs	r2, #0
 8002328:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <MX_SPI2_Init+0xa4>)
 800232c:	2200      	movs	r2, #0
 800232e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <MX_SPI2_Init+0xa4>)
 8002332:	2200      	movs	r2, #0
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <MX_SPI2_Init+0xa4>)
 8002338:	2200      	movs	r2, #0
 800233a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800233c:	4804      	ldr	r0, [pc, #16]	; (8002350 <MX_SPI2_Init+0xa4>)
 800233e:	f008 fda1 	bl	800ae84 <HAL_SPI_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002348:	f000 f908 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000074 	.word	0x20000074
 8002354:	40003800 	.word	0x40003800

08002358 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <MX_DMA_Init+0x3c>)
 8002360:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002364:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <MX_DMA_Init+0x3c>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <MX_DMA_Init+0x3c>)
 8002370:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	607b      	str	r3, [r7, #4]
 800237a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800237c:	2200      	movs	r2, #0
 800237e:	2100      	movs	r1, #0
 8002380:	200b      	movs	r0, #11
 8002382:	f000 fe98 	bl	80030b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002386:	200b      	movs	r0, #11
 8002388:	f000 feaf 	bl	80030ea <HAL_NVIC_EnableIRQ>

}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	58024400 	.word	0x58024400

08002398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]
 80023ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ae:	4b65      	ldr	r3, [pc, #404]	; (8002544 <MX_GPIO_Init+0x1ac>)
 80023b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80023b4:	4a63      	ldr	r2, [pc, #396]	; (8002544 <MX_GPIO_Init+0x1ac>)
 80023b6:	f043 0310 	orr.w	r3, r3, #16
 80023ba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80023be:	4b61      	ldr	r3, [pc, #388]	; (8002544 <MX_GPIO_Init+0x1ac>)
 80023c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80023c4:	f003 0310 	and.w	r3, r3, #16
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023cc:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <MX_GPIO_Init+0x1ac>)
 80023ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80023d2:	4a5c      	ldr	r2, [pc, #368]	; (8002544 <MX_GPIO_Init+0x1ac>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80023dc:	4b59      	ldr	r3, [pc, #356]	; (8002544 <MX_GPIO_Init+0x1ac>)
 80023de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	4b56      	ldr	r3, [pc, #344]	; (8002544 <MX_GPIO_Init+0x1ac>)
 80023ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80023f0:	4a54      	ldr	r2, [pc, #336]	; (8002544 <MX_GPIO_Init+0x1ac>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80023fa:	4b52      	ldr	r3, [pc, #328]	; (8002544 <MX_GPIO_Init+0x1ac>)
 80023fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002408:	4b4e      	ldr	r3, [pc, #312]	; (8002544 <MX_GPIO_Init+0x1ac>)
 800240a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800240e:	4a4d      	ldr	r2, [pc, #308]	; (8002544 <MX_GPIO_Init+0x1ac>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002418:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <MX_GPIO_Init+0x1ac>)
 800241a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002426:	4b47      	ldr	r3, [pc, #284]	; (8002544 <MX_GPIO_Init+0x1ac>)
 8002428:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800242c:	4a45      	ldr	r2, [pc, #276]	; (8002544 <MX_GPIO_Init+0x1ac>)
 800242e:	f043 0308 	orr.w	r3, r3, #8
 8002432:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002436:	4b43      	ldr	r3, [pc, #268]	; (8002544 <MX_GPIO_Init+0x1ac>)
 8002438:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_Speaker_enable_GPIO_Port, GPIO_Speaker_enable_Pin, GPIO_PIN_SET);
 8002444:	2201      	movs	r2, #1
 8002446:	2108      	movs	r1, #8
 8002448:	483f      	ldr	r0, [pc, #252]	; (8002548 <MX_GPIO_Init+0x1b0>)
 800244a:	f003 fac1 	bl	80059d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);
 800244e:	2201      	movs	r2, #1
 8002450:	2170      	movs	r1, #112	; 0x70
 8002452:	483e      	ldr	r0, [pc, #248]	; (800254c <MX_GPIO_Init+0x1b4>)
 8002454:	f003 fabc 	bl	80059d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002458:	2201      	movs	r2, #1
 800245a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800245e:	483c      	ldr	r0, [pc, #240]	; (8002550 <MX_GPIO_Init+0x1b8>)
 8002460:	f003 fab6 	bl	80059d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_4, GPIO_PIN_SET);
 8002464:	2201      	movs	r2, #1
 8002466:	f44f 7188 	mov.w	r1, #272	; 0x110
 800246a:	483a      	ldr	r0, [pc, #232]	; (8002554 <MX_GPIO_Init+0x1bc>)
 800246c:	f003 fab0 	bl	80059d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8002470:	2200      	movs	r2, #0
 8002472:	2102      	movs	r1, #2
 8002474:	4837      	ldr	r0, [pc, #220]	; (8002554 <MX_GPIO_Init+0x1bc>)
 8002476:	f003 faab 	bl	80059d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_Speaker_enable_Pin */
  GPIO_InitStruct.Pin = GPIO_Speaker_enable_Pin;
 800247a:	2308      	movs	r3, #8
 800247c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247e:	2301      	movs	r3, #1
 8002480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_Speaker_enable_GPIO_Port, &GPIO_InitStruct);
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4619      	mov	r1, r3
 8002490:	482d      	ldr	r0, [pc, #180]	; (8002548 <MX_GPIO_Init+0x1b0>)
 8002492:	f003 f8d5 	bl	8005640 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_PAUSE_Pin BTN_GAME_Pin BTN_TIME_Pin */
  GPIO_InitStruct.Pin = BTN_PAUSE_Pin|BTN_GAME_Pin|BTN_TIME_Pin;
 8002496:	f242 0322 	movw	r3, #8226	; 0x2022
 800249a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a0:	2301      	movs	r3, #1
 80024a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	4619      	mov	r1, r3
 80024aa:	482b      	ldr	r0, [pc, #172]	; (8002558 <MX_GPIO_Init+0x1c0>)
 80024ac:	f003 f8c8 	bl	8005640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80024b0:	2370      	movs	r3, #112	; 0x70
 80024b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b4:	2301      	movs	r3, #1
 80024b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	4619      	mov	r1, r3
 80024c6:	4821      	ldr	r0, [pc, #132]	; (800254c <MX_GPIO_Init+0x1b4>)
 80024c8:	f003 f8ba 	bl	8005640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80024cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d2:	2301      	movs	r3, #1
 80024d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	2300      	movs	r3, #0
 80024dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	4619      	mov	r1, r3
 80024e4:	481a      	ldr	r0, [pc, #104]	; (8002550 <MX_GPIO_Init+0x1b8>)
 80024e6:	f003 f8ab 	bl	8005640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD1 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_4;
 80024ea:	f44f 7389 	mov.w	r3, #274	; 0x112
 80024ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f0:	2301      	movs	r3, #1
 80024f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f8:	2300      	movs	r3, #0
 80024fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	4619      	mov	r1, r3
 8002502:	4814      	ldr	r0, [pc, #80]	; (8002554 <MX_GPIO_Init+0x1bc>)
 8002504:	f003 f89c 	bl	8005640 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_A_Pin BTN_Left_Pin BTN_Down_Pin BTN_Right_Pin
                           BTN_Up_Pin BTN_B_Pin */
  GPIO_InitStruct.Pin = BTN_A_Pin|BTN_Left_Pin|BTN_Down_Pin|BTN_Right_Pin
 8002508:	f64c 2321 	movw	r3, #51745	; 0xca21
 800250c:	617b      	str	r3, [r7, #20]
                          |BTN_Up_Pin|BTN_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002512:	2301      	movs	r3, #1
 8002514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	480d      	ldr	r0, [pc, #52]	; (8002554 <MX_GPIO_Init+0x1bc>)
 800251e:	f003 f88f 	bl	8005640 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_PWR_Pin */
  GPIO_InitStruct.Pin = BTN_PWR_Pin;
 8002522:	2301      	movs	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_PWR_GPIO_Port, &GPIO_InitStruct);
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	4619      	mov	r1, r3
 8002534:	4805      	ldr	r0, [pc, #20]	; (800254c <MX_GPIO_Init+0x1b4>)
 8002536:	f003 f883 	bl	8005640 <HAL_GPIO_Init>

}
 800253a:	bf00      	nop
 800253c:	3728      	adds	r7, #40	; 0x28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	58024400 	.word	0x58024400
 8002548:	58021000 	.word	0x58021000
 800254c:	58020000 	.word	0x58020000
 8002550:	58020400 	.word	0x58020400
 8002554:	58020c00 	.word	0x58020c00
 8002558:	58020800 	.word	0x58020800

0800255c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) {
    // Blink display to indicate failure
    lcd_backlight_off();
 8002560:	f7fd ffe0 	bl	8000524 <lcd_backlight_off>
    HAL_Delay(500);
 8002564:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002568:	f000 fca8 	bl	8002ebc <HAL_Delay>
    lcd_backlight_on();
 800256c:	f7fd fff0 	bl	8000550 <lcd_backlight_on>
    HAL_Delay(500);
 8002570:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002574:	f000 fca2 	bl	8002ebc <HAL_Delay>
    lcd_backlight_off();
 8002578:	e7f2      	b.n	8002560 <Error_Handler+0x4>
	...

0800257c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_MspInit+0x30>)
 8002584:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002588:	4a08      	ldr	r2, [pc, #32]	; (80025ac <HAL_MspInit+0x30>)
 800258a:	f043 0302 	orr.w	r3, r3, #2
 800258e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_MspInit+0x30>)
 8002594:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	607b      	str	r3, [r7, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	58024400 	.word	0x58024400

080025b0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08e      	sub	sp, #56	; 0x38
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a8c      	ldr	r2, [pc, #560]	; (8002800 <HAL_LTDC_MspInit+0x250>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	f040 8111 	bne.w	80027f6 <HAL_LTDC_MspInit+0x246>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80025d4:	4b8b      	ldr	r3, [pc, #556]	; (8002804 <HAL_LTDC_MspInit+0x254>)
 80025d6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80025da:	4a8a      	ldr	r2, [pc, #552]	; (8002804 <HAL_LTDC_MspInit+0x254>)
 80025dc:	f043 0308 	orr.w	r3, r3, #8
 80025e0:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 80025e4:	4b87      	ldr	r3, [pc, #540]	; (8002804 <HAL_LTDC_MspInit+0x254>)
 80025e6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	623b      	str	r3, [r7, #32]
 80025f0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f2:	4b84      	ldr	r3, [pc, #528]	; (8002804 <HAL_LTDC_MspInit+0x254>)
 80025f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80025f8:	4a82      	ldr	r2, [pc, #520]	; (8002804 <HAL_LTDC_MspInit+0x254>)
 80025fa:	f043 0304 	orr.w	r3, r3, #4
 80025fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002602:	4b80      	ldr	r3, [pc, #512]	; (8002804 <HAL_LTDC_MspInit+0x254>)
 8002604:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002610:	4b7c      	ldr	r3, [pc, #496]	; (8002804 <HAL_LTDC_MspInit+0x254>)
 8002612:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002616:	4a7b      	ldr	r2, [pc, #492]	; (8002804 <HAL_LTDC_MspInit+0x254>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002620:	4b78      	ldr	r3, [pc, #480]	; (8002804 <HAL_LTDC_MspInit+0x254>)
 8002622:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	61bb      	str	r3, [r7, #24]
 800262c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262e:	4b75      	ldr	r3, [pc, #468]	; (8002804 <HAL_LTDC_MspInit+0x254>)
 8002630:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002634:	4a73      	ldr	r2, [pc, #460]	; (8002804 <HAL_LTDC_MspInit+0x254>)
 8002636:	f043 0302 	orr.w	r3, r3, #2
 800263a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800263e:	4b71      	ldr	r3, [pc, #452]	; (8002804 <HAL_LTDC_MspInit+0x254>)
 8002640:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800264c:	4b6d      	ldr	r3, [pc, #436]	; (8002804 <HAL_LTDC_MspInit+0x254>)
 800264e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002652:	4a6c      	ldr	r2, [pc, #432]	; (8002804 <HAL_LTDC_MspInit+0x254>)
 8002654:	f043 0310 	orr.w	r3, r3, #16
 8002658:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800265c:	4b69      	ldr	r3, [pc, #420]	; (8002804 <HAL_LTDC_MspInit+0x254>)
 800265e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800266a:	4b66      	ldr	r3, [pc, #408]	; (8002804 <HAL_LTDC_MspInit+0x254>)
 800266c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002670:	4a64      	ldr	r2, [pc, #400]	; (8002804 <HAL_LTDC_MspInit+0x254>)
 8002672:	f043 0308 	orr.w	r3, r3, #8
 8002676:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800267a:	4b62      	ldr	r3, [pc, #392]	; (8002804 <HAL_LTDC_MspInit+0x254>)
 800267c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> LTDC_G7
    PD6     ------> LTDC_B2
    PB5     ------> LTDC_B5
    PB8     ------> LTDC_B6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002688:	2301      	movs	r3, #1
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002694:	2300      	movs	r3, #0
 8002696:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8002698:	230b      	movs	r3, #11
 800269a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800269c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a0:	4619      	mov	r1, r3
 80026a2:	4859      	ldr	r0, [pc, #356]	; (8002808 <HAL_LTDC_MspInit+0x258>)
 80026a4:	f002 ffcc 	bl	8005640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 80026a8:	f44f 6338 	mov.w	r3, #2944	; 0xb80
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b6:	2300      	movs	r3, #0
 80026b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026ba:	230e      	movs	r3, #14
 80026bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c2:	4619      	mov	r1, r3
 80026c4:	4851      	ldr	r0, [pc, #324]	; (800280c <HAL_LTDC_MspInit+0x25c>)
 80026c6:	f002 ffbb 	bl	8005640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026ca:	2301      	movs	r3, #1
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	2302      	movs	r3, #2
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d6:	2300      	movs	r3, #0
 80026d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026da:	2309      	movs	r3, #9
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e2:	4619      	mov	r1, r3
 80026e4:	484a      	ldr	r0, [pc, #296]	; (8002810 <HAL_LTDC_MspInit+0x260>)
 80026e6:	f002 ffab 	bl	8005640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80026ea:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f8:	2300      	movs	r3, #0
 80026fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026fc:	230e      	movs	r3, #14
 80026fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002704:	4619      	mov	r1, r3
 8002706:	4843      	ldr	r0, [pc, #268]	; (8002814 <HAL_LTDC_MspInit+0x264>)
 8002708:	f002 ff9a 	bl	8005640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_8;
 800270c:	f44f 439a 	mov.w	r3, #19712	; 0x4d00
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271a:	2300      	movs	r3, #0
 800271c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800271e:	230e      	movs	r3, #14
 8002720:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002726:	4619      	mov	r1, r3
 8002728:	4839      	ldr	r0, [pc, #228]	; (8002810 <HAL_LTDC_MspInit+0x260>)
 800272a:	f002 ff89 	bl	8005640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_6;
 800272e:	f44f 6389 	mov.w	r3, #1096	; 0x448
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273c:	2300      	movs	r3, #0
 800273e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002740:	230e      	movs	r3, #14
 8002742:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002748:	4619      	mov	r1, r3
 800274a:	4833      	ldr	r0, [pc, #204]	; (8002818 <HAL_LTDC_MspInit+0x268>)
 800274c:	f002 ff78 	bl	8005640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8002750:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275e:	2300      	movs	r3, #0
 8002760:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002762:	230e      	movs	r3, #14
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800276a:	4619      	mov	r1, r3
 800276c:	4826      	ldr	r0, [pc, #152]	; (8002808 <HAL_LTDC_MspInit+0x258>)
 800276e:	f002 ff67 	bl	8005640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002772:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_LTDC;
 8002784:	230a      	movs	r3, #10
 8002786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800278c:	4619      	mov	r1, r3
 800278e:	481e      	ldr	r0, [pc, #120]	; (8002808 <HAL_LTDC_MspInit+0x258>)
 8002790:	f002 ff56 	bl	8005640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_LTDC;
 80027a6:	230c      	movs	r3, #12
 80027a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ae:	4619      	mov	r1, r3
 80027b0:	4816      	ldr	r0, [pc, #88]	; (800280c <HAL_LTDC_MspInit+0x25c>)
 80027b2:	f002 ff45 	bl	8005640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027b6:	2304      	movs	r3, #4
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c2:	2300      	movs	r3, #0
 80027c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80027c6:	2309      	movs	r3, #9
 80027c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ce:	4619      	mov	r1, r3
 80027d0:	4811      	ldr	r0, [pc, #68]	; (8002818 <HAL_LTDC_MspInit+0x268>)
 80027d2:	f002 ff35 	bl	8005640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80027d6:	2320      	movs	r3, #32
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	2302      	movs	r3, #2
 80027dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e2:	2300      	movs	r3, #0
 80027e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 80027e6:	230b      	movs	r3, #11
 80027e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ee:	4619      	mov	r1, r3
 80027f0:	4807      	ldr	r0, [pc, #28]	; (8002810 <HAL_LTDC_MspInit+0x260>)
 80027f2:	f002 ff25 	bl	8005640 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80027f6:	bf00      	nop
 80027f8:	3738      	adds	r7, #56	; 0x38
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	50001000 	.word	0x50001000
 8002804:	58024400 	.word	0x58024400
 8002808:	58020800 	.word	0x58020800
 800280c:	58020000 	.word	0x58020000
 8002810:	58020400 	.word	0x58020400
 8002814:	58021000 	.word	0x58021000
 8002818:	58020c00 	.word	0x58020c00

0800281c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08e      	sub	sp, #56	; 0x38
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a61      	ldr	r2, [pc, #388]	; (80029c0 <HAL_OSPI_MspInit+0x1a4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	f040 80bc 	bne.w	80029b8 <HAL_OSPI_MspInit+0x19c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8002840:	4b60      	ldr	r3, [pc, #384]	; (80029c4 <HAL_OSPI_MspInit+0x1a8>)
 8002842:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002846:	4a5f      	ldr	r2, [pc, #380]	; (80029c4 <HAL_OSPI_MspInit+0x1a8>)
 8002848:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800284c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8002850:	4b5c      	ldr	r3, [pc, #368]	; (80029c4 <HAL_OSPI_MspInit+0x1a8>)
 8002852:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285a:	623b      	str	r3, [r7, #32]
 800285c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800285e:	4b59      	ldr	r3, [pc, #356]	; (80029c4 <HAL_OSPI_MspInit+0x1a8>)
 8002860:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002864:	4a57      	ldr	r2, [pc, #348]	; (80029c4 <HAL_OSPI_MspInit+0x1a8>)
 8002866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800286a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800286e:	4b55      	ldr	r3, [pc, #340]	; (80029c4 <HAL_OSPI_MspInit+0x1a8>)
 8002870:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800287c:	4b51      	ldr	r3, [pc, #324]	; (80029c4 <HAL_OSPI_MspInit+0x1a8>)
 800287e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002882:	4a50      	ldr	r2, [pc, #320]	; (80029c4 <HAL_OSPI_MspInit+0x1a8>)
 8002884:	f043 0310 	orr.w	r3, r3, #16
 8002888:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800288c:	4b4d      	ldr	r3, [pc, #308]	; (80029c4 <HAL_OSPI_MspInit+0x1a8>)
 800288e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289a:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <HAL_OSPI_MspInit+0x1a8>)
 800289c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80028a0:	4a48      	ldr	r2, [pc, #288]	; (80029c4 <HAL_OSPI_MspInit+0x1a8>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80028aa:	4b46      	ldr	r3, [pc, #280]	; (80029c4 <HAL_OSPI_MspInit+0x1a8>)
 80028ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b8:	4b42      	ldr	r3, [pc, #264]	; (80029c4 <HAL_OSPI_MspInit+0x1a8>)
 80028ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80028be:	4a41      	ldr	r2, [pc, #260]	; (80029c4 <HAL_OSPI_MspInit+0x1a8>)
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80028c8:	4b3e      	ldr	r3, [pc, #248]	; (80029c4 <HAL_OSPI_MspInit+0x1a8>)
 80028ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d6:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <HAL_OSPI_MspInit+0x1a8>)
 80028d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80028dc:	4a39      	ldr	r2, [pc, #228]	; (80029c4 <HAL_OSPI_MspInit+0x1a8>)
 80028de:	f043 0308 	orr.w	r3, r3, #8
 80028e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80028e6:	4b37      	ldr	r3, [pc, #220]	; (80029c4 <HAL_OSPI_MspInit+0x1a8>)
 80028e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> OCTOSPIM_P1_IO0
    PB2     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    PD12     ------> OCTOSPIM_P1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028f4:	2304      	movs	r3, #4
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f8:	2302      	movs	r3, #2
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002900:	2303      	movs	r3, #3
 8002902:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8002904:	2309      	movs	r3, #9
 8002906:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800290c:	4619      	mov	r1, r3
 800290e:	482e      	ldr	r0, [pc, #184]	; (80029c8 <HAL_OSPI_MspInit+0x1ac>)
 8002910:	f002 fe96 	bl	8005640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002914:	2302      	movs	r3, #2
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002920:	2303      	movs	r3, #3
 8002922:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8002924:	2309      	movs	r3, #9
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292c:	4619      	mov	r1, r3
 800292e:	4827      	ldr	r0, [pc, #156]	; (80029cc <HAL_OSPI_MspInit+0x1b0>)
 8002930:	f002 fe86 	bl	8005640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002934:	2302      	movs	r3, #2
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002940:	2303      	movs	r3, #3
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8002944:	230b      	movs	r3, #11
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294c:	4619      	mov	r1, r3
 800294e:	4820      	ldr	r0, [pc, #128]	; (80029d0 <HAL_OSPI_MspInit+0x1b4>)
 8002950:	f002 fe76 	bl	8005640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002954:	2304      	movs	r3, #4
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002960:	2303      	movs	r3, #3
 8002962:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8002964:	2309      	movs	r3, #9
 8002966:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800296c:	4619      	mov	r1, r3
 800296e:	4818      	ldr	r0, [pc, #96]	; (80029d0 <HAL_OSPI_MspInit+0x1b4>)
 8002970:	f002 fe66 	bl	8005640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002974:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002982:	2303      	movs	r3, #3
 8002984:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8002986:	230b      	movs	r3, #11
 8002988:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800298a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800298e:	4619      	mov	r1, r3
 8002990:	480d      	ldr	r0, [pc, #52]	; (80029c8 <HAL_OSPI_MspInit+0x1ac>)
 8002992:	f002 fe55 	bl	8005640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a4:	2303      	movs	r3, #3
 80029a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80029a8:	2309      	movs	r3, #9
 80029aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b0:	4619      	mov	r1, r3
 80029b2:	4808      	ldr	r0, [pc, #32]	; (80029d4 <HAL_OSPI_MspInit+0x1b8>)
 80029b4:	f002 fe44 	bl	8005640 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80029b8:	bf00      	nop
 80029ba:	3738      	adds	r7, #56	; 0x38
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	52005000 	.word	0x52005000
 80029c4:	58024400 	.word	0x58024400
 80029c8:	58021000 	.word	0x58021000
 80029cc:	58020000 	.word	0x58020000
 80029d0:	58020400 	.word	0x58020400
 80029d4:	58020c00 	.word	0x58020c00

080029d8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <HAL_RNG_MspInit+0x3c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d10e      	bne.n	8002a08 <HAL_RNG_MspInit+0x30>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_RNG_MspInit+0x40>)
 80029ec:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80029f0:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <HAL_RNG_MspInit+0x40>)
 80029f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029f6:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 80029fa:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <HAL_RNG_MspInit+0x40>)
 80029fc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	48021800 	.word	0x48021800
 8002a18:	58024400 	.word	0x58024400

08002a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	; 0x28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a1a      	ldr	r2, [pc, #104]	; (8002aa4 <HAL_SPI_MspInit+0x88>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d12e      	bne.n	8002a9c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a3e:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <HAL_SPI_MspInit+0x8c>)
 8002a40:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002a44:	4a18      	ldr	r2, [pc, #96]	; (8002aa8 <HAL_SPI_MspInit+0x8c>)
 8002a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a4a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002a4e:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <HAL_SPI_MspInit+0x8c>)
 8002a50:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5c:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <HAL_SPI_MspInit+0x8c>)
 8002a5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002a62:	4a11      	ldr	r2, [pc, #68]	; (8002aa8 <HAL_SPI_MspInit+0x8c>)
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <HAL_SPI_MspInit+0x8c>)
 8002a6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002a7a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a8c:	2305      	movs	r3, #5
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4619      	mov	r1, r3
 8002a96:	4805      	ldr	r0, [pc, #20]	; (8002aac <HAL_SPI_MspInit+0x90>)
 8002a98:	f002 fdd2 	bl	8005640 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a9c:	bf00      	nop
 8002a9e:	3728      	adds	r7, #40	; 0x28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40003800 	.word	0x40003800
 8002aa8:	58024400 	.word	0x58024400
 8002aac:	58020400 	.word	0x58020400

08002ab0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a37      	ldr	r2, [pc, #220]	; (8002b9c <HAL_SAI_MspInit+0xec>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d167      	bne.n	8002b92 <HAL_SAI_MspInit+0xe2>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002ac2:	4b37      	ldr	r3, [pc, #220]	; (8002ba0 <HAL_SAI_MspInit+0xf0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d116      	bne.n	8002af8 <HAL_SAI_MspInit+0x48>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002aca:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <HAL_SAI_MspInit+0xf4>)
 8002acc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002ad0:	4a34      	ldr	r2, [pc, #208]	; (8002ba4 <HAL_SAI_MspInit+0xf4>)
 8002ad2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ad6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002ada:	4b32      	ldr	r3, [pc, #200]	; (8002ba4 <HAL_SAI_MspInit+0xf4>)
 8002adc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2100      	movs	r1, #0
 8002aec:	2057      	movs	r0, #87	; 0x57
 8002aee:	f000 fae2 	bl	80030b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8002af2:	2057      	movs	r0, #87	; 0x57
 8002af4:	f000 faf9 	bl	80030ea <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8002af8:	4b29      	ldr	r3, [pc, #164]	; (8002ba0 <HAL_SAI_MspInit+0xf0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3301      	adds	r3, #1
 8002afe:	4a28      	ldr	r2, [pc, #160]	; (8002ba0 <HAL_SAI_MspInit+0xf0>)
 8002b00:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002b02:	2370      	movs	r3, #112	; 0x70
 8002b04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002b12:	2306      	movs	r3, #6
 8002b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b16:	f107 030c 	add.w	r3, r7, #12
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4822      	ldr	r0, [pc, #136]	; (8002ba8 <HAL_SAI_MspInit+0xf8>)
 8002b1e:	f002 fd8f 	bl	8005640 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8002b22:	4b22      	ldr	r3, [pc, #136]	; (8002bac <HAL_SAI_MspInit+0xfc>)
 8002b24:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <HAL_SAI_MspInit+0x100>)
 8002b26:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002b28:	4b20      	ldr	r3, [pc, #128]	; (8002bac <HAL_SAI_MspInit+0xfc>)
 8002b2a:	2257      	movs	r2, #87	; 0x57
 8002b2c:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b2e:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <HAL_SAI_MspInit+0xfc>)
 8002b30:	2240      	movs	r2, #64	; 0x40
 8002b32:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b34:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_SAI_MspInit+0xfc>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002b3a:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <HAL_SAI_MspInit+0xfc>)
 8002b3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b40:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b42:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <HAL_SAI_MspInit+0xfc>)
 8002b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b48:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b4a:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HAL_SAI_MspInit+0xfc>)
 8002b4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b50:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8002b52:	4b16      	ldr	r3, [pc, #88]	; (8002bac <HAL_SAI_MspInit+0xfc>)
 8002b54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b58:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <HAL_SAI_MspInit+0xfc>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_SAI_MspInit+0xfc>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002b66:	4811      	ldr	r0, [pc, #68]	; (8002bac <HAL_SAI_MspInit+0xfc>)
 8002b68:	f000 fada 	bl	8003120 <HAL_DMA_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_SAI_MspInit+0xc6>
    {
      Error_Handler();
 8002b72:	f7ff fcf3 	bl	800255c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a0c      	ldr	r2, [pc, #48]	; (8002bac <HAL_SAI_MspInit+0xfc>)
 8002b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002b7e:	4a0b      	ldr	r2, [pc, #44]	; (8002bac <HAL_SAI_MspInit+0xfc>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a09      	ldr	r2, [pc, #36]	; (8002bac <HAL_SAI_MspInit+0xfc>)
 8002b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002b8c:	4a07      	ldr	r2, [pc, #28]	; (8002bac <HAL_SAI_MspInit+0xfc>)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8002b92:	bf00      	nop
 8002b94:	3720      	adds	r7, #32
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40015804 	.word	0x40015804
 8002ba0:	2000006c 	.word	0x2000006c
 8002ba4:	58024400 	.word	0x58024400
 8002ba8:	58021000 	.word	0x58021000
 8002bac:	200004a4 	.word	0x200004a4
 8002bb0:	40020010 	.word	0x40020010

08002bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bc6:	e7fe      	b.n	8002bc6 <HardFault_Handler+0x4>

08002bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bcc:	e7fe      	b.n	8002bcc <MemManage_Handler+0x4>

08002bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bd2:	e7fe      	b.n	8002bd2 <BusFault_Handler+0x4>

08002bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bd8:	e7fe      	b.n	8002bd8 <UsageFault_Handler+0x4>

08002bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c08:	f000 f938 	bl	8002e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <DMA1_Stream0_IRQHandler+0x10>)
 8002c16:	f001 fb75 	bl	8004304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200004a4 	.word	0x200004a4

08002c24 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8002c28:	4802      	ldr	r0, [pc, #8]	; (8002c34 <SAI1_IRQHandler+0x10>)
 8002c2a:	f007 fdc3 	bl	800a7b4 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000590 	.word	0x20000590

08002c38 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8002c3c:	4802      	ldr	r0, [pc, #8]	; (8002c48 <OCTOSPI1_IRQHandler+0x10>)
 8002c3e:	f003 faa7 	bl	8006190 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	200002ac 	.word	0x200002ac

08002c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c50:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <SystemInit+0xd8>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c56:	4a33      	ldr	r2, [pc, #204]	; (8002d24 <SystemInit+0xd8>)
 8002c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c60:	4b31      	ldr	r3, [pc, #196]	; (8002d28 <SystemInit+0xdc>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d807      	bhi.n	8002c7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c6c:	4b2e      	ldr	r3, [pc, #184]	; (8002d28 <SystemInit+0xdc>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 030f 	bic.w	r3, r3, #15
 8002c74:	4a2c      	ldr	r2, [pc, #176]	; (8002d28 <SystemInit+0xdc>)
 8002c76:	f043 0303 	orr.w	r3, r3, #3
 8002c7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002c7c:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <SystemInit+0xe0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a2a      	ldr	r2, [pc, #168]	; (8002d2c <SystemInit+0xe0>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c88:	4b28      	ldr	r3, [pc, #160]	; (8002d2c <SystemInit+0xe0>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002c8e:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <SystemInit+0xe0>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4926      	ldr	r1, [pc, #152]	; (8002d2c <SystemInit+0xe0>)
 8002c94:	4b26      	ldr	r3, [pc, #152]	; (8002d30 <SystemInit+0xe4>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c9a:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <SystemInit+0xdc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d907      	bls.n	8002cb6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ca6:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <SystemInit+0xdc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 030f 	bic.w	r3, r3, #15
 8002cae:	4a1e      	ldr	r2, [pc, #120]	; (8002d28 <SystemInit+0xdc>)
 8002cb0:	f043 0303 	orr.w	r3, r3, #3
 8002cb4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002cb6:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <SystemInit+0xe0>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <SystemInit+0xe0>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <SystemInit+0xe0>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002cc8:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <SystemInit+0xe0>)
 8002cca:	4a1a      	ldr	r2, [pc, #104]	; (8002d34 <SystemInit+0xe8>)
 8002ccc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002cce:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <SystemInit+0xe0>)
 8002cd0:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <SystemInit+0xec>)
 8002cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002cd4:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <SystemInit+0xe0>)
 8002cd6:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <SystemInit+0xf0>)
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002cda:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <SystemInit+0xe0>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <SystemInit+0xe0>)
 8002ce2:	4a16      	ldr	r2, [pc, #88]	; (8002d3c <SystemInit+0xf0>)
 8002ce4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ce6:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <SystemInit+0xe0>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <SystemInit+0xe0>)
 8002cee:	4a13      	ldr	r2, [pc, #76]	; (8002d3c <SystemInit+0xf0>)
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <SystemInit+0xe0>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <SystemInit+0xe0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a0b      	ldr	r2, [pc, #44]	; (8002d2c <SystemInit+0xe0>)
 8002cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <SystemInit+0xe0>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <SystemInit+0xf4>)
 8002d0c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002d10:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d12:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <SystemInit+0xd8>)
 8002d14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d18:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00
 8002d28:	52002000 	.word	0x52002000
 8002d2c:	58024400 	.word	0x58024400
 8002d30:	eaf6ed7f 	.word	0xeaf6ed7f
 8002d34:	02020200 	.word	0x02020200
 8002d38:	01ff0000 	.word	0x01ff0000
 8002d3c:	01010280 	.word	0x01010280
 8002d40:	52004000 	.word	0x52004000

08002d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d7c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d48:	f7ff ff80 	bl	8002c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002d4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d4e:	e003      	b.n	8002d58 <LoopCopyDataInit>

08002d50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002d52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d56:	3104      	adds	r1, #4

08002d58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d58:	480a      	ldr	r0, [pc, #40]	; (8002d84 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002d5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d60:	d3f6      	bcc.n	8002d50 <CopyDataInit>
  ldr  r2, =_sbss
 8002d62:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002d64:	e002      	b.n	8002d6c <LoopFillZerobss>

08002d66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002d66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d68:	f842 3b04 	str.w	r3, [r2], #4

08002d6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8002d6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d70:	d3f9      	bcc.n	8002d66 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8002d72:	f008 fc5b 	bl	800b62c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d76:	f7fe fe8f 	bl	8001a98 <main>
  bx  lr
 8002d7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002d80:	0800db30 	.word	0x0800db30
  ldr  r0, =_sdata
 8002d84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d88:	20000038 	.word	0x20000038
  ldr  r2, =_sbss
 8002d8c:	20000038 	.word	0x20000038
  ldr  r3, = _ebss
 8002d90:	20000640 	.word	0x20000640

08002d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d94:	e7fe      	b.n	8002d94 <ADC_IRQHandler>
	...

08002d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d9e:	2003      	movs	r0, #3
 8002da0:	f000 f97e 	bl	80030a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002da4:	f005 f97c 	bl	80080a0 <HAL_RCC_GetSysClockFreq>
 8002da8:	4601      	mov	r1, r0
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_Init+0x68>)
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	0a1b      	lsrs	r3, r3, #8
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	4a13      	ldr	r2, [pc, #76]	; (8002e04 <HAL_Init+0x6c>)
 8002db6:	5cd3      	ldrb	r3, [r2, r3]
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	fa21 f303 	lsr.w	r3, r1, r3
 8002dc0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <HAL_Init+0x68>)
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	4a0e      	ldr	r2, [pc, #56]	; (8002e04 <HAL_Init+0x6c>)
 8002dcc:	5cd3      	ldrb	r3, [r2, r3]
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd8:	4a0b      	ldr	r2, [pc, #44]	; (8002e08 <HAL_Init+0x70>)
 8002dda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ddc:	4a0b      	ldr	r2, [pc, #44]	; (8002e0c <HAL_Init+0x74>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002de2:	2000      	movs	r0, #0
 8002de4:	f000 f814 	bl	8002e10 <HAL_InitTick>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e002      	b.n	8002df8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002df2:	f7ff fbc3 	bl	800257c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	58024400 	.word	0x58024400
 8002e04:	0800db10 	.word	0x0800db10
 8002e08:	2000002c 	.word	0x2000002c
 8002e0c:	20000028 	.word	0x20000028

08002e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002e18:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <HAL_InitTick+0x60>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e021      	b.n	8002e68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002e24:	4b13      	ldr	r3, [pc, #76]	; (8002e74 <HAL_InitTick+0x64>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <HAL_InitTick+0x60>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f963 	bl	8003106 <HAL_SYSTICK_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e00e      	b.n	8002e68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b0f      	cmp	r3, #15
 8002e4e:	d80a      	bhi.n	8002e66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e50:	2200      	movs	r2, #0
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295
 8002e58:	f000 f92d 	bl	80030b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e5c:	4a06      	ldr	r2, [pc, #24]	; (8002e78 <HAL_InitTick+0x68>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000034 	.word	0x20000034
 8002e74:	20000028 	.word	0x20000028
 8002e78:	20000030 	.word	0x20000030

08002e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_IncTick+0x20>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_IncTick+0x24>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	4a04      	ldr	r2, [pc, #16]	; (8002ea0 <HAL_IncTick+0x24>)
 8002e8e:	6013      	str	r3, [r2, #0]
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20000034 	.word	0x20000034
 8002ea0:	2000063c 	.word	0x2000063c

08002ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <HAL_GetTick+0x14>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	2000063c 	.word	0x2000063c

08002ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ec4:	f7ff ffee 	bl	8002ea4 <HAL_GetTick>
 8002ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d005      	beq.n	8002ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <HAL_Delay+0x40>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4413      	add	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ee2:	bf00      	nop
 8002ee4:	f7ff ffde 	bl	8002ea4 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d8f7      	bhi.n	8002ee4 <HAL_Delay+0x28>
  {
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000034 	.word	0x20000034

08002f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <__NVIC_SetPriorityGrouping+0x40>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <__NVIC_SetPriorityGrouping+0x44>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f2e:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <__NVIC_SetPriorityGrouping+0x40>)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	60d3      	str	r3, [r2, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00
 8002f44:	05fa0000 	.word	0x05fa0000

08002f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f4c:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <__NVIC_GetPriorityGrouping+0x18>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	0a1b      	lsrs	r3, r3, #8
 8002f52:	f003 0307 	and.w	r3, r3, #7
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	db0b      	blt.n	8002f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	f003 021f 	and.w	r2, r3, #31
 8002f7c:	4907      	ldr	r1, [pc, #28]	; (8002f9c <__NVIC_EnableIRQ+0x38>)
 8002f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	2001      	movs	r0, #1
 8002f86:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e000e100 	.word	0xe000e100

08002fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	6039      	str	r1, [r7, #0]
 8002faa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	db0a      	blt.n	8002fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	490c      	ldr	r1, [pc, #48]	; (8002fec <__NVIC_SetPriority+0x4c>)
 8002fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fbe:	0112      	lsls	r2, r2, #4
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc8:	e00a      	b.n	8002fe0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	4908      	ldr	r1, [pc, #32]	; (8002ff0 <__NVIC_SetPriority+0x50>)
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	3b04      	subs	r3, #4
 8002fd8:	0112      	lsls	r2, r2, #4
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	440b      	add	r3, r1
 8002fde:	761a      	strb	r2, [r3, #24]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000e100 	.word	0xe000e100
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	; 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f1c3 0307 	rsb	r3, r3, #7
 800300e:	2b04      	cmp	r3, #4
 8003010:	bf28      	it	cs
 8003012:	2304      	movcs	r3, #4
 8003014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3304      	adds	r3, #4
 800301a:	2b06      	cmp	r3, #6
 800301c:	d902      	bls.n	8003024 <NVIC_EncodePriority+0x30>
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3b03      	subs	r3, #3
 8003022:	e000      	b.n	8003026 <NVIC_EncodePriority+0x32>
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003028:	f04f 32ff 	mov.w	r2, #4294967295
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43da      	mvns	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	401a      	ands	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800303c:	f04f 31ff 	mov.w	r1, #4294967295
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	fa01 f303 	lsl.w	r3, r1, r3
 8003046:	43d9      	mvns	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800304c:	4313      	orrs	r3, r2
         );
}
 800304e:	4618      	mov	r0, r3
 8003050:	3724      	adds	r7, #36	; 0x24
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3b01      	subs	r3, #1
 8003068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800306c:	d301      	bcc.n	8003072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800306e:	2301      	movs	r3, #1
 8003070:	e00f      	b.n	8003092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003072:	4a0a      	ldr	r2, [pc, #40]	; (800309c <SysTick_Config+0x40>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3b01      	subs	r3, #1
 8003078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800307a:	210f      	movs	r1, #15
 800307c:	f04f 30ff 	mov.w	r0, #4294967295
 8003080:	f7ff ff8e 	bl	8002fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <SysTick_Config+0x40>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800308a:	4b04      	ldr	r3, [pc, #16]	; (800309c <SysTick_Config+0x40>)
 800308c:	2207      	movs	r2, #7
 800308e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	e000e010 	.word	0xe000e010

080030a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff ff29 	bl	8002f00 <__NVIC_SetPriorityGrouping>
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b086      	sub	sp, #24
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	4603      	mov	r3, r0
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
 80030c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030c4:	f7ff ff40 	bl	8002f48 <__NVIC_GetPriorityGrouping>
 80030c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	6978      	ldr	r0, [r7, #20]
 80030d0:	f7ff ff90 	bl	8002ff4 <NVIC_EncodePriority>
 80030d4:	4602      	mov	r2, r0
 80030d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff5f 	bl	8002fa0 <__NVIC_SetPriority>
}
 80030e2:	bf00      	nop
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	4603      	mov	r3, r0
 80030f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff ff33 	bl	8002f64 <__NVIC_EnableIRQ>
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff ffa4 	bl	800305c <SysTick_Config>
 8003114:	4603      	mov	r3, r0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003128:	f7ff febc 	bl	8002ea4 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e37f      	b.n	8003838 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a66      	ldr	r2, [pc, #408]	; (80032d8 <HAL_DMA_Init+0x1b8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d04a      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a65      	ldr	r2, [pc, #404]	; (80032dc <HAL_DMA_Init+0x1bc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d045      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a63      	ldr	r2, [pc, #396]	; (80032e0 <HAL_DMA_Init+0x1c0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d040      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a62      	ldr	r2, [pc, #392]	; (80032e4 <HAL_DMA_Init+0x1c4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d03b      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a60      	ldr	r2, [pc, #384]	; (80032e8 <HAL_DMA_Init+0x1c8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d036      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a5f      	ldr	r2, [pc, #380]	; (80032ec <HAL_DMA_Init+0x1cc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d031      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a5d      	ldr	r2, [pc, #372]	; (80032f0 <HAL_DMA_Init+0x1d0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d02c      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a5c      	ldr	r2, [pc, #368]	; (80032f4 <HAL_DMA_Init+0x1d4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d027      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a5a      	ldr	r2, [pc, #360]	; (80032f8 <HAL_DMA_Init+0x1d8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d022      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a59      	ldr	r2, [pc, #356]	; (80032fc <HAL_DMA_Init+0x1dc>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d01d      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a57      	ldr	r2, [pc, #348]	; (8003300 <HAL_DMA_Init+0x1e0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d018      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a56      	ldr	r2, [pc, #344]	; (8003304 <HAL_DMA_Init+0x1e4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d013      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a54      	ldr	r2, [pc, #336]	; (8003308 <HAL_DMA_Init+0x1e8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00e      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a53      	ldr	r2, [pc, #332]	; (800330c <HAL_DMA_Init+0x1ec>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d009      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a51      	ldr	r2, [pc, #324]	; (8003310 <HAL_DMA_Init+0x1f0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d004      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a50      	ldr	r2, [pc, #320]	; (8003314 <HAL_DMA_Init+0x1f4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d101      	bne.n	80031dc <HAL_DMA_Init+0xbc>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_DMA_Init+0xbe>
 80031dc:	2300      	movs	r3, #0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 813c 	beq.w	800345c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a37      	ldr	r2, [pc, #220]	; (80032d8 <HAL_DMA_Init+0x1b8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d04a      	beq.n	8003294 <HAL_DMA_Init+0x174>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a36      	ldr	r2, [pc, #216]	; (80032dc <HAL_DMA_Init+0x1bc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d045      	beq.n	8003294 <HAL_DMA_Init+0x174>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a34      	ldr	r2, [pc, #208]	; (80032e0 <HAL_DMA_Init+0x1c0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d040      	beq.n	8003294 <HAL_DMA_Init+0x174>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a33      	ldr	r2, [pc, #204]	; (80032e4 <HAL_DMA_Init+0x1c4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d03b      	beq.n	8003294 <HAL_DMA_Init+0x174>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a31      	ldr	r2, [pc, #196]	; (80032e8 <HAL_DMA_Init+0x1c8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d036      	beq.n	8003294 <HAL_DMA_Init+0x174>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a30      	ldr	r2, [pc, #192]	; (80032ec <HAL_DMA_Init+0x1cc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d031      	beq.n	8003294 <HAL_DMA_Init+0x174>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2e      	ldr	r2, [pc, #184]	; (80032f0 <HAL_DMA_Init+0x1d0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d02c      	beq.n	8003294 <HAL_DMA_Init+0x174>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a2d      	ldr	r2, [pc, #180]	; (80032f4 <HAL_DMA_Init+0x1d4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d027      	beq.n	8003294 <HAL_DMA_Init+0x174>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a2b      	ldr	r2, [pc, #172]	; (80032f8 <HAL_DMA_Init+0x1d8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d022      	beq.n	8003294 <HAL_DMA_Init+0x174>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a2a      	ldr	r2, [pc, #168]	; (80032fc <HAL_DMA_Init+0x1dc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d01d      	beq.n	8003294 <HAL_DMA_Init+0x174>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a28      	ldr	r2, [pc, #160]	; (8003300 <HAL_DMA_Init+0x1e0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d018      	beq.n	8003294 <HAL_DMA_Init+0x174>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a27      	ldr	r2, [pc, #156]	; (8003304 <HAL_DMA_Init+0x1e4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d013      	beq.n	8003294 <HAL_DMA_Init+0x174>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a25      	ldr	r2, [pc, #148]	; (8003308 <HAL_DMA_Init+0x1e8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00e      	beq.n	8003294 <HAL_DMA_Init+0x174>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a24      	ldr	r2, [pc, #144]	; (800330c <HAL_DMA_Init+0x1ec>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d009      	beq.n	8003294 <HAL_DMA_Init+0x174>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a22      	ldr	r2, [pc, #136]	; (8003310 <HAL_DMA_Init+0x1f0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d004      	beq.n	8003294 <HAL_DMA_Init+0x174>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a21      	ldr	r2, [pc, #132]	; (8003314 <HAL_DMA_Init+0x1f4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d108      	bne.n	80032a6 <HAL_DMA_Init+0x186>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	e007      	b.n	80032b6 <HAL_DMA_Init+0x196>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032b6:	e02f      	b.n	8003318 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032b8:	f7ff fdf4 	bl	8002ea4 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	d928      	bls.n	8003318 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2203      	movs	r2, #3
 80032d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e2af      	b.n	8003838 <HAL_DMA_Init+0x718>
 80032d8:	40020010 	.word	0x40020010
 80032dc:	40020028 	.word	0x40020028
 80032e0:	40020040 	.word	0x40020040
 80032e4:	40020058 	.word	0x40020058
 80032e8:	40020070 	.word	0x40020070
 80032ec:	40020088 	.word	0x40020088
 80032f0:	400200a0 	.word	0x400200a0
 80032f4:	400200b8 	.word	0x400200b8
 80032f8:	40020410 	.word	0x40020410
 80032fc:	40020428 	.word	0x40020428
 8003300:	40020440 	.word	0x40020440
 8003304:	40020458 	.word	0x40020458
 8003308:	40020470 	.word	0x40020470
 800330c:	40020488 	.word	0x40020488
 8003310:	400204a0 	.word	0x400204a0
 8003314:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1c8      	bne.n	80032b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4b73      	ldr	r3, [pc, #460]	; (8003500 <HAL_DMA_Init+0x3e0>)
 8003332:	4013      	ands	r3, r2
 8003334:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800333e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800334a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003356:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	2b04      	cmp	r3, #4
 800336a:	d107      	bne.n	800337c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	4313      	orrs	r3, r2
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b28      	cmp	r3, #40	; 0x28
 8003382:	d903      	bls.n	800338c <HAL_DMA_Init+0x26c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b2e      	cmp	r3, #46	; 0x2e
 800338a:	d91f      	bls.n	80033cc <HAL_DMA_Init+0x2ac>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b3e      	cmp	r3, #62	; 0x3e
 8003392:	d903      	bls.n	800339c <HAL_DMA_Init+0x27c>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b42      	cmp	r3, #66	; 0x42
 800339a:	d917      	bls.n	80033cc <HAL_DMA_Init+0x2ac>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b46      	cmp	r3, #70	; 0x46
 80033a2:	d903      	bls.n	80033ac <HAL_DMA_Init+0x28c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b48      	cmp	r3, #72	; 0x48
 80033aa:	d90f      	bls.n	80033cc <HAL_DMA_Init+0x2ac>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b4e      	cmp	r3, #78	; 0x4e
 80033b2:	d903      	bls.n	80033bc <HAL_DMA_Init+0x29c>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b52      	cmp	r3, #82	; 0x52
 80033ba:	d907      	bls.n	80033cc <HAL_DMA_Init+0x2ac>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b73      	cmp	r3, #115	; 0x73
 80033c2:	d905      	bls.n	80033d0 <HAL_DMA_Init+0x2b0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b77      	cmp	r3, #119	; 0x77
 80033ca:	d801      	bhi.n	80033d0 <HAL_DMA_Init+0x2b0>
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <HAL_DMA_Init+0x2b2>
 80033d0:	2300      	movs	r3, #0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033dc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f023 0307 	bic.w	r3, r3, #7
 80033f4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	2b04      	cmp	r3, #4
 8003406:	d117      	bne.n	8003438 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00e      	beq.n	8003438 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f001 ff86 	bl	800532c <DMA_CheckFifoParam>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2240      	movs	r2, #64	; 0x40
 800342a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e1ff      	b.n	8003838 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f001 fec1 	bl	80051c8 <DMA_CalcBaseAndBitshift>
 8003446:	4603      	mov	r3, r0
 8003448:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	223f      	movs	r2, #63	; 0x3f
 8003454:	409a      	lsls	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	609a      	str	r2, [r3, #8]
 800345a:	e0fe      	b.n	800365a <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a28      	ldr	r2, [pc, #160]	; (8003504 <HAL_DMA_Init+0x3e4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d04a      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a27      	ldr	r2, [pc, #156]	; (8003508 <HAL_DMA_Init+0x3e8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d045      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a25      	ldr	r2, [pc, #148]	; (800350c <HAL_DMA_Init+0x3ec>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d040      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a24      	ldr	r2, [pc, #144]	; (8003510 <HAL_DMA_Init+0x3f0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d03b      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a22      	ldr	r2, [pc, #136]	; (8003514 <HAL_DMA_Init+0x3f4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d036      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a21      	ldr	r2, [pc, #132]	; (8003518 <HAL_DMA_Init+0x3f8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d031      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1f      	ldr	r2, [pc, #124]	; (800351c <HAL_DMA_Init+0x3fc>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d02c      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <HAL_DMA_Init+0x400>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d027      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1c      	ldr	r2, [pc, #112]	; (8003524 <HAL_DMA_Init+0x404>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d022      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1b      	ldr	r2, [pc, #108]	; (8003528 <HAL_DMA_Init+0x408>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d01d      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a19      	ldr	r2, [pc, #100]	; (800352c <HAL_DMA_Init+0x40c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d018      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a18      	ldr	r2, [pc, #96]	; (8003530 <HAL_DMA_Init+0x410>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d013      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a16      	ldr	r2, [pc, #88]	; (8003534 <HAL_DMA_Init+0x414>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00e      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a15      	ldr	r2, [pc, #84]	; (8003538 <HAL_DMA_Init+0x418>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d009      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a13      	ldr	r2, [pc, #76]	; (800353c <HAL_DMA_Init+0x41c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d004      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a12      	ldr	r2, [pc, #72]	; (8003540 <HAL_DMA_Init+0x420>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d123      	bne.n	8003544 <HAL_DMA_Init+0x424>
 80034fc:	2301      	movs	r3, #1
 80034fe:	e022      	b.n	8003546 <HAL_DMA_Init+0x426>
 8003500:	fe10803f 	.word	0xfe10803f
 8003504:	48022c08 	.word	0x48022c08
 8003508:	48022c1c 	.word	0x48022c1c
 800350c:	48022c30 	.word	0x48022c30
 8003510:	48022c44 	.word	0x48022c44
 8003514:	48022c58 	.word	0x48022c58
 8003518:	48022c6c 	.word	0x48022c6c
 800351c:	48022c80 	.word	0x48022c80
 8003520:	48022c94 	.word	0x48022c94
 8003524:	58025408 	.word	0x58025408
 8003528:	5802541c 	.word	0x5802541c
 800352c:	58025430 	.word	0x58025430
 8003530:	58025444 	.word	0x58025444
 8003534:	58025458 	.word	0x58025458
 8003538:	5802546c 	.word	0x5802546c
 800353c:	58025480 	.word	0x58025480
 8003540:	58025494 	.word	0x58025494
 8003544:	2300      	movs	r3, #0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d07e      	beq.n	8003648 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a80      	ldr	r2, [pc, #512]	; (8003750 <HAL_DMA_Init+0x630>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d021      	beq.n	8003598 <HAL_DMA_Init+0x478>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a7e      	ldr	r2, [pc, #504]	; (8003754 <HAL_DMA_Init+0x634>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01c      	beq.n	8003598 <HAL_DMA_Init+0x478>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a7d      	ldr	r2, [pc, #500]	; (8003758 <HAL_DMA_Init+0x638>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d017      	beq.n	8003598 <HAL_DMA_Init+0x478>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a7b      	ldr	r2, [pc, #492]	; (800375c <HAL_DMA_Init+0x63c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d012      	beq.n	8003598 <HAL_DMA_Init+0x478>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a7a      	ldr	r2, [pc, #488]	; (8003760 <HAL_DMA_Init+0x640>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00d      	beq.n	8003598 <HAL_DMA_Init+0x478>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a78      	ldr	r2, [pc, #480]	; (8003764 <HAL_DMA_Init+0x644>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d008      	beq.n	8003598 <HAL_DMA_Init+0x478>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a77      	ldr	r2, [pc, #476]	; (8003768 <HAL_DMA_Init+0x648>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d003      	beq.n	8003598 <HAL_DMA_Init+0x478>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a75      	ldr	r2, [pc, #468]	; (800376c <HAL_DMA_Init+0x64c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4b6e      	ldr	r3, [pc, #440]	; (8003770 <HAL_DMA_Init+0x650>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b40      	cmp	r3, #64	; 0x40
 80035c0:	d008      	beq.n	80035d4 <HAL_DMA_Init+0x4b4>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b80      	cmp	r3, #128	; 0x80
 80035c8:	d102      	bne.n	80035d0 <HAL_DMA_Init+0x4b0>
 80035ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035ce:	e002      	b.n	80035d6 <HAL_DMA_Init+0x4b6>
 80035d0:	2300      	movs	r3, #0
 80035d2:	e000      	b.n	80035d6 <HAL_DMA_Init+0x4b6>
 80035d4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68d2      	ldr	r2, [r2, #12]
 80035da:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003604:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	4b56      	ldr	r3, [pc, #344]	; (8003774 <HAL_DMA_Init+0x654>)
 800361c:	4413      	add	r3, r2
 800361e:	4a56      	ldr	r2, [pc, #344]	; (8003778 <HAL_DMA_Init+0x658>)
 8003620:	fba2 2303 	umull	r2, r3, r2, r3
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	009a      	lsls	r2, r3, #2
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f001 fdcb 	bl	80051c8 <DMA_CalcBaseAndBitshift>
 8003632:	4603      	mov	r3, r0
 8003634:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	2201      	movs	r2, #1
 8003640:	409a      	lsls	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	e008      	b.n	800365a <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2240      	movs	r2, #64	; 0x40
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2203      	movs	r2, #3
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e0ee      	b.n	8003838 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a47      	ldr	r2, [pc, #284]	; (800377c <HAL_DMA_Init+0x65c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d072      	beq.n	800374a <HAL_DMA_Init+0x62a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a45      	ldr	r2, [pc, #276]	; (8003780 <HAL_DMA_Init+0x660>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d06d      	beq.n	800374a <HAL_DMA_Init+0x62a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a44      	ldr	r2, [pc, #272]	; (8003784 <HAL_DMA_Init+0x664>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d068      	beq.n	800374a <HAL_DMA_Init+0x62a>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a42      	ldr	r2, [pc, #264]	; (8003788 <HAL_DMA_Init+0x668>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d063      	beq.n	800374a <HAL_DMA_Init+0x62a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a41      	ldr	r2, [pc, #260]	; (800378c <HAL_DMA_Init+0x66c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d05e      	beq.n	800374a <HAL_DMA_Init+0x62a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a3f      	ldr	r2, [pc, #252]	; (8003790 <HAL_DMA_Init+0x670>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d059      	beq.n	800374a <HAL_DMA_Init+0x62a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a3e      	ldr	r2, [pc, #248]	; (8003794 <HAL_DMA_Init+0x674>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d054      	beq.n	800374a <HAL_DMA_Init+0x62a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a3c      	ldr	r2, [pc, #240]	; (8003798 <HAL_DMA_Init+0x678>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d04f      	beq.n	800374a <HAL_DMA_Init+0x62a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a3b      	ldr	r2, [pc, #236]	; (800379c <HAL_DMA_Init+0x67c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d04a      	beq.n	800374a <HAL_DMA_Init+0x62a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a39      	ldr	r2, [pc, #228]	; (80037a0 <HAL_DMA_Init+0x680>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d045      	beq.n	800374a <HAL_DMA_Init+0x62a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a38      	ldr	r2, [pc, #224]	; (80037a4 <HAL_DMA_Init+0x684>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d040      	beq.n	800374a <HAL_DMA_Init+0x62a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a36      	ldr	r2, [pc, #216]	; (80037a8 <HAL_DMA_Init+0x688>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d03b      	beq.n	800374a <HAL_DMA_Init+0x62a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a35      	ldr	r2, [pc, #212]	; (80037ac <HAL_DMA_Init+0x68c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d036      	beq.n	800374a <HAL_DMA_Init+0x62a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a33      	ldr	r2, [pc, #204]	; (80037b0 <HAL_DMA_Init+0x690>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d031      	beq.n	800374a <HAL_DMA_Init+0x62a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a32      	ldr	r2, [pc, #200]	; (80037b4 <HAL_DMA_Init+0x694>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d02c      	beq.n	800374a <HAL_DMA_Init+0x62a>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a30      	ldr	r2, [pc, #192]	; (80037b8 <HAL_DMA_Init+0x698>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d027      	beq.n	800374a <HAL_DMA_Init+0x62a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a14      	ldr	r2, [pc, #80]	; (8003750 <HAL_DMA_Init+0x630>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d022      	beq.n	800374a <HAL_DMA_Init+0x62a>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a12      	ldr	r2, [pc, #72]	; (8003754 <HAL_DMA_Init+0x634>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d01d      	beq.n	800374a <HAL_DMA_Init+0x62a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a11      	ldr	r2, [pc, #68]	; (8003758 <HAL_DMA_Init+0x638>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d018      	beq.n	800374a <HAL_DMA_Init+0x62a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a0f      	ldr	r2, [pc, #60]	; (800375c <HAL_DMA_Init+0x63c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d013      	beq.n	800374a <HAL_DMA_Init+0x62a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a0e      	ldr	r2, [pc, #56]	; (8003760 <HAL_DMA_Init+0x640>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00e      	beq.n	800374a <HAL_DMA_Init+0x62a>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a0c      	ldr	r2, [pc, #48]	; (8003764 <HAL_DMA_Init+0x644>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d009      	beq.n	800374a <HAL_DMA_Init+0x62a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a0b      	ldr	r2, [pc, #44]	; (8003768 <HAL_DMA_Init+0x648>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d004      	beq.n	800374a <HAL_DMA_Init+0x62a>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a09      	ldr	r2, [pc, #36]	; (800376c <HAL_DMA_Init+0x64c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d138      	bne.n	80037bc <HAL_DMA_Init+0x69c>
 800374a:	2301      	movs	r3, #1
 800374c:	e037      	b.n	80037be <HAL_DMA_Init+0x69e>
 800374e:	bf00      	nop
 8003750:	58025408 	.word	0x58025408
 8003754:	5802541c 	.word	0x5802541c
 8003758:	58025430 	.word	0x58025430
 800375c:	58025444 	.word	0x58025444
 8003760:	58025458 	.word	0x58025458
 8003764:	5802546c 	.word	0x5802546c
 8003768:	58025480 	.word	0x58025480
 800376c:	58025494 	.word	0x58025494
 8003770:	fffe000f 	.word	0xfffe000f
 8003774:	a7fdabf8 	.word	0xa7fdabf8
 8003778:	cccccccd 	.word	0xcccccccd
 800377c:	40020010 	.word	0x40020010
 8003780:	40020028 	.word	0x40020028
 8003784:	40020040 	.word	0x40020040
 8003788:	40020058 	.word	0x40020058
 800378c:	40020070 	.word	0x40020070
 8003790:	40020088 	.word	0x40020088
 8003794:	400200a0 	.word	0x400200a0
 8003798:	400200b8 	.word	0x400200b8
 800379c:	40020410 	.word	0x40020410
 80037a0:	40020428 	.word	0x40020428
 80037a4:	40020440 	.word	0x40020440
 80037a8:	40020458 	.word	0x40020458
 80037ac:	40020470 	.word	0x40020470
 80037b0:	40020488 	.word	0x40020488
 80037b4:	400204a0 	.word	0x400204a0
 80037b8:	400204b8 	.word	0x400204b8
 80037bc:	2300      	movs	r3, #0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d032      	beq.n	8003828 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f001 fe2e 	bl	8005424 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b80      	cmp	r3, #128	; 0x80
 80037ce:	d102      	bne.n	80037d6 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80037ea:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d010      	beq.n	8003816 <HAL_DMA_Init+0x6f6>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d80c      	bhi.n	8003816 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f001 feab 	bl	8005558 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003812:	605a      	str	r2, [r3, #4]
 8003814:	e008      	b.n	8003828 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003848:	f7ff fb2c 	bl	8002ea4 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e2dc      	b.n	8003e12 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d008      	beq.n	8003876 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2280      	movs	r2, #128	; 0x80
 8003868:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e2cd      	b.n	8003e12 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a76      	ldr	r2, [pc, #472]	; (8003a54 <HAL_DMA_Abort+0x214>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d04a      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a74      	ldr	r2, [pc, #464]	; (8003a58 <HAL_DMA_Abort+0x218>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d045      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a73      	ldr	r2, [pc, #460]	; (8003a5c <HAL_DMA_Abort+0x21c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d040      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a71      	ldr	r2, [pc, #452]	; (8003a60 <HAL_DMA_Abort+0x220>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d03b      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a70      	ldr	r2, [pc, #448]	; (8003a64 <HAL_DMA_Abort+0x224>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d036      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a6e      	ldr	r2, [pc, #440]	; (8003a68 <HAL_DMA_Abort+0x228>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d031      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a6d      	ldr	r2, [pc, #436]	; (8003a6c <HAL_DMA_Abort+0x22c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d02c      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a6b      	ldr	r2, [pc, #428]	; (8003a70 <HAL_DMA_Abort+0x230>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d027      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a6a      	ldr	r2, [pc, #424]	; (8003a74 <HAL_DMA_Abort+0x234>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d022      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a68      	ldr	r2, [pc, #416]	; (8003a78 <HAL_DMA_Abort+0x238>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01d      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a67      	ldr	r2, [pc, #412]	; (8003a7c <HAL_DMA_Abort+0x23c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d018      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a65      	ldr	r2, [pc, #404]	; (8003a80 <HAL_DMA_Abort+0x240>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d013      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a64      	ldr	r2, [pc, #400]	; (8003a84 <HAL_DMA_Abort+0x244>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00e      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a62      	ldr	r2, [pc, #392]	; (8003a88 <HAL_DMA_Abort+0x248>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d009      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a61      	ldr	r2, [pc, #388]	; (8003a8c <HAL_DMA_Abort+0x24c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d004      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a5f      	ldr	r2, [pc, #380]	; (8003a90 <HAL_DMA_Abort+0x250>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_DMA_Abort+0xda>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_DMA_Abort+0xdc>
 800391a:	2300      	movs	r3, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d013      	beq.n	8003948 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 021e 	bic.w	r2, r2, #30
 800392e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800393e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	e00a      	b.n	800395e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 020e 	bic.w	r2, r2, #14
 8003956:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a3c      	ldr	r2, [pc, #240]	; (8003a54 <HAL_DMA_Abort+0x214>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d072      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a3a      	ldr	r2, [pc, #232]	; (8003a58 <HAL_DMA_Abort+0x218>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d06d      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a39      	ldr	r2, [pc, #228]	; (8003a5c <HAL_DMA_Abort+0x21c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d068      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a37      	ldr	r2, [pc, #220]	; (8003a60 <HAL_DMA_Abort+0x220>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d063      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a36      	ldr	r2, [pc, #216]	; (8003a64 <HAL_DMA_Abort+0x224>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d05e      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a34      	ldr	r2, [pc, #208]	; (8003a68 <HAL_DMA_Abort+0x228>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d059      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a33      	ldr	r2, [pc, #204]	; (8003a6c <HAL_DMA_Abort+0x22c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d054      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a31      	ldr	r2, [pc, #196]	; (8003a70 <HAL_DMA_Abort+0x230>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d04f      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a30      	ldr	r2, [pc, #192]	; (8003a74 <HAL_DMA_Abort+0x234>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d04a      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a2e      	ldr	r2, [pc, #184]	; (8003a78 <HAL_DMA_Abort+0x238>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d045      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a2d      	ldr	r2, [pc, #180]	; (8003a7c <HAL_DMA_Abort+0x23c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d040      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2b      	ldr	r2, [pc, #172]	; (8003a80 <HAL_DMA_Abort+0x240>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d03b      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2a      	ldr	r2, [pc, #168]	; (8003a84 <HAL_DMA_Abort+0x244>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d036      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a28      	ldr	r2, [pc, #160]	; (8003a88 <HAL_DMA_Abort+0x248>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d031      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a27      	ldr	r2, [pc, #156]	; (8003a8c <HAL_DMA_Abort+0x24c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d02c      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a25      	ldr	r2, [pc, #148]	; (8003a90 <HAL_DMA_Abort+0x250>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d027      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a24      	ldr	r2, [pc, #144]	; (8003a94 <HAL_DMA_Abort+0x254>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d022      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a22      	ldr	r2, [pc, #136]	; (8003a98 <HAL_DMA_Abort+0x258>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d01d      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a21      	ldr	r2, [pc, #132]	; (8003a9c <HAL_DMA_Abort+0x25c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d018      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1f      	ldr	r2, [pc, #124]	; (8003aa0 <HAL_DMA_Abort+0x260>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d013      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1e      	ldr	r2, [pc, #120]	; (8003aa4 <HAL_DMA_Abort+0x264>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00e      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1c      	ldr	r2, [pc, #112]	; (8003aa8 <HAL_DMA_Abort+0x268>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d009      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1b      	ldr	r2, [pc, #108]	; (8003aac <HAL_DMA_Abort+0x26c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d004      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a19      	ldr	r2, [pc, #100]	; (8003ab0 <HAL_DMA_Abort+0x270>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d132      	bne.n	8003ab4 <HAL_DMA_Abort+0x274>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e031      	b.n	8003ab6 <HAL_DMA_Abort+0x276>
 8003a52:	bf00      	nop
 8003a54:	40020010 	.word	0x40020010
 8003a58:	40020028 	.word	0x40020028
 8003a5c:	40020040 	.word	0x40020040
 8003a60:	40020058 	.word	0x40020058
 8003a64:	40020070 	.word	0x40020070
 8003a68:	40020088 	.word	0x40020088
 8003a6c:	400200a0 	.word	0x400200a0
 8003a70:	400200b8 	.word	0x400200b8
 8003a74:	40020410 	.word	0x40020410
 8003a78:	40020428 	.word	0x40020428
 8003a7c:	40020440 	.word	0x40020440
 8003a80:	40020458 	.word	0x40020458
 8003a84:	40020470 	.word	0x40020470
 8003a88:	40020488 	.word	0x40020488
 8003a8c:	400204a0 	.word	0x400204a0
 8003a90:	400204b8 	.word	0x400204b8
 8003a94:	58025408 	.word	0x58025408
 8003a98:	5802541c 	.word	0x5802541c
 8003a9c:	58025430 	.word	0x58025430
 8003aa0:	58025444 	.word	0x58025444
 8003aa4:	58025458 	.word	0x58025458
 8003aa8:	5802546c 	.word	0x5802546c
 8003aac:	58025480 	.word	0x58025480
 8003ab0:	58025494 	.word	0x58025494
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ac8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6d      	ldr	r2, [pc, #436]	; (8003c84 <HAL_DMA_Abort+0x444>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d04a      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a6b      	ldr	r2, [pc, #428]	; (8003c88 <HAL_DMA_Abort+0x448>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d045      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a6a      	ldr	r2, [pc, #424]	; (8003c8c <HAL_DMA_Abort+0x44c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d040      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a68      	ldr	r2, [pc, #416]	; (8003c90 <HAL_DMA_Abort+0x450>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d03b      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a67      	ldr	r2, [pc, #412]	; (8003c94 <HAL_DMA_Abort+0x454>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d036      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a65      	ldr	r2, [pc, #404]	; (8003c98 <HAL_DMA_Abort+0x458>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d031      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a64      	ldr	r2, [pc, #400]	; (8003c9c <HAL_DMA_Abort+0x45c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d02c      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a62      	ldr	r2, [pc, #392]	; (8003ca0 <HAL_DMA_Abort+0x460>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d027      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a61      	ldr	r2, [pc, #388]	; (8003ca4 <HAL_DMA_Abort+0x464>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d022      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a5f      	ldr	r2, [pc, #380]	; (8003ca8 <HAL_DMA_Abort+0x468>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d01d      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a5e      	ldr	r2, [pc, #376]	; (8003cac <HAL_DMA_Abort+0x46c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d018      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a5c      	ldr	r2, [pc, #368]	; (8003cb0 <HAL_DMA_Abort+0x470>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a5b      	ldr	r2, [pc, #364]	; (8003cb4 <HAL_DMA_Abort+0x474>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00e      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a59      	ldr	r2, [pc, #356]	; (8003cb8 <HAL_DMA_Abort+0x478>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d009      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a58      	ldr	r2, [pc, #352]	; (8003cbc <HAL_DMA_Abort+0x47c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d004      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a56      	ldr	r2, [pc, #344]	; (8003cc0 <HAL_DMA_Abort+0x480>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d108      	bne.n	8003b7c <HAL_DMA_Abort+0x33c>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0201 	bic.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e007      	b.n	8003b8c <HAL_DMA_Abort+0x34c>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003b8c:	e013      	b.n	8003bb6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b8e:	f7ff f989 	bl	8002ea4 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b05      	cmp	r3, #5
 8003b9a:	d90c      	bls.n	8003bb6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2203      	movs	r2, #3
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e12d      	b.n	8003e12 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e5      	bne.n	8003b8e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2f      	ldr	r2, [pc, #188]	; (8003c84 <HAL_DMA_Abort+0x444>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d04a      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2d      	ldr	r2, [pc, #180]	; (8003c88 <HAL_DMA_Abort+0x448>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d045      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2c      	ldr	r2, [pc, #176]	; (8003c8c <HAL_DMA_Abort+0x44c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d040      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a2a      	ldr	r2, [pc, #168]	; (8003c90 <HAL_DMA_Abort+0x450>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d03b      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a29      	ldr	r2, [pc, #164]	; (8003c94 <HAL_DMA_Abort+0x454>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d036      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a27      	ldr	r2, [pc, #156]	; (8003c98 <HAL_DMA_Abort+0x458>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d031      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a26      	ldr	r2, [pc, #152]	; (8003c9c <HAL_DMA_Abort+0x45c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d02c      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a24      	ldr	r2, [pc, #144]	; (8003ca0 <HAL_DMA_Abort+0x460>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d027      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a23      	ldr	r2, [pc, #140]	; (8003ca4 <HAL_DMA_Abort+0x464>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d022      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <HAL_DMA_Abort+0x468>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01d      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a20      	ldr	r2, [pc, #128]	; (8003cac <HAL_DMA_Abort+0x46c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d018      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <HAL_DMA_Abort+0x470>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1d      	ldr	r2, [pc, #116]	; (8003cb4 <HAL_DMA_Abort+0x474>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00e      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <HAL_DMA_Abort+0x478>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d009      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1a      	ldr	r2, [pc, #104]	; (8003cbc <HAL_DMA_Abort+0x47c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a18      	ldr	r2, [pc, #96]	; (8003cc0 <HAL_DMA_Abort+0x480>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d101      	bne.n	8003c66 <HAL_DMA_Abort+0x426>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_DMA_Abort+0x428>
 8003c66:	2300      	movs	r3, #0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d02b      	beq.n	8003cc4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c70:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	223f      	movs	r2, #63	; 0x3f
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	609a      	str	r2, [r3, #8]
 8003c82:	e02a      	b.n	8003cda <HAL_DMA_Abort+0x49a>
 8003c84:	40020010 	.word	0x40020010
 8003c88:	40020028 	.word	0x40020028
 8003c8c:	40020040 	.word	0x40020040
 8003c90:	40020058 	.word	0x40020058
 8003c94:	40020070 	.word	0x40020070
 8003c98:	40020088 	.word	0x40020088
 8003c9c:	400200a0 	.word	0x400200a0
 8003ca0:	400200b8 	.word	0x400200b8
 8003ca4:	40020410 	.word	0x40020410
 8003ca8:	40020428 	.word	0x40020428
 8003cac:	40020440 	.word	0x40020440
 8003cb0:	40020458 	.word	0x40020458
 8003cb4:	40020470 	.word	0x40020470
 8003cb8:	40020488 	.word	0x40020488
 8003cbc:	400204a0 	.word	0x400204a0
 8003cc0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cce:	f003 031f 	and.w	r3, r3, #31
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	409a      	lsls	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a4f      	ldr	r2, [pc, #316]	; (8003e1c <HAL_DMA_Abort+0x5dc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d072      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a4d      	ldr	r2, [pc, #308]	; (8003e20 <HAL_DMA_Abort+0x5e0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d06d      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a4c      	ldr	r2, [pc, #304]	; (8003e24 <HAL_DMA_Abort+0x5e4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d068      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a4a      	ldr	r2, [pc, #296]	; (8003e28 <HAL_DMA_Abort+0x5e8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d063      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a49      	ldr	r2, [pc, #292]	; (8003e2c <HAL_DMA_Abort+0x5ec>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d05e      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a47      	ldr	r2, [pc, #284]	; (8003e30 <HAL_DMA_Abort+0x5f0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d059      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a46      	ldr	r2, [pc, #280]	; (8003e34 <HAL_DMA_Abort+0x5f4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d054      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a44      	ldr	r2, [pc, #272]	; (8003e38 <HAL_DMA_Abort+0x5f8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d04f      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a43      	ldr	r2, [pc, #268]	; (8003e3c <HAL_DMA_Abort+0x5fc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d04a      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a41      	ldr	r2, [pc, #260]	; (8003e40 <HAL_DMA_Abort+0x600>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d045      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a40      	ldr	r2, [pc, #256]	; (8003e44 <HAL_DMA_Abort+0x604>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d040      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a3e      	ldr	r2, [pc, #248]	; (8003e48 <HAL_DMA_Abort+0x608>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d03b      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a3d      	ldr	r2, [pc, #244]	; (8003e4c <HAL_DMA_Abort+0x60c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d036      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a3b      	ldr	r2, [pc, #236]	; (8003e50 <HAL_DMA_Abort+0x610>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d031      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a3a      	ldr	r2, [pc, #232]	; (8003e54 <HAL_DMA_Abort+0x614>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d02c      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a38      	ldr	r2, [pc, #224]	; (8003e58 <HAL_DMA_Abort+0x618>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d027      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a37      	ldr	r2, [pc, #220]	; (8003e5c <HAL_DMA_Abort+0x61c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d022      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a35      	ldr	r2, [pc, #212]	; (8003e60 <HAL_DMA_Abort+0x620>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d01d      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a34      	ldr	r2, [pc, #208]	; (8003e64 <HAL_DMA_Abort+0x624>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d018      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a32      	ldr	r2, [pc, #200]	; (8003e68 <HAL_DMA_Abort+0x628>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d013      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a31      	ldr	r2, [pc, #196]	; (8003e6c <HAL_DMA_Abort+0x62c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00e      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a2f      	ldr	r2, [pc, #188]	; (8003e70 <HAL_DMA_Abort+0x630>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d009      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a2e      	ldr	r2, [pc, #184]	; (8003e74 <HAL_DMA_Abort+0x634>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d004      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a2c      	ldr	r2, [pc, #176]	; (8003e78 <HAL_DMA_Abort+0x638>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d101      	bne.n	8003dce <HAL_DMA_Abort+0x58e>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <HAL_DMA_Abort+0x590>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d015      	beq.n	8003e00 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ddc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00c      	beq.n	8003e00 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003df4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003dfe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40020010 	.word	0x40020010
 8003e20:	40020028 	.word	0x40020028
 8003e24:	40020040 	.word	0x40020040
 8003e28:	40020058 	.word	0x40020058
 8003e2c:	40020070 	.word	0x40020070
 8003e30:	40020088 	.word	0x40020088
 8003e34:	400200a0 	.word	0x400200a0
 8003e38:	400200b8 	.word	0x400200b8
 8003e3c:	40020410 	.word	0x40020410
 8003e40:	40020428 	.word	0x40020428
 8003e44:	40020440 	.word	0x40020440
 8003e48:	40020458 	.word	0x40020458
 8003e4c:	40020470 	.word	0x40020470
 8003e50:	40020488 	.word	0x40020488
 8003e54:	400204a0 	.word	0x400204a0
 8003e58:	400204b8 	.word	0x400204b8
 8003e5c:	58025408 	.word	0x58025408
 8003e60:	5802541c 	.word	0x5802541c
 8003e64:	58025430 	.word	0x58025430
 8003e68:	58025444 	.word	0x58025444
 8003e6c:	58025458 	.word	0x58025458
 8003e70:	5802546c 	.word	0x5802546c
 8003e74:	58025480 	.word	0x58025480
 8003e78:	58025494 	.word	0x58025494

08003e7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e205      	b.n	800429a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d004      	beq.n	8003ea4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2280      	movs	r2, #128	; 0x80
 8003e9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e1fa      	b.n	800429a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a8c      	ldr	r2, [pc, #560]	; (80040dc <HAL_DMA_Abort_IT+0x260>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d04a      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a8b      	ldr	r2, [pc, #556]	; (80040e0 <HAL_DMA_Abort_IT+0x264>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d045      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a89      	ldr	r2, [pc, #548]	; (80040e4 <HAL_DMA_Abort_IT+0x268>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d040      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a88      	ldr	r2, [pc, #544]	; (80040e8 <HAL_DMA_Abort_IT+0x26c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d03b      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a86      	ldr	r2, [pc, #536]	; (80040ec <HAL_DMA_Abort_IT+0x270>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d036      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a85      	ldr	r2, [pc, #532]	; (80040f0 <HAL_DMA_Abort_IT+0x274>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d031      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a83      	ldr	r2, [pc, #524]	; (80040f4 <HAL_DMA_Abort_IT+0x278>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d02c      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a82      	ldr	r2, [pc, #520]	; (80040f8 <HAL_DMA_Abort_IT+0x27c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d027      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a80      	ldr	r2, [pc, #512]	; (80040fc <HAL_DMA_Abort_IT+0x280>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d022      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a7f      	ldr	r2, [pc, #508]	; (8004100 <HAL_DMA_Abort_IT+0x284>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d01d      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a7d      	ldr	r2, [pc, #500]	; (8004104 <HAL_DMA_Abort_IT+0x288>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d018      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a7c      	ldr	r2, [pc, #496]	; (8004108 <HAL_DMA_Abort_IT+0x28c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a7a      	ldr	r2, [pc, #488]	; (800410c <HAL_DMA_Abort_IT+0x290>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00e      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a79      	ldr	r2, [pc, #484]	; (8004110 <HAL_DMA_Abort_IT+0x294>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d009      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a77      	ldr	r2, [pc, #476]	; (8004114 <HAL_DMA_Abort_IT+0x298>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a76      	ldr	r2, [pc, #472]	; (8004118 <HAL_DMA_Abort_IT+0x29c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d101      	bne.n	8003f48 <HAL_DMA_Abort_IT+0xcc>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <HAL_DMA_Abort_IT+0xce>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d065      	beq.n	800401a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2204      	movs	r2, #4
 8003f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a60      	ldr	r2, [pc, #384]	; (80040dc <HAL_DMA_Abort_IT+0x260>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d04a      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a5e      	ldr	r2, [pc, #376]	; (80040e0 <HAL_DMA_Abort_IT+0x264>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d045      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a5d      	ldr	r2, [pc, #372]	; (80040e4 <HAL_DMA_Abort_IT+0x268>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d040      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a5b      	ldr	r2, [pc, #364]	; (80040e8 <HAL_DMA_Abort_IT+0x26c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d03b      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a5a      	ldr	r2, [pc, #360]	; (80040ec <HAL_DMA_Abort_IT+0x270>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d036      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a58      	ldr	r2, [pc, #352]	; (80040f0 <HAL_DMA_Abort_IT+0x274>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d031      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a57      	ldr	r2, [pc, #348]	; (80040f4 <HAL_DMA_Abort_IT+0x278>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d02c      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a55      	ldr	r2, [pc, #340]	; (80040f8 <HAL_DMA_Abort_IT+0x27c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d027      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a54      	ldr	r2, [pc, #336]	; (80040fc <HAL_DMA_Abort_IT+0x280>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a52      	ldr	r2, [pc, #328]	; (8004100 <HAL_DMA_Abort_IT+0x284>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a51      	ldr	r2, [pc, #324]	; (8004104 <HAL_DMA_Abort_IT+0x288>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d018      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a4f      	ldr	r2, [pc, #316]	; (8004108 <HAL_DMA_Abort_IT+0x28c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a4e      	ldr	r2, [pc, #312]	; (800410c <HAL_DMA_Abort_IT+0x290>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a4c      	ldr	r2, [pc, #304]	; (8004110 <HAL_DMA_Abort_IT+0x294>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d009      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a4b      	ldr	r2, [pc, #300]	; (8004114 <HAL_DMA_Abort_IT+0x298>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d004      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a49      	ldr	r2, [pc, #292]	; (8004118 <HAL_DMA_Abort_IT+0x29c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d108      	bne.n	8004008 <HAL_DMA_Abort_IT+0x18c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	e147      	b.n	8004298 <HAL_DMA_Abort_IT+0x41c>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e13e      	b.n	8004298 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 020e 	bic.w	r2, r2, #14
 8004028:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a2b      	ldr	r2, [pc, #172]	; (80040dc <HAL_DMA_Abort_IT+0x260>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d04a      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a29      	ldr	r2, [pc, #164]	; (80040e0 <HAL_DMA_Abort_IT+0x264>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d045      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a28      	ldr	r2, [pc, #160]	; (80040e4 <HAL_DMA_Abort_IT+0x268>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d040      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a26      	ldr	r2, [pc, #152]	; (80040e8 <HAL_DMA_Abort_IT+0x26c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d03b      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a25      	ldr	r2, [pc, #148]	; (80040ec <HAL_DMA_Abort_IT+0x270>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d036      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a23      	ldr	r2, [pc, #140]	; (80040f0 <HAL_DMA_Abort_IT+0x274>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d031      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a22      	ldr	r2, [pc, #136]	; (80040f4 <HAL_DMA_Abort_IT+0x278>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d02c      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a20      	ldr	r2, [pc, #128]	; (80040f8 <HAL_DMA_Abort_IT+0x27c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d027      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a1f      	ldr	r2, [pc, #124]	; (80040fc <HAL_DMA_Abort_IT+0x280>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d022      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <HAL_DMA_Abort_IT+0x284>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d01d      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a1c      	ldr	r2, [pc, #112]	; (8004104 <HAL_DMA_Abort_IT+0x288>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d018      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1a      	ldr	r2, [pc, #104]	; (8004108 <HAL_DMA_Abort_IT+0x28c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a19      	ldr	r2, [pc, #100]	; (800410c <HAL_DMA_Abort_IT+0x290>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00e      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a17      	ldr	r2, [pc, #92]	; (8004110 <HAL_DMA_Abort_IT+0x294>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d009      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a16      	ldr	r2, [pc, #88]	; (8004114 <HAL_DMA_Abort_IT+0x298>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d004      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a14      	ldr	r2, [pc, #80]	; (8004118 <HAL_DMA_Abort_IT+0x29c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d128      	bne.n	800411c <HAL_DMA_Abort_IT+0x2a0>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	e027      	b.n	800412c <HAL_DMA_Abort_IT+0x2b0>
 80040dc:	40020010 	.word	0x40020010
 80040e0:	40020028 	.word	0x40020028
 80040e4:	40020040 	.word	0x40020040
 80040e8:	40020058 	.word	0x40020058
 80040ec:	40020070 	.word	0x40020070
 80040f0:	40020088 	.word	0x40020088
 80040f4:	400200a0 	.word	0x400200a0
 80040f8:	400200b8 	.word	0x400200b8
 80040fc:	40020410 	.word	0x40020410
 8004100:	40020428 	.word	0x40020428
 8004104:	40020440 	.word	0x40020440
 8004108:	40020458 	.word	0x40020458
 800410c:	40020470 	.word	0x40020470
 8004110:	40020488 	.word	0x40020488
 8004114:	400204a0 	.word	0x400204a0
 8004118:	400204b8 	.word	0x400204b8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a5c      	ldr	r2, [pc, #368]	; (80042a4 <HAL_DMA_Abort_IT+0x428>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d072      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a5b      	ldr	r2, [pc, #364]	; (80042a8 <HAL_DMA_Abort_IT+0x42c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d06d      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a59      	ldr	r2, [pc, #356]	; (80042ac <HAL_DMA_Abort_IT+0x430>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d068      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a58      	ldr	r2, [pc, #352]	; (80042b0 <HAL_DMA_Abort_IT+0x434>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d063      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a56      	ldr	r2, [pc, #344]	; (80042b4 <HAL_DMA_Abort_IT+0x438>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d05e      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a55      	ldr	r2, [pc, #340]	; (80042b8 <HAL_DMA_Abort_IT+0x43c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d059      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a53      	ldr	r2, [pc, #332]	; (80042bc <HAL_DMA_Abort_IT+0x440>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d054      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a52      	ldr	r2, [pc, #328]	; (80042c0 <HAL_DMA_Abort_IT+0x444>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d04f      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a50      	ldr	r2, [pc, #320]	; (80042c4 <HAL_DMA_Abort_IT+0x448>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d04a      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a4f      	ldr	r2, [pc, #316]	; (80042c8 <HAL_DMA_Abort_IT+0x44c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d045      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a4d      	ldr	r2, [pc, #308]	; (80042cc <HAL_DMA_Abort_IT+0x450>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d040      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a4c      	ldr	r2, [pc, #304]	; (80042d0 <HAL_DMA_Abort_IT+0x454>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d03b      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a4a      	ldr	r2, [pc, #296]	; (80042d4 <HAL_DMA_Abort_IT+0x458>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d036      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a49      	ldr	r2, [pc, #292]	; (80042d8 <HAL_DMA_Abort_IT+0x45c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d031      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a47      	ldr	r2, [pc, #284]	; (80042dc <HAL_DMA_Abort_IT+0x460>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d02c      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a46      	ldr	r2, [pc, #280]	; (80042e0 <HAL_DMA_Abort_IT+0x464>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d027      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a44      	ldr	r2, [pc, #272]	; (80042e4 <HAL_DMA_Abort_IT+0x468>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d022      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a43      	ldr	r2, [pc, #268]	; (80042e8 <HAL_DMA_Abort_IT+0x46c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d01d      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a41      	ldr	r2, [pc, #260]	; (80042ec <HAL_DMA_Abort_IT+0x470>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d018      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a40      	ldr	r2, [pc, #256]	; (80042f0 <HAL_DMA_Abort_IT+0x474>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d013      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a3e      	ldr	r2, [pc, #248]	; (80042f4 <HAL_DMA_Abort_IT+0x478>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00e      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a3d      	ldr	r2, [pc, #244]	; (80042f8 <HAL_DMA_Abort_IT+0x47c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d009      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a3b      	ldr	r2, [pc, #236]	; (80042fc <HAL_DMA_Abort_IT+0x480>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d004      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a3a      	ldr	r2, [pc, #232]	; (8004300 <HAL_DMA_Abort_IT+0x484>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d101      	bne.n	8004220 <HAL_DMA_Abort_IT+0x3a4>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <HAL_DMA_Abort_IT+0x3a6>
 8004220:	2300      	movs	r3, #0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d028      	beq.n	8004278 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004234:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2201      	movs	r2, #1
 8004246:	409a      	lsls	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004254:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00c      	beq.n	8004278 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800426c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004276:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40020010 	.word	0x40020010
 80042a8:	40020028 	.word	0x40020028
 80042ac:	40020040 	.word	0x40020040
 80042b0:	40020058 	.word	0x40020058
 80042b4:	40020070 	.word	0x40020070
 80042b8:	40020088 	.word	0x40020088
 80042bc:	400200a0 	.word	0x400200a0
 80042c0:	400200b8 	.word	0x400200b8
 80042c4:	40020410 	.word	0x40020410
 80042c8:	40020428 	.word	0x40020428
 80042cc:	40020440 	.word	0x40020440
 80042d0:	40020458 	.word	0x40020458
 80042d4:	40020470 	.word	0x40020470
 80042d8:	40020488 	.word	0x40020488
 80042dc:	400204a0 	.word	0x400204a0
 80042e0:	400204b8 	.word	0x400204b8
 80042e4:	58025408 	.word	0x58025408
 80042e8:	5802541c 	.word	0x5802541c
 80042ec:	58025430 	.word	0x58025430
 80042f0:	58025444 	.word	0x58025444
 80042f4:	58025458 	.word	0x58025458
 80042f8:	5802546c 	.word	0x5802546c
 80042fc:	58025480 	.word	0x58025480
 8004300:	58025494 	.word	0x58025494

08004304 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08a      	sub	sp, #40	; 0x28
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004310:	4b67      	ldr	r3, [pc, #412]	; (80044b0 <HAL_DMA_IRQHandler+0x1ac>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a67      	ldr	r2, [pc, #412]	; (80044b4 <HAL_DMA_IRQHandler+0x1b0>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	0a9b      	lsrs	r3, r3, #10
 800431c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004322:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004328:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a5f      	ldr	r2, [pc, #380]	; (80044b8 <HAL_DMA_IRQHandler+0x1b4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d04a      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a5d      	ldr	r2, [pc, #372]	; (80044bc <HAL_DMA_IRQHandler+0x1b8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d045      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a5c      	ldr	r2, [pc, #368]	; (80044c0 <HAL_DMA_IRQHandler+0x1bc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d040      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a5a      	ldr	r2, [pc, #360]	; (80044c4 <HAL_DMA_IRQHandler+0x1c0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d03b      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a59      	ldr	r2, [pc, #356]	; (80044c8 <HAL_DMA_IRQHandler+0x1c4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d036      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a57      	ldr	r2, [pc, #348]	; (80044cc <HAL_DMA_IRQHandler+0x1c8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d031      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a56      	ldr	r2, [pc, #344]	; (80044d0 <HAL_DMA_IRQHandler+0x1cc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d02c      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a54      	ldr	r2, [pc, #336]	; (80044d4 <HAL_DMA_IRQHandler+0x1d0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d027      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a53      	ldr	r2, [pc, #332]	; (80044d8 <HAL_DMA_IRQHandler+0x1d4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d022      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a51      	ldr	r2, [pc, #324]	; (80044dc <HAL_DMA_IRQHandler+0x1d8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d01d      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a50      	ldr	r2, [pc, #320]	; (80044e0 <HAL_DMA_IRQHandler+0x1dc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d018      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a4e      	ldr	r2, [pc, #312]	; (80044e4 <HAL_DMA_IRQHandler+0x1e0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d013      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a4d      	ldr	r2, [pc, #308]	; (80044e8 <HAL_DMA_IRQHandler+0x1e4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00e      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a4b      	ldr	r2, [pc, #300]	; (80044ec <HAL_DMA_IRQHandler+0x1e8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d009      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a4a      	ldr	r2, [pc, #296]	; (80044f0 <HAL_DMA_IRQHandler+0x1ec>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d004      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a48      	ldr	r2, [pc, #288]	; (80044f4 <HAL_DMA_IRQHandler+0x1f0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d101      	bne.n	80043da <HAL_DMA_IRQHandler+0xd6>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <HAL_DMA_IRQHandler+0xd8>
 80043da:	2300      	movs	r3, #0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 842b 	beq.w	8004c38 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	2208      	movs	r2, #8
 80043ec:	409a      	lsls	r2, r3
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 80a2 	beq.w	800453c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2e      	ldr	r2, [pc, #184]	; (80044b8 <HAL_DMA_IRQHandler+0x1b4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d04a      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2d      	ldr	r2, [pc, #180]	; (80044bc <HAL_DMA_IRQHandler+0x1b8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d045      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2b      	ldr	r2, [pc, #172]	; (80044c0 <HAL_DMA_IRQHandler+0x1bc>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d040      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a2a      	ldr	r2, [pc, #168]	; (80044c4 <HAL_DMA_IRQHandler+0x1c0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d03b      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a28      	ldr	r2, [pc, #160]	; (80044c8 <HAL_DMA_IRQHandler+0x1c4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d036      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a27      	ldr	r2, [pc, #156]	; (80044cc <HAL_DMA_IRQHandler+0x1c8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d031      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a25      	ldr	r2, [pc, #148]	; (80044d0 <HAL_DMA_IRQHandler+0x1cc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d02c      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a24      	ldr	r2, [pc, #144]	; (80044d4 <HAL_DMA_IRQHandler+0x1d0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d027      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a22      	ldr	r2, [pc, #136]	; (80044d8 <HAL_DMA_IRQHandler+0x1d4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d022      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a21      	ldr	r2, [pc, #132]	; (80044dc <HAL_DMA_IRQHandler+0x1d8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d01d      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1f      	ldr	r2, [pc, #124]	; (80044e0 <HAL_DMA_IRQHandler+0x1dc>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d018      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1e      	ldr	r2, [pc, #120]	; (80044e4 <HAL_DMA_IRQHandler+0x1e0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d013      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1c      	ldr	r2, [pc, #112]	; (80044e8 <HAL_DMA_IRQHandler+0x1e4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00e      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1b      	ldr	r2, [pc, #108]	; (80044ec <HAL_DMA_IRQHandler+0x1e8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d009      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a19      	ldr	r2, [pc, #100]	; (80044f0 <HAL_DMA_IRQHandler+0x1ec>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d004      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a18      	ldr	r2, [pc, #96]	; (80044f4 <HAL_DMA_IRQHandler+0x1f0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d12f      	bne.n	80044f8 <HAL_DMA_IRQHandler+0x1f4>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	bf14      	ite	ne
 80044a6:	2301      	movne	r3, #1
 80044a8:	2300      	moveq	r3, #0
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	e02e      	b.n	800450c <HAL_DMA_IRQHandler+0x208>
 80044ae:	bf00      	nop
 80044b0:	20000028 	.word	0x20000028
 80044b4:	1b4e81b5 	.word	0x1b4e81b5
 80044b8:	40020010 	.word	0x40020010
 80044bc:	40020028 	.word	0x40020028
 80044c0:	40020040 	.word	0x40020040
 80044c4:	40020058 	.word	0x40020058
 80044c8:	40020070 	.word	0x40020070
 80044cc:	40020088 	.word	0x40020088
 80044d0:	400200a0 	.word	0x400200a0
 80044d4:	400200b8 	.word	0x400200b8
 80044d8:	40020410 	.word	0x40020410
 80044dc:	40020428 	.word	0x40020428
 80044e0:	40020440 	.word	0x40020440
 80044e4:	40020458 	.word	0x40020458
 80044e8:	40020470 	.word	0x40020470
 80044ec:	40020488 	.word	0x40020488
 80044f0:	400204a0 	.word	0x400204a0
 80044f4:	400204b8 	.word	0x400204b8
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	bf14      	ite	ne
 8004506:	2301      	movne	r3, #1
 8004508:	2300      	moveq	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d015      	beq.n	800453c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0204 	bic.w	r2, r2, #4
 800451e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	2208      	movs	r2, #8
 800452a:	409a      	lsls	r2, r3
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004534:	f043 0201 	orr.w	r2, r3, #1
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	fa22 f303 	lsr.w	r3, r2, r3
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d06e      	beq.n	8004630 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a69      	ldr	r2, [pc, #420]	; (80046fc <HAL_DMA_IRQHandler+0x3f8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d04a      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a67      	ldr	r2, [pc, #412]	; (8004700 <HAL_DMA_IRQHandler+0x3fc>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d045      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a66      	ldr	r2, [pc, #408]	; (8004704 <HAL_DMA_IRQHandler+0x400>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d040      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a64      	ldr	r2, [pc, #400]	; (8004708 <HAL_DMA_IRQHandler+0x404>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d03b      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a63      	ldr	r2, [pc, #396]	; (800470c <HAL_DMA_IRQHandler+0x408>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d036      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a61      	ldr	r2, [pc, #388]	; (8004710 <HAL_DMA_IRQHandler+0x40c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d031      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a60      	ldr	r2, [pc, #384]	; (8004714 <HAL_DMA_IRQHandler+0x410>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d02c      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a5e      	ldr	r2, [pc, #376]	; (8004718 <HAL_DMA_IRQHandler+0x414>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d027      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a5d      	ldr	r2, [pc, #372]	; (800471c <HAL_DMA_IRQHandler+0x418>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d022      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a5b      	ldr	r2, [pc, #364]	; (8004720 <HAL_DMA_IRQHandler+0x41c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d01d      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a5a      	ldr	r2, [pc, #360]	; (8004724 <HAL_DMA_IRQHandler+0x420>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d018      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a58      	ldr	r2, [pc, #352]	; (8004728 <HAL_DMA_IRQHandler+0x424>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d013      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a57      	ldr	r2, [pc, #348]	; (800472c <HAL_DMA_IRQHandler+0x428>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d00e      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a55      	ldr	r2, [pc, #340]	; (8004730 <HAL_DMA_IRQHandler+0x42c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d009      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a54      	ldr	r2, [pc, #336]	; (8004734 <HAL_DMA_IRQHandler+0x430>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d004      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a52      	ldr	r2, [pc, #328]	; (8004738 <HAL_DMA_IRQHandler+0x434>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10a      	bne.n	8004608 <HAL_DMA_IRQHandler+0x304>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	bf14      	ite	ne
 8004600:	2301      	movne	r3, #1
 8004602:	2300      	moveq	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	e003      	b.n	8004610 <HAL_DMA_IRQHandler+0x30c>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2300      	movs	r3, #0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00d      	beq.n	8004630 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004618:	f003 031f 	and.w	r3, r3, #31
 800461c:	2201      	movs	r2, #1
 800461e:	409a      	lsls	r2, r3
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	f043 0202 	orr.w	r2, r3, #2
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004634:	f003 031f 	and.w	r3, r3, #31
 8004638:	2204      	movs	r2, #4
 800463a:	409a      	lsls	r2, r3
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	4013      	ands	r3, r2
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 808f 	beq.w	8004764 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a2c      	ldr	r2, [pc, #176]	; (80046fc <HAL_DMA_IRQHandler+0x3f8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d04a      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a2a      	ldr	r2, [pc, #168]	; (8004700 <HAL_DMA_IRQHandler+0x3fc>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d045      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a29      	ldr	r2, [pc, #164]	; (8004704 <HAL_DMA_IRQHandler+0x400>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d040      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a27      	ldr	r2, [pc, #156]	; (8004708 <HAL_DMA_IRQHandler+0x404>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d03b      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a26      	ldr	r2, [pc, #152]	; (800470c <HAL_DMA_IRQHandler+0x408>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d036      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a24      	ldr	r2, [pc, #144]	; (8004710 <HAL_DMA_IRQHandler+0x40c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d031      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a23      	ldr	r2, [pc, #140]	; (8004714 <HAL_DMA_IRQHandler+0x410>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d02c      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a21      	ldr	r2, [pc, #132]	; (8004718 <HAL_DMA_IRQHandler+0x414>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d027      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a20      	ldr	r2, [pc, #128]	; (800471c <HAL_DMA_IRQHandler+0x418>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d022      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1e      	ldr	r2, [pc, #120]	; (8004720 <HAL_DMA_IRQHandler+0x41c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d01d      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1d      	ldr	r2, [pc, #116]	; (8004724 <HAL_DMA_IRQHandler+0x420>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d018      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1b      	ldr	r2, [pc, #108]	; (8004728 <HAL_DMA_IRQHandler+0x424>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d013      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a1a      	ldr	r2, [pc, #104]	; (800472c <HAL_DMA_IRQHandler+0x428>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00e      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a18      	ldr	r2, [pc, #96]	; (8004730 <HAL_DMA_IRQHandler+0x42c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d009      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a17      	ldr	r2, [pc, #92]	; (8004734 <HAL_DMA_IRQHandler+0x430>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d004      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a15      	ldr	r2, [pc, #84]	; (8004738 <HAL_DMA_IRQHandler+0x434>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d12a      	bne.n	800473c <HAL_DMA_IRQHandler+0x438>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	e023      	b.n	8004744 <HAL_DMA_IRQHandler+0x440>
 80046fc:	40020010 	.word	0x40020010
 8004700:	40020028 	.word	0x40020028
 8004704:	40020040 	.word	0x40020040
 8004708:	40020058 	.word	0x40020058
 800470c:	40020070 	.word	0x40020070
 8004710:	40020088 	.word	0x40020088
 8004714:	400200a0 	.word	0x400200a0
 8004718:	400200b8 	.word	0x400200b8
 800471c:	40020410 	.word	0x40020410
 8004720:	40020428 	.word	0x40020428
 8004724:	40020440 	.word	0x40020440
 8004728:	40020458 	.word	0x40020458
 800472c:	40020470 	.word	0x40020470
 8004730:	40020488 	.word	0x40020488
 8004734:	400204a0 	.word	0x400204a0
 8004738:	400204b8 	.word	0x400204b8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2300      	movs	r3, #0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00d      	beq.n	8004764 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474c:	f003 031f 	and.w	r3, r3, #31
 8004750:	2204      	movs	r2, #4
 8004752:	409a      	lsls	r2, r3
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475c:	f043 0204 	orr.w	r2, r3, #4
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	2210      	movs	r2, #16
 800476e:	409a      	lsls	r2, r3
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	4013      	ands	r3, r2
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80a6 	beq.w	80048c6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a85      	ldr	r2, [pc, #532]	; (8004994 <HAL_DMA_IRQHandler+0x690>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d04a      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a83      	ldr	r2, [pc, #524]	; (8004998 <HAL_DMA_IRQHandler+0x694>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d045      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a82      	ldr	r2, [pc, #520]	; (800499c <HAL_DMA_IRQHandler+0x698>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d040      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a80      	ldr	r2, [pc, #512]	; (80049a0 <HAL_DMA_IRQHandler+0x69c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d03b      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a7f      	ldr	r2, [pc, #508]	; (80049a4 <HAL_DMA_IRQHandler+0x6a0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d036      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a7d      	ldr	r2, [pc, #500]	; (80049a8 <HAL_DMA_IRQHandler+0x6a4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d031      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a7c      	ldr	r2, [pc, #496]	; (80049ac <HAL_DMA_IRQHandler+0x6a8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d02c      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a7a      	ldr	r2, [pc, #488]	; (80049b0 <HAL_DMA_IRQHandler+0x6ac>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d027      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a79      	ldr	r2, [pc, #484]	; (80049b4 <HAL_DMA_IRQHandler+0x6b0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d022      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a77      	ldr	r2, [pc, #476]	; (80049b8 <HAL_DMA_IRQHandler+0x6b4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01d      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a76      	ldr	r2, [pc, #472]	; (80049bc <HAL_DMA_IRQHandler+0x6b8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d018      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a74      	ldr	r2, [pc, #464]	; (80049c0 <HAL_DMA_IRQHandler+0x6bc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d013      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a73      	ldr	r2, [pc, #460]	; (80049c4 <HAL_DMA_IRQHandler+0x6c0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00e      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a71      	ldr	r2, [pc, #452]	; (80049c8 <HAL_DMA_IRQHandler+0x6c4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d009      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a70      	ldr	r2, [pc, #448]	; (80049cc <HAL_DMA_IRQHandler+0x6c8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d004      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a6e      	ldr	r2, [pc, #440]	; (80049d0 <HAL_DMA_IRQHandler+0x6cc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d10a      	bne.n	8004830 <HAL_DMA_IRQHandler+0x52c>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	bf14      	ite	ne
 8004828:	2301      	movne	r3, #1
 800482a:	2300      	moveq	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	e009      	b.n	8004844 <HAL_DMA_IRQHandler+0x540>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b00      	cmp	r3, #0
 800483c:	bf14      	ite	ne
 800483e:	2301      	movne	r3, #1
 8004840:	2300      	moveq	r3, #0
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d03e      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484c:	f003 031f 	and.w	r3, r3, #31
 8004850:	2210      	movs	r2, #16
 8004852:	409a      	lsls	r2, r3
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d018      	beq.n	8004898 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d108      	bne.n	8004886 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	2b00      	cmp	r3, #0
 800487a:	d024      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	4798      	blx	r3
 8004884:	e01f      	b.n	80048c6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488a:	2b00      	cmp	r3, #0
 800488c:	d01b      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	4798      	blx	r3
 8004896:	e016      	b.n	80048c6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d107      	bne.n	80048b6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0208 	bic.w	r2, r2, #8
 80048b4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	2220      	movs	r2, #32
 80048d0:	409a      	lsls	r2, r3
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 8110 	beq.w	8004afc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2c      	ldr	r2, [pc, #176]	; (8004994 <HAL_DMA_IRQHandler+0x690>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d04a      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2b      	ldr	r2, [pc, #172]	; (8004998 <HAL_DMA_IRQHandler+0x694>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d045      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a29      	ldr	r2, [pc, #164]	; (800499c <HAL_DMA_IRQHandler+0x698>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d040      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a28      	ldr	r2, [pc, #160]	; (80049a0 <HAL_DMA_IRQHandler+0x69c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d03b      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a26      	ldr	r2, [pc, #152]	; (80049a4 <HAL_DMA_IRQHandler+0x6a0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d036      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a25      	ldr	r2, [pc, #148]	; (80049a8 <HAL_DMA_IRQHandler+0x6a4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d031      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a23      	ldr	r2, [pc, #140]	; (80049ac <HAL_DMA_IRQHandler+0x6a8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d02c      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a22      	ldr	r2, [pc, #136]	; (80049b0 <HAL_DMA_IRQHandler+0x6ac>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d027      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a20      	ldr	r2, [pc, #128]	; (80049b4 <HAL_DMA_IRQHandler+0x6b0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d022      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1f      	ldr	r2, [pc, #124]	; (80049b8 <HAL_DMA_IRQHandler+0x6b4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d01d      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1d      	ldr	r2, [pc, #116]	; (80049bc <HAL_DMA_IRQHandler+0x6b8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d018      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1c      	ldr	r2, [pc, #112]	; (80049c0 <HAL_DMA_IRQHandler+0x6bc>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d013      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a1a      	ldr	r2, [pc, #104]	; (80049c4 <HAL_DMA_IRQHandler+0x6c0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00e      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a19      	ldr	r2, [pc, #100]	; (80049c8 <HAL_DMA_IRQHandler+0x6c4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d009      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a17      	ldr	r2, [pc, #92]	; (80049cc <HAL_DMA_IRQHandler+0x6c8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d004      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a16      	ldr	r2, [pc, #88]	; (80049d0 <HAL_DMA_IRQHandler+0x6cc>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d12b      	bne.n	80049d4 <HAL_DMA_IRQHandler+0x6d0>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	2b00      	cmp	r3, #0
 8004988:	bf14      	ite	ne
 800498a:	2301      	movne	r3, #1
 800498c:	2300      	moveq	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	e02a      	b.n	80049e8 <HAL_DMA_IRQHandler+0x6e4>
 8004992:	bf00      	nop
 8004994:	40020010 	.word	0x40020010
 8004998:	40020028 	.word	0x40020028
 800499c:	40020040 	.word	0x40020040
 80049a0:	40020058 	.word	0x40020058
 80049a4:	40020070 	.word	0x40020070
 80049a8:	40020088 	.word	0x40020088
 80049ac:	400200a0 	.word	0x400200a0
 80049b0:	400200b8 	.word	0x400200b8
 80049b4:	40020410 	.word	0x40020410
 80049b8:	40020428 	.word	0x40020428
 80049bc:	40020440 	.word	0x40020440
 80049c0:	40020458 	.word	0x40020458
 80049c4:	40020470 	.word	0x40020470
 80049c8:	40020488 	.word	0x40020488
 80049cc:	400204a0 	.word	0x400204a0
 80049d0:	400204b8 	.word	0x400204b8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	bf14      	ite	ne
 80049e2:	2301      	movne	r3, #1
 80049e4:	2300      	moveq	r3, #0
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8087 	beq.w	8004afc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	2220      	movs	r2, #32
 80049f8:	409a      	lsls	r2, r3
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d139      	bne.n	8004a7e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0216 	bic.w	r2, r2, #22
 8004a18:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695a      	ldr	r2, [r3, #20]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a28:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d103      	bne.n	8004a3a <HAL_DMA_IRQHandler+0x736>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d007      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0208 	bic.w	r2, r2, #8
 8004a48:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4e:	f003 031f 	and.w	r3, r3, #31
 8004a52:	223f      	movs	r2, #63	; 0x3f
 8004a54:	409a      	lsls	r2, r3
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 8382 	beq.w	8005178 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	4798      	blx	r3
          }
          return;
 8004a7c:	e37c      	b.n	8005178 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d018      	beq.n	8004abe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d108      	bne.n	8004aac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d02c      	beq.n	8004afc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
 8004aaa:	e027      	b.n	8004afc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d023      	beq.n	8004afc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	4798      	blx	r3
 8004abc:	e01e      	b.n	8004afc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10f      	bne.n	8004aec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0210 	bic.w	r2, r2, #16
 8004ada:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 833e 	beq.w	8005182 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 8088 	beq.w	8004c24 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2204      	movs	r2, #4
 8004b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a8e      	ldr	r2, [pc, #568]	; (8004d5c <HAL_DMA_IRQHandler+0xa58>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d04a      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a8d      	ldr	r2, [pc, #564]	; (8004d60 <HAL_DMA_IRQHandler+0xa5c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d045      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a8b      	ldr	r2, [pc, #556]	; (8004d64 <HAL_DMA_IRQHandler+0xa60>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d040      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a8a      	ldr	r2, [pc, #552]	; (8004d68 <HAL_DMA_IRQHandler+0xa64>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d03b      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a88      	ldr	r2, [pc, #544]	; (8004d6c <HAL_DMA_IRQHandler+0xa68>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d036      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a87      	ldr	r2, [pc, #540]	; (8004d70 <HAL_DMA_IRQHandler+0xa6c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d031      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a85      	ldr	r2, [pc, #532]	; (8004d74 <HAL_DMA_IRQHandler+0xa70>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d02c      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a84      	ldr	r2, [pc, #528]	; (8004d78 <HAL_DMA_IRQHandler+0xa74>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d027      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a82      	ldr	r2, [pc, #520]	; (8004d7c <HAL_DMA_IRQHandler+0xa78>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d022      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a81      	ldr	r2, [pc, #516]	; (8004d80 <HAL_DMA_IRQHandler+0xa7c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d01d      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a7f      	ldr	r2, [pc, #508]	; (8004d84 <HAL_DMA_IRQHandler+0xa80>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d018      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a7e      	ldr	r2, [pc, #504]	; (8004d88 <HAL_DMA_IRQHandler+0xa84>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d013      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a7c      	ldr	r2, [pc, #496]	; (8004d8c <HAL_DMA_IRQHandler+0xa88>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00e      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a7b      	ldr	r2, [pc, #492]	; (8004d90 <HAL_DMA_IRQHandler+0xa8c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d009      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a79      	ldr	r2, [pc, #484]	; (8004d94 <HAL_DMA_IRQHandler+0xa90>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d004      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a78      	ldr	r2, [pc, #480]	; (8004d98 <HAL_DMA_IRQHandler+0xa94>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d108      	bne.n	8004bce <HAL_DMA_IRQHandler+0x8ca>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0201 	bic.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e007      	b.n	8004bde <HAL_DMA_IRQHandler+0x8da>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0201 	bic.w	r2, r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3301      	adds	r3, #1
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d307      	bcc.n	8004bfa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1f2      	bne.n	8004bde <HAL_DMA_IRQHandler+0x8da>
 8004bf8:	e000      	b.n	8004bfc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004bfa:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d004      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2203      	movs	r2, #3
 8004c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004c1a:	e003      	b.n	8004c24 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 82aa 	beq.w	8005182 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	4798      	blx	r3
 8004c36:	e2a4      	b.n	8005182 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a57      	ldr	r2, [pc, #348]	; (8004d9c <HAL_DMA_IRQHandler+0xa98>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d04a      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x9d4>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a56      	ldr	r2, [pc, #344]	; (8004da0 <HAL_DMA_IRQHandler+0xa9c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d045      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x9d4>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a54      	ldr	r2, [pc, #336]	; (8004da4 <HAL_DMA_IRQHandler+0xaa0>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d040      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x9d4>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a53      	ldr	r2, [pc, #332]	; (8004da8 <HAL_DMA_IRQHandler+0xaa4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d03b      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x9d4>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a51      	ldr	r2, [pc, #324]	; (8004dac <HAL_DMA_IRQHandler+0xaa8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d036      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x9d4>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a50      	ldr	r2, [pc, #320]	; (8004db0 <HAL_DMA_IRQHandler+0xaac>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d031      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x9d4>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a4e      	ldr	r2, [pc, #312]	; (8004db4 <HAL_DMA_IRQHandler+0xab0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d02c      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x9d4>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a4d      	ldr	r2, [pc, #308]	; (8004db8 <HAL_DMA_IRQHandler+0xab4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d027      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x9d4>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a4b      	ldr	r2, [pc, #300]	; (8004dbc <HAL_DMA_IRQHandler+0xab8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d022      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x9d4>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a4a      	ldr	r2, [pc, #296]	; (8004dc0 <HAL_DMA_IRQHandler+0xabc>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d01d      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x9d4>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a48      	ldr	r2, [pc, #288]	; (8004dc4 <HAL_DMA_IRQHandler+0xac0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d018      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x9d4>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a47      	ldr	r2, [pc, #284]	; (8004dc8 <HAL_DMA_IRQHandler+0xac4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d013      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x9d4>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a45      	ldr	r2, [pc, #276]	; (8004dcc <HAL_DMA_IRQHandler+0xac8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00e      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x9d4>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a44      	ldr	r2, [pc, #272]	; (8004dd0 <HAL_DMA_IRQHandler+0xacc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d009      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x9d4>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a42      	ldr	r2, [pc, #264]	; (8004dd4 <HAL_DMA_IRQHandler+0xad0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d004      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x9d4>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a41      	ldr	r2, [pc, #260]	; (8004dd8 <HAL_DMA_IRQHandler+0xad4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d101      	bne.n	8004cdc <HAL_DMA_IRQHandler+0x9d8>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e000      	b.n	8004cde <HAL_DMA_IRQHandler+0x9da>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 824f 	beq.w	8005182 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf0:	f003 031f 	and.w	r3, r3, #31
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	409a      	lsls	r2, r3
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 80dd 	beq.w	8004ebc <HAL_DMA_IRQHandler+0xbb8>
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80d7 	beq.w	8004ebc <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d12:	f003 031f 	and.w	r3, r3, #31
 8004d16:	2204      	movs	r2, #4
 8004d18:	409a      	lsls	r2, r3
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d059      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <HAL_DMA_IRQHandler+0xa42>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 8220 	beq.w	800517c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d44:	e21a      	b.n	800517c <HAL_DMA_IRQHandler+0xe78>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 8216 	beq.w	800517c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d58:	e210      	b.n	800517c <HAL_DMA_IRQHandler+0xe78>
 8004d5a:	bf00      	nop
 8004d5c:	40020010 	.word	0x40020010
 8004d60:	40020028 	.word	0x40020028
 8004d64:	40020040 	.word	0x40020040
 8004d68:	40020058 	.word	0x40020058
 8004d6c:	40020070 	.word	0x40020070
 8004d70:	40020088 	.word	0x40020088
 8004d74:	400200a0 	.word	0x400200a0
 8004d78:	400200b8 	.word	0x400200b8
 8004d7c:	40020410 	.word	0x40020410
 8004d80:	40020428 	.word	0x40020428
 8004d84:	40020440 	.word	0x40020440
 8004d88:	40020458 	.word	0x40020458
 8004d8c:	40020470 	.word	0x40020470
 8004d90:	40020488 	.word	0x40020488
 8004d94:	400204a0 	.word	0x400204a0
 8004d98:	400204b8 	.word	0x400204b8
 8004d9c:	48022c08 	.word	0x48022c08
 8004da0:	48022c1c 	.word	0x48022c1c
 8004da4:	48022c30 	.word	0x48022c30
 8004da8:	48022c44 	.word	0x48022c44
 8004dac:	48022c58 	.word	0x48022c58
 8004db0:	48022c6c 	.word	0x48022c6c
 8004db4:	48022c80 	.word	0x48022c80
 8004db8:	48022c94 	.word	0x48022c94
 8004dbc:	58025408 	.word	0x58025408
 8004dc0:	5802541c 	.word	0x5802541c
 8004dc4:	58025430 	.word	0x58025430
 8004dc8:	58025444 	.word	0x58025444
 8004dcc:	58025458 	.word	0x58025458
 8004dd0:	5802546c 	.word	0x5802546c
 8004dd4:	58025480 	.word	0x58025480
 8004dd8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d160      	bne.n	8004ea8 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a8c      	ldr	r2, [pc, #560]	; (800501c <HAL_DMA_IRQHandler+0xd18>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d04a      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb82>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a8a      	ldr	r2, [pc, #552]	; (8005020 <HAL_DMA_IRQHandler+0xd1c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d045      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb82>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a89      	ldr	r2, [pc, #548]	; (8005024 <HAL_DMA_IRQHandler+0xd20>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d040      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb82>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a87      	ldr	r2, [pc, #540]	; (8005028 <HAL_DMA_IRQHandler+0xd24>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d03b      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb82>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a86      	ldr	r2, [pc, #536]	; (800502c <HAL_DMA_IRQHandler+0xd28>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d036      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb82>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a84      	ldr	r2, [pc, #528]	; (8005030 <HAL_DMA_IRQHandler+0xd2c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d031      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb82>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a83      	ldr	r2, [pc, #524]	; (8005034 <HAL_DMA_IRQHandler+0xd30>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d02c      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb82>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a81      	ldr	r2, [pc, #516]	; (8005038 <HAL_DMA_IRQHandler+0xd34>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d027      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb82>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a80      	ldr	r2, [pc, #512]	; (800503c <HAL_DMA_IRQHandler+0xd38>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d022      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb82>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a7e      	ldr	r2, [pc, #504]	; (8005040 <HAL_DMA_IRQHandler+0xd3c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01d      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb82>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a7d      	ldr	r2, [pc, #500]	; (8005044 <HAL_DMA_IRQHandler+0xd40>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d018      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb82>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a7b      	ldr	r2, [pc, #492]	; (8005048 <HAL_DMA_IRQHandler+0xd44>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb82>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a7a      	ldr	r2, [pc, #488]	; (800504c <HAL_DMA_IRQHandler+0xd48>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00e      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb82>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a78      	ldr	r2, [pc, #480]	; (8005050 <HAL_DMA_IRQHandler+0xd4c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d009      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb82>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a77      	ldr	r2, [pc, #476]	; (8005054 <HAL_DMA_IRQHandler+0xd50>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d004      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb82>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a75      	ldr	r2, [pc, #468]	; (8005058 <HAL_DMA_IRQHandler+0xd54>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d108      	bne.n	8004e98 <HAL_DMA_IRQHandler+0xb94>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0208 	bic.w	r2, r2, #8
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	e007      	b.n	8004ea8 <HAL_DMA_IRQHandler+0xba4>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0204 	bic.w	r2, r2, #4
 8004ea6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 8165 	beq.w	800517c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eba:	e15f      	b.n	800517c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec0:	f003 031f 	and.w	r3, r3, #31
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	409a      	lsls	r2, r3
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 80c5 	beq.w	800505c <HAL_DMA_IRQHandler+0xd58>
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 80bf 	beq.w	800505c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee2:	f003 031f 	and.w	r3, r3, #31
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d018      	beq.n	8004f2a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 813a 	beq.w	8005180 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f14:	e134      	b.n	8005180 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 8130 	beq.w	8005180 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f28:	e12a      	b.n	8005180 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d168      	bne.n	8005006 <HAL_DMA_IRQHandler+0xd02>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a38      	ldr	r2, [pc, #224]	; (800501c <HAL_DMA_IRQHandler+0xd18>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d04a      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xcd0>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a37      	ldr	r2, [pc, #220]	; (8005020 <HAL_DMA_IRQHandler+0xd1c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d045      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xcd0>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a35      	ldr	r2, [pc, #212]	; (8005024 <HAL_DMA_IRQHandler+0xd20>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d040      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xcd0>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a34      	ldr	r2, [pc, #208]	; (8005028 <HAL_DMA_IRQHandler+0xd24>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d03b      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xcd0>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a32      	ldr	r2, [pc, #200]	; (800502c <HAL_DMA_IRQHandler+0xd28>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d036      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xcd0>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a31      	ldr	r2, [pc, #196]	; (8005030 <HAL_DMA_IRQHandler+0xd2c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d031      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xcd0>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a2f      	ldr	r2, [pc, #188]	; (8005034 <HAL_DMA_IRQHandler+0xd30>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d02c      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xcd0>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a2e      	ldr	r2, [pc, #184]	; (8005038 <HAL_DMA_IRQHandler+0xd34>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d027      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xcd0>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a2c      	ldr	r2, [pc, #176]	; (800503c <HAL_DMA_IRQHandler+0xd38>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d022      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xcd0>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a2b      	ldr	r2, [pc, #172]	; (8005040 <HAL_DMA_IRQHandler+0xd3c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d01d      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xcd0>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a29      	ldr	r2, [pc, #164]	; (8005044 <HAL_DMA_IRQHandler+0xd40>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d018      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xcd0>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a28      	ldr	r2, [pc, #160]	; (8005048 <HAL_DMA_IRQHandler+0xd44>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d013      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xcd0>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a26      	ldr	r2, [pc, #152]	; (800504c <HAL_DMA_IRQHandler+0xd48>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00e      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xcd0>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a25      	ldr	r2, [pc, #148]	; (8005050 <HAL_DMA_IRQHandler+0xd4c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d009      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xcd0>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a23      	ldr	r2, [pc, #140]	; (8005054 <HAL_DMA_IRQHandler+0xd50>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d004      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xcd0>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a22      	ldr	r2, [pc, #136]	; (8005058 <HAL_DMA_IRQHandler+0xd54>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d108      	bne.n	8004fe6 <HAL_DMA_IRQHandler+0xce2>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0214 	bic.w	r2, r2, #20
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e007      	b.n	8004ff6 <HAL_DMA_IRQHandler+0xcf2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 020a 	bic.w	r2, r2, #10
 8004ff4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 80b8 	beq.w	8005180 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005018:	e0b2      	b.n	8005180 <HAL_DMA_IRQHandler+0xe7c>
 800501a:	bf00      	nop
 800501c:	40020010 	.word	0x40020010
 8005020:	40020028 	.word	0x40020028
 8005024:	40020040 	.word	0x40020040
 8005028:	40020058 	.word	0x40020058
 800502c:	40020070 	.word	0x40020070
 8005030:	40020088 	.word	0x40020088
 8005034:	400200a0 	.word	0x400200a0
 8005038:	400200b8 	.word	0x400200b8
 800503c:	40020410 	.word	0x40020410
 8005040:	40020428 	.word	0x40020428
 8005044:	40020440 	.word	0x40020440
 8005048:	40020458 	.word	0x40020458
 800504c:	40020470 	.word	0x40020470
 8005050:	40020488 	.word	0x40020488
 8005054:	400204a0 	.word	0x400204a0
 8005058:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005060:	f003 031f 	and.w	r3, r3, #31
 8005064:	2208      	movs	r2, #8
 8005066:	409a      	lsls	r2, r3
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	4013      	ands	r3, r2
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8088 	beq.w	8005182 <HAL_DMA_IRQHandler+0xe7e>
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f003 0308 	and.w	r3, r3, #8
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 8082 	beq.w	8005182 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a41      	ldr	r2, [pc, #260]	; (8005188 <HAL_DMA_IRQHandler+0xe84>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d04a      	beq.n	800511e <HAL_DMA_IRQHandler+0xe1a>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a3f      	ldr	r2, [pc, #252]	; (800518c <HAL_DMA_IRQHandler+0xe88>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d045      	beq.n	800511e <HAL_DMA_IRQHandler+0xe1a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a3e      	ldr	r2, [pc, #248]	; (8005190 <HAL_DMA_IRQHandler+0xe8c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d040      	beq.n	800511e <HAL_DMA_IRQHandler+0xe1a>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a3c      	ldr	r2, [pc, #240]	; (8005194 <HAL_DMA_IRQHandler+0xe90>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d03b      	beq.n	800511e <HAL_DMA_IRQHandler+0xe1a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a3b      	ldr	r2, [pc, #236]	; (8005198 <HAL_DMA_IRQHandler+0xe94>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d036      	beq.n	800511e <HAL_DMA_IRQHandler+0xe1a>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a39      	ldr	r2, [pc, #228]	; (800519c <HAL_DMA_IRQHandler+0xe98>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d031      	beq.n	800511e <HAL_DMA_IRQHandler+0xe1a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a38      	ldr	r2, [pc, #224]	; (80051a0 <HAL_DMA_IRQHandler+0xe9c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d02c      	beq.n	800511e <HAL_DMA_IRQHandler+0xe1a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a36      	ldr	r2, [pc, #216]	; (80051a4 <HAL_DMA_IRQHandler+0xea0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d027      	beq.n	800511e <HAL_DMA_IRQHandler+0xe1a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a35      	ldr	r2, [pc, #212]	; (80051a8 <HAL_DMA_IRQHandler+0xea4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d022      	beq.n	800511e <HAL_DMA_IRQHandler+0xe1a>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a33      	ldr	r2, [pc, #204]	; (80051ac <HAL_DMA_IRQHandler+0xea8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d01d      	beq.n	800511e <HAL_DMA_IRQHandler+0xe1a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a32      	ldr	r2, [pc, #200]	; (80051b0 <HAL_DMA_IRQHandler+0xeac>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d018      	beq.n	800511e <HAL_DMA_IRQHandler+0xe1a>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a30      	ldr	r2, [pc, #192]	; (80051b4 <HAL_DMA_IRQHandler+0xeb0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d013      	beq.n	800511e <HAL_DMA_IRQHandler+0xe1a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a2f      	ldr	r2, [pc, #188]	; (80051b8 <HAL_DMA_IRQHandler+0xeb4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00e      	beq.n	800511e <HAL_DMA_IRQHandler+0xe1a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a2d      	ldr	r2, [pc, #180]	; (80051bc <HAL_DMA_IRQHandler+0xeb8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d009      	beq.n	800511e <HAL_DMA_IRQHandler+0xe1a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a2c      	ldr	r2, [pc, #176]	; (80051c0 <HAL_DMA_IRQHandler+0xebc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d004      	beq.n	800511e <HAL_DMA_IRQHandler+0xe1a>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a2a      	ldr	r2, [pc, #168]	; (80051c4 <HAL_DMA_IRQHandler+0xec0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d108      	bne.n	8005130 <HAL_DMA_IRQHandler+0xe2c>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 021c 	bic.w	r2, r2, #28
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	e007      	b.n	8005140 <HAL_DMA_IRQHandler+0xe3c>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 020e 	bic.w	r2, r2, #14
 800513e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	2201      	movs	r2, #1
 800514a:	409a      	lsls	r2, r3
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516a:	2b00      	cmp	r3, #0
 800516c:	d009      	beq.n	8005182 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	4798      	blx	r3
 8005176:	e004      	b.n	8005182 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005178:	bf00      	nop
 800517a:	e002      	b.n	8005182 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800517c:	bf00      	nop
 800517e:	e000      	b.n	8005182 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005180:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005182:	3728      	adds	r7, #40	; 0x28
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40020010 	.word	0x40020010
 800518c:	40020028 	.word	0x40020028
 8005190:	40020040 	.word	0x40020040
 8005194:	40020058 	.word	0x40020058
 8005198:	40020070 	.word	0x40020070
 800519c:	40020088 	.word	0x40020088
 80051a0:	400200a0 	.word	0x400200a0
 80051a4:	400200b8 	.word	0x400200b8
 80051a8:	40020410 	.word	0x40020410
 80051ac:	40020428 	.word	0x40020428
 80051b0:	40020440 	.word	0x40020440
 80051b4:	40020458 	.word	0x40020458
 80051b8:	40020470 	.word	0x40020470
 80051bc:	40020488 	.word	0x40020488
 80051c0:	400204a0 	.word	0x400204a0
 80051c4:	400204b8 	.word	0x400204b8

080051c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a42      	ldr	r2, [pc, #264]	; (80052e0 <DMA_CalcBaseAndBitshift+0x118>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d04a      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a41      	ldr	r2, [pc, #260]	; (80052e4 <DMA_CalcBaseAndBitshift+0x11c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d045      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a3f      	ldr	r2, [pc, #252]	; (80052e8 <DMA_CalcBaseAndBitshift+0x120>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d040      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a3e      	ldr	r2, [pc, #248]	; (80052ec <DMA_CalcBaseAndBitshift+0x124>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d03b      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a3c      	ldr	r2, [pc, #240]	; (80052f0 <DMA_CalcBaseAndBitshift+0x128>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d036      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a3b      	ldr	r2, [pc, #236]	; (80052f4 <DMA_CalcBaseAndBitshift+0x12c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d031      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a39      	ldr	r2, [pc, #228]	; (80052f8 <DMA_CalcBaseAndBitshift+0x130>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d02c      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a38      	ldr	r2, [pc, #224]	; (80052fc <DMA_CalcBaseAndBitshift+0x134>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d027      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a36      	ldr	r2, [pc, #216]	; (8005300 <DMA_CalcBaseAndBitshift+0x138>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d022      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a35      	ldr	r2, [pc, #212]	; (8005304 <DMA_CalcBaseAndBitshift+0x13c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d01d      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a33      	ldr	r2, [pc, #204]	; (8005308 <DMA_CalcBaseAndBitshift+0x140>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d018      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a32      	ldr	r2, [pc, #200]	; (800530c <DMA_CalcBaseAndBitshift+0x144>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d013      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a30      	ldr	r2, [pc, #192]	; (8005310 <DMA_CalcBaseAndBitshift+0x148>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00e      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a2f      	ldr	r2, [pc, #188]	; (8005314 <DMA_CalcBaseAndBitshift+0x14c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d009      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a2d      	ldr	r2, [pc, #180]	; (8005318 <DMA_CalcBaseAndBitshift+0x150>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d004      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a2c      	ldr	r2, [pc, #176]	; (800531c <DMA_CalcBaseAndBitshift+0x154>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d101      	bne.n	8005274 <DMA_CalcBaseAndBitshift+0xac>
 8005270:	2301      	movs	r3, #1
 8005272:	e000      	b.n	8005276 <DMA_CalcBaseAndBitshift+0xae>
 8005274:	2300      	movs	r3, #0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d024      	beq.n	80052c4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	b2db      	uxtb	r3, r3
 8005280:	3b10      	subs	r3, #16
 8005282:	4a27      	ldr	r2, [pc, #156]	; (8005320 <DMA_CalcBaseAndBitshift+0x158>)
 8005284:	fba2 2303 	umull	r2, r3, r2, r3
 8005288:	091b      	lsrs	r3, r3, #4
 800528a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	4a24      	ldr	r2, [pc, #144]	; (8005324 <DMA_CalcBaseAndBitshift+0x15c>)
 8005294:	5cd3      	ldrb	r3, [r2, r3]
 8005296:	461a      	mov	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d908      	bls.n	80052b4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	4b1f      	ldr	r3, [pc, #124]	; (8005328 <DMA_CalcBaseAndBitshift+0x160>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	1d1a      	adds	r2, r3, #4
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	659a      	str	r2, [r3, #88]	; 0x58
 80052b2:	e00d      	b.n	80052d0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	461a      	mov	r2, r3
 80052ba:	4b1b      	ldr	r3, [pc, #108]	; (8005328 <DMA_CalcBaseAndBitshift+0x160>)
 80052bc:	4013      	ands	r3, r2
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6593      	str	r3, [r2, #88]	; 0x58
 80052c2:	e005      	b.n	80052d0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	40020010 	.word	0x40020010
 80052e4:	40020028 	.word	0x40020028
 80052e8:	40020040 	.word	0x40020040
 80052ec:	40020058 	.word	0x40020058
 80052f0:	40020070 	.word	0x40020070
 80052f4:	40020088 	.word	0x40020088
 80052f8:	400200a0 	.word	0x400200a0
 80052fc:	400200b8 	.word	0x400200b8
 8005300:	40020410 	.word	0x40020410
 8005304:	40020428 	.word	0x40020428
 8005308:	40020440 	.word	0x40020440
 800530c:	40020458 	.word	0x40020458
 8005310:	40020470 	.word	0x40020470
 8005314:	40020488 	.word	0x40020488
 8005318:	400204a0 	.word	0x400204a0
 800531c:	400204b8 	.word	0x400204b8
 8005320:	aaaaaaab 	.word	0xaaaaaaab
 8005324:	0800db20 	.word	0x0800db20
 8005328:	fffffc00 	.word	0xfffffc00

0800532c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d120      	bne.n	8005382 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	2b03      	cmp	r3, #3
 8005346:	d858      	bhi.n	80053fa <DMA_CheckFifoParam+0xce>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <DMA_CheckFifoParam+0x24>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005361 	.word	0x08005361
 8005354:	08005373 	.word	0x08005373
 8005358:	08005361 	.word	0x08005361
 800535c:	080053fb 	.word	0x080053fb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d048      	beq.n	80053fe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005370:	e045      	b.n	80053fe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005376:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800537a:	d142      	bne.n	8005402 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005380:	e03f      	b.n	8005402 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800538a:	d123      	bne.n	80053d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005390:	2b03      	cmp	r3, #3
 8005392:	d838      	bhi.n	8005406 <DMA_CheckFifoParam+0xda>
 8005394:	a201      	add	r2, pc, #4	; (adr r2, 800539c <DMA_CheckFifoParam+0x70>)
 8005396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539a:	bf00      	nop
 800539c:	080053ad 	.word	0x080053ad
 80053a0:	080053b3 	.word	0x080053b3
 80053a4:	080053ad 	.word	0x080053ad
 80053a8:	080053c5 	.word	0x080053c5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
        break;
 80053b0:	e030      	b.n	8005414 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d025      	beq.n	800540a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053c2:	e022      	b.n	800540a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053cc:	d11f      	bne.n	800540e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053d2:	e01c      	b.n	800540e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d902      	bls.n	80053e2 <DMA_CheckFifoParam+0xb6>
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d003      	beq.n	80053e8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80053e0:	e018      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	73fb      	strb	r3, [r7, #15]
        break;
 80053e6:	e015      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00e      	beq.n	8005412 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	73fb      	strb	r3, [r7, #15]
    break;
 80053f8:	e00b      	b.n	8005412 <DMA_CheckFifoParam+0xe6>
        break;
 80053fa:	bf00      	nop
 80053fc:	e00a      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
        break;
 80053fe:	bf00      	nop
 8005400:	e008      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
        break;
 8005402:	bf00      	nop
 8005404:	e006      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
        break;
 8005406:	bf00      	nop
 8005408:	e004      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
        break;
 800540a:	bf00      	nop
 800540c:	e002      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
        break;
 800540e:	bf00      	nop
 8005410:	e000      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
    break;
 8005412:	bf00      	nop
    }
  }

  return status;
 8005414:	7bfb      	ldrb	r3, [r7, #15]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop

08005424 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a38      	ldr	r2, [pc, #224]	; (8005518 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d022      	beq.n	8005482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a36      	ldr	r2, [pc, #216]	; (800551c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d01d      	beq.n	8005482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a35      	ldr	r2, [pc, #212]	; (8005520 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d018      	beq.n	8005482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a33      	ldr	r2, [pc, #204]	; (8005524 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d013      	beq.n	8005482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a32      	ldr	r2, [pc, #200]	; (8005528 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00e      	beq.n	8005482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a30      	ldr	r2, [pc, #192]	; (800552c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d009      	beq.n	8005482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a2f      	ldr	r2, [pc, #188]	; (8005530 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d004      	beq.n	8005482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a2d      	ldr	r2, [pc, #180]	; (8005534 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d101      	bne.n	8005486 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005486:	2300      	movs	r3, #0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01a      	beq.n	80054c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	3b08      	subs	r3, #8
 8005494:	4a28      	ldr	r2, [pc, #160]	; (8005538 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	091b      	lsrs	r3, r3, #4
 800549c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4b26      	ldr	r3, [pc, #152]	; (800553c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80054a2:	4413      	add	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	461a      	mov	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a24      	ldr	r2, [pc, #144]	; (8005540 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80054b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f003 031f 	and.w	r3, r3, #31
 80054b8:	2201      	movs	r2, #1
 80054ba:	409a      	lsls	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80054c0:	e024      	b.n	800550c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	3b10      	subs	r3, #16
 80054ca:	4a1e      	ldr	r2, [pc, #120]	; (8005544 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	091b      	lsrs	r3, r3, #4
 80054d2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4a1c      	ldr	r2, [pc, #112]	; (8005548 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d806      	bhi.n	80054ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4a1b      	ldr	r2, [pc, #108]	; (800554c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d902      	bls.n	80054ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3308      	adds	r3, #8
 80054e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4b18      	ldr	r3, [pc, #96]	; (8005550 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	461a      	mov	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a16      	ldr	r2, [pc, #88]	; (8005554 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80054fc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	2201      	movs	r2, #1
 8005506:	409a      	lsls	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800550c:	bf00      	nop
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	58025408 	.word	0x58025408
 800551c:	5802541c 	.word	0x5802541c
 8005520:	58025430 	.word	0x58025430
 8005524:	58025444 	.word	0x58025444
 8005528:	58025458 	.word	0x58025458
 800552c:	5802546c 	.word	0x5802546c
 8005530:	58025480 	.word	0x58025480
 8005534:	58025494 	.word	0x58025494
 8005538:	cccccccd 	.word	0xcccccccd
 800553c:	16009600 	.word	0x16009600
 8005540:	58025880 	.word	0x58025880
 8005544:	aaaaaaab 	.word	0xaaaaaaab
 8005548:	400204b8 	.word	0x400204b8
 800554c:	4002040f 	.word	0x4002040f
 8005550:	10008200 	.word	0x10008200
 8005554:	40020880 	.word	0x40020880

08005558 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d04a      	beq.n	8005604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b08      	cmp	r3, #8
 8005572:	d847      	bhi.n	8005604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a25      	ldr	r2, [pc, #148]	; (8005610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d022      	beq.n	80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a24      	ldr	r2, [pc, #144]	; (8005614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d01d      	beq.n	80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a22      	ldr	r2, [pc, #136]	; (8005618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d018      	beq.n	80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a21      	ldr	r2, [pc, #132]	; (800561c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d013      	beq.n	80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1f      	ldr	r2, [pc, #124]	; (8005620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00e      	beq.n	80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1e      	ldr	r2, [pc, #120]	; (8005624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d009      	beq.n	80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1c      	ldr	r2, [pc, #112]	; (8005628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d004      	beq.n	80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1b      	ldr	r2, [pc, #108]	; (800562c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d101      	bne.n	80055c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80055c8:	2300      	movs	r3, #0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4b17      	ldr	r3, [pc, #92]	; (8005630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	461a      	mov	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a15      	ldr	r2, [pc, #84]	; (8005634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80055e0:	671a      	str	r2, [r3, #112]	; 0x70
 80055e2:	e009      	b.n	80055f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4b14      	ldr	r3, [pc, #80]	; (8005638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80055e8:	4413      	add	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	461a      	mov	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a11      	ldr	r2, [pc, #68]	; (800563c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80055f6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	2201      	movs	r2, #1
 80055fe:	409a      	lsls	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005604:	bf00      	nop
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	58025408 	.word	0x58025408
 8005614:	5802541c 	.word	0x5802541c
 8005618:	58025430 	.word	0x58025430
 800561c:	58025444 	.word	0x58025444
 8005620:	58025458 	.word	0x58025458
 8005624:	5802546c 	.word	0x5802546c
 8005628:	58025480 	.word	0x58025480
 800562c:	58025494 	.word	0x58025494
 8005630:	1600963f 	.word	0x1600963f
 8005634:	58025940 	.word	0x58025940
 8005638:	1000823f 	.word	0x1000823f
 800563c:	40020940 	.word	0x40020940

08005640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005640:	b480      	push	{r7}
 8005642:	b089      	sub	sp, #36	; 0x24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800564e:	4b89      	ldr	r3, [pc, #548]	; (8005874 <HAL_GPIO_Init+0x234>)
 8005650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005652:	e194      	b.n	800597e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	2101      	movs	r1, #1
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	fa01 f303 	lsl.w	r3, r1, r3
 8005660:	4013      	ands	r3, r2
 8005662:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 8186 	beq.w	8005978 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d00b      	beq.n	800568c <HAL_GPIO_Init+0x4c>
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b02      	cmp	r3, #2
 800567a:	d007      	beq.n	800568c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005680:	2b11      	cmp	r3, #17
 8005682:	d003      	beq.n	800568c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2b12      	cmp	r3, #18
 800568a:	d130      	bne.n	80056ee <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	2203      	movs	r2, #3
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	43db      	mvns	r3, r3
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	4013      	ands	r3, r2
 80056a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	fa02 f303 	lsl.w	r3, r2, r3
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056c2:	2201      	movs	r2, #1
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	43db      	mvns	r3, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4013      	ands	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	091b      	lsrs	r3, r3, #4
 80056d8:	f003 0201 	and.w	r2, r3, #1
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	fa02 f303 	lsl.w	r3, r2, r3
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	2203      	movs	r2, #3
 80056fa:	fa02 f303 	lsl.w	r3, r2, r3
 80056fe:	43db      	mvns	r3, r3
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4013      	ands	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	fa02 f303 	lsl.w	r3, r2, r3
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	4313      	orrs	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d003      	beq.n	800572e <HAL_GPIO_Init+0xee>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b12      	cmp	r3, #18
 800572c:	d123      	bne.n	8005776 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	08da      	lsrs	r2, r3, #3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3208      	adds	r2, #8
 8005736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800573a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	220f      	movs	r2, #15
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	43db      	mvns	r3, r3
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	4013      	ands	r3, r2
 8005750:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	4313      	orrs	r3, r2
 8005766:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	08da      	lsrs	r2, r3, #3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3208      	adds	r2, #8
 8005770:	69b9      	ldr	r1, [r7, #24]
 8005772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	2203      	movs	r2, #3
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	43db      	mvns	r3, r3
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	4013      	ands	r3, r2
 800578c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f003 0203 	and.w	r2, r3, #3
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 80e0 	beq.w	8005978 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057b8:	4b2f      	ldr	r3, [pc, #188]	; (8005878 <HAL_GPIO_Init+0x238>)
 80057ba:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80057be:	4a2e      	ldr	r2, [pc, #184]	; (8005878 <HAL_GPIO_Init+0x238>)
 80057c0:	f043 0302 	orr.w	r3, r3, #2
 80057c4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80057c8:	4b2b      	ldr	r3, [pc, #172]	; (8005878 <HAL_GPIO_Init+0x238>)
 80057ca:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057d6:	4a29      	ldr	r2, [pc, #164]	; (800587c <HAL_GPIO_Init+0x23c>)
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	089b      	lsrs	r3, r3, #2
 80057dc:	3302      	adds	r3, #2
 80057de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	220f      	movs	r2, #15
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	43db      	mvns	r3, r3
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	4013      	ands	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a20      	ldr	r2, [pc, #128]	; (8005880 <HAL_GPIO_Init+0x240>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d052      	beq.n	80058a8 <HAL_GPIO_Init+0x268>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <HAL_GPIO_Init+0x244>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d031      	beq.n	800586e <HAL_GPIO_Init+0x22e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a1e      	ldr	r2, [pc, #120]	; (8005888 <HAL_GPIO_Init+0x248>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d02b      	beq.n	800586a <HAL_GPIO_Init+0x22a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a1d      	ldr	r2, [pc, #116]	; (800588c <HAL_GPIO_Init+0x24c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d025      	beq.n	8005866 <HAL_GPIO_Init+0x226>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a1c      	ldr	r2, [pc, #112]	; (8005890 <HAL_GPIO_Init+0x250>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d01f      	beq.n	8005862 <HAL_GPIO_Init+0x222>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a1b      	ldr	r2, [pc, #108]	; (8005894 <HAL_GPIO_Init+0x254>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d019      	beq.n	800585e <HAL_GPIO_Init+0x21e>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a1a      	ldr	r2, [pc, #104]	; (8005898 <HAL_GPIO_Init+0x258>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d013      	beq.n	800585a <HAL_GPIO_Init+0x21a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a19      	ldr	r2, [pc, #100]	; (800589c <HAL_GPIO_Init+0x25c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00d      	beq.n	8005856 <HAL_GPIO_Init+0x216>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a18      	ldr	r2, [pc, #96]	; (80058a0 <HAL_GPIO_Init+0x260>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d007      	beq.n	8005852 <HAL_GPIO_Init+0x212>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a17      	ldr	r2, [pc, #92]	; (80058a4 <HAL_GPIO_Init+0x264>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d101      	bne.n	800584e <HAL_GPIO_Init+0x20e>
 800584a:	2309      	movs	r3, #9
 800584c:	e02d      	b.n	80058aa <HAL_GPIO_Init+0x26a>
 800584e:	230a      	movs	r3, #10
 8005850:	e02b      	b.n	80058aa <HAL_GPIO_Init+0x26a>
 8005852:	2308      	movs	r3, #8
 8005854:	e029      	b.n	80058aa <HAL_GPIO_Init+0x26a>
 8005856:	2307      	movs	r3, #7
 8005858:	e027      	b.n	80058aa <HAL_GPIO_Init+0x26a>
 800585a:	2306      	movs	r3, #6
 800585c:	e025      	b.n	80058aa <HAL_GPIO_Init+0x26a>
 800585e:	2305      	movs	r3, #5
 8005860:	e023      	b.n	80058aa <HAL_GPIO_Init+0x26a>
 8005862:	2304      	movs	r3, #4
 8005864:	e021      	b.n	80058aa <HAL_GPIO_Init+0x26a>
 8005866:	2303      	movs	r3, #3
 8005868:	e01f      	b.n	80058aa <HAL_GPIO_Init+0x26a>
 800586a:	2302      	movs	r3, #2
 800586c:	e01d      	b.n	80058aa <HAL_GPIO_Init+0x26a>
 800586e:	2301      	movs	r3, #1
 8005870:	e01b      	b.n	80058aa <HAL_GPIO_Init+0x26a>
 8005872:	bf00      	nop
 8005874:	58000080 	.word	0x58000080
 8005878:	58024400 	.word	0x58024400
 800587c:	58000400 	.word	0x58000400
 8005880:	58020000 	.word	0x58020000
 8005884:	58020400 	.word	0x58020400
 8005888:	58020800 	.word	0x58020800
 800588c:	58020c00 	.word	0x58020c00
 8005890:	58021000 	.word	0x58021000
 8005894:	58021400 	.word	0x58021400
 8005898:	58021800 	.word	0x58021800
 800589c:	58021c00 	.word	0x58021c00
 80058a0:	58022000 	.word	0x58022000
 80058a4:	58022400 	.word	0x58022400
 80058a8:	2300      	movs	r3, #0
 80058aa:	69fa      	ldr	r2, [r7, #28]
 80058ac:	f002 0203 	and.w	r2, r2, #3
 80058b0:	0092      	lsls	r2, r2, #2
 80058b2:	4093      	lsls	r3, r2
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058ba:	4938      	ldr	r1, [pc, #224]	; (800599c <HAL_GPIO_Init+0x35c>)
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	089b      	lsrs	r3, r3, #2
 80058c0:	3302      	adds	r3, #2
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	43db      	mvns	r3, r3
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	4013      	ands	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	43db      	mvns	r3, r3
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	4013      	ands	r3, r2
 8005900:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800591c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	43db      	mvns	r3, r3
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4013      	ands	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800594a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	43db      	mvns	r3, r3
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	4013      	ands	r3, r2
 800595a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	3301      	adds	r3, #1
 800597c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	fa22 f303 	lsr.w	r3, r2, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	f47f ae63 	bne.w	8005654 <HAL_GPIO_Init+0x14>
  }
}
 800598e:	bf00      	nop
 8005990:	3724      	adds	r7, #36	; 0x24
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	58000400 	.word	0x58000400

080059a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	887b      	ldrh	r3, [r7, #2]
 80059b2:	4013      	ands	r3, r2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059b8:	2301      	movs	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]
 80059bc:	e001      	b.n	80059c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059be:	2300      	movs	r3, #0
 80059c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	807b      	strh	r3, [r7, #2]
 80059dc:	4613      	mov	r3, r2
 80059de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059e0:	787b      	ldrb	r3, [r7, #1]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059e6:	887a      	ldrh	r2, [r7, #2]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80059ec:	e003      	b.n	80059f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80059ee:	887b      	ldrh	r3, [r7, #2]
 80059f0:	041a      	lsls	r2, r3, #16
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	619a      	str	r2, [r3, #24]
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
	...

08005a04 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e0bf      	b.n	8005b96 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fc fdc0 	bl	80025b0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005a46:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6999      	ldr	r1, [r3, #24]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a5c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6899      	ldr	r1, [r3, #8]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4b4a      	ldr	r3, [pc, #296]	; (8005ba0 <HAL_LTDC_Init+0x19c>)
 8005a78:	400b      	ands	r3, r1
 8005a7a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	041b      	lsls	r3, r3, #16
 8005a82:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6899      	ldr	r1, [r3, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68d9      	ldr	r1, [r3, #12]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	4b3e      	ldr	r3, [pc, #248]	; (8005ba0 <HAL_LTDC_Init+0x19c>)
 8005aa6:	400b      	ands	r3, r1
 8005aa8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	041b      	lsls	r3, r3, #16
 8005ab0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68d9      	ldr	r1, [r3, #12]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6919      	ldr	r1, [r3, #16]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	4b33      	ldr	r3, [pc, #204]	; (8005ba0 <HAL_LTDC_Init+0x19c>)
 8005ad4:	400b      	ands	r3, r1
 8005ad6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	041b      	lsls	r3, r3, #16
 8005ade:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6919      	ldr	r1, [r3, #16]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	431a      	orrs	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6959      	ldr	r1, [r3, #20]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	4b27      	ldr	r3, [pc, #156]	; (8005ba0 <HAL_LTDC_Init+0x19c>)
 8005b02:	400b      	ands	r3, r1
 8005b04:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0a:	041b      	lsls	r3, r3, #16
 8005b0c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6959      	ldr	r1, [r3, #20]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b2a:	021b      	lsls	r3, r3, #8
 8005b2c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005b34:	041b      	lsls	r3, r3, #16
 8005b36:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0206 	orr.w	r2, r2, #6
 8005b72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	699a      	ldr	r2, [r3, #24]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	f000f800 	.word	0xf000f800

08005ba4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005ba4:	b5b0      	push	{r4, r5, r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_LTDC_ConfigLayer+0x1a>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e02c      	b.n	8005c18 <HAL_LTDC_ConfigLayer+0x74>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2134      	movs	r1, #52	; 0x34
 8005bd4:	fb01 f303 	mul.w	r3, r1, r3
 8005bd8:	4413      	add	r3, r2
 8005bda:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	4614      	mov	r4, r2
 8005be2:	461d      	mov	r5, r3
 8005be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f847 	bl	8005c8c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2201      	movs	r2, #1
 8005c04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bdb0      	pop	{r4, r5, r7, pc}

08005c20 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <HAL_LTDC_SetAddress+0x1a>
 8005c36:	2302      	movs	r3, #2
 8005c38:	e024      	b.n	8005c84 <HAL_LTDC_SetAddress+0x64>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2202      	movs	r2, #2
 8005c46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2234      	movs	r2, #52	; 0x34
 8005c4e:	fb02 f303 	mul.w	r3, r2, r3
 8005c52:	3338      	adds	r3, #56	; 0x38
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4413      	add	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6979      	ldr	r1, [r7, #20]
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 f811 	bl	8005c8c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b089      	sub	sp, #36	; 0x24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	0c1b      	lsrs	r3, r3, #16
 8005ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ca8:	4413      	add	r3, r2
 8005caa:	041b      	lsls	r3, r3, #16
 8005cac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	01db      	lsls	r3, r3, #7
 8005cb8:	4413      	add	r3, r2
 8005cba:	3384      	adds	r3, #132	; 0x84
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	6812      	ldr	r2, [r2, #0]
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	01d2      	lsls	r2, r2, #7
 8005cc8:	440a      	add	r2, r1
 8005cca:	3284      	adds	r2, #132	; 0x84
 8005ccc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005cd0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	0c1b      	lsrs	r3, r3, #16
 8005cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ce2:	4413      	add	r3, r2
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4619      	mov	r1, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	01db      	lsls	r3, r3, #7
 8005cf0:	440b      	add	r3, r1
 8005cf2:	3384      	adds	r3, #132	; 0x84
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	68da      	ldr	r2, [r3, #12]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d0a:	4413      	add	r3, r2
 8005d0c:	041b      	lsls	r3, r3, #16
 8005d0e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	01db      	lsls	r3, r3, #7
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3384      	adds	r3, #132	; 0x84
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	6812      	ldr	r2, [r2, #0]
 8005d24:	4611      	mov	r1, r2
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	01d2      	lsls	r2, r2, #7
 8005d2a:	440a      	add	r2, r1
 8005d2c:	3284      	adds	r2, #132	; 0x84
 8005d2e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005d32:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d42:	4413      	add	r3, r2
 8005d44:	1c5a      	adds	r2, r3, #1
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	01db      	lsls	r3, r3, #7
 8005d50:	440b      	add	r3, r1
 8005d52:	3384      	adds	r3, #132	; 0x84
 8005d54:	4619      	mov	r1, r3
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	01db      	lsls	r3, r3, #7
 8005d66:	4413      	add	r3, r2
 8005d68:	3384      	adds	r3, #132	; 0x84
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	6812      	ldr	r2, [r2, #0]
 8005d70:	4611      	mov	r1, r2
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	01d2      	lsls	r2, r2, #7
 8005d76:	440a      	add	r2, r1
 8005d78:	3284      	adds	r2, #132	; 0x84
 8005d7a:	f023 0307 	bic.w	r3, r3, #7
 8005d7e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	461a      	mov	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	01db      	lsls	r3, r3, #7
 8005d8a:	4413      	add	r3, r2
 8005d8c:	3384      	adds	r3, #132	; 0x84
 8005d8e:	461a      	mov	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005da6:	041b      	lsls	r3, r3, #16
 8005da8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	061b      	lsls	r3, r3, #24
 8005db0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	01db      	lsls	r3, r3, #7
 8005dbc:	4413      	add	r3, r2
 8005dbe:	3384      	adds	r3, #132	; 0x84
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	01db      	lsls	r3, r3, #7
 8005dcc:	4413      	add	r3, r2
 8005dce:	3384      	adds	r3, #132	; 0x84
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ddc:	461a      	mov	r2, r3
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	431a      	orrs	r2, r3
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	431a      	orrs	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4619      	mov	r1, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	01db      	lsls	r3, r3, #7
 8005df0:	440b      	add	r3, r1
 8005df2:	3384      	adds	r3, #132	; 0x84
 8005df4:	4619      	mov	r1, r3
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	461a      	mov	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	01db      	lsls	r3, r3, #7
 8005e06:	4413      	add	r3, r2
 8005e08:	3384      	adds	r3, #132	; 0x84
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	6812      	ldr	r2, [r2, #0]
 8005e10:	4611      	mov	r1, r2
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	01d2      	lsls	r2, r2, #7
 8005e16:	440a      	add	r2, r1
 8005e18:	3284      	adds	r2, #132	; 0x84
 8005e1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e1e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	01db      	lsls	r3, r3, #7
 8005e2a:	4413      	add	r3, r2
 8005e2c:	3384      	adds	r3, #132	; 0x84
 8005e2e:	461a      	mov	r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	01db      	lsls	r3, r3, #7
 8005e40:	4413      	add	r3, r2
 8005e42:	3384      	adds	r3, #132	; 0x84
 8005e44:	69da      	ldr	r2, [r3, #28]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	01db      	lsls	r3, r3, #7
 8005e50:	440b      	add	r3, r1
 8005e52:	3384      	adds	r3, #132	; 0x84
 8005e54:	4619      	mov	r1, r3
 8005e56:	4b58      	ldr	r3, [pc, #352]	; (8005fb8 <LTDC_SetConfig+0x32c>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	69da      	ldr	r2, [r3, #28]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	68f9      	ldr	r1, [r7, #12]
 8005e66:	6809      	ldr	r1, [r1, #0]
 8005e68:	4608      	mov	r0, r1
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	01c9      	lsls	r1, r1, #7
 8005e6e:	4401      	add	r1, r0
 8005e70:	3184      	adds	r1, #132	; 0x84
 8005e72:	4313      	orrs	r3, r2
 8005e74:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	01db      	lsls	r3, r3, #7
 8005e80:	4413      	add	r3, r2
 8005e82:	3384      	adds	r3, #132	; 0x84
 8005e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	01db      	lsls	r3, r3, #7
 8005e90:	4413      	add	r3, r2
 8005e92:	3384      	adds	r3, #132	; 0x84
 8005e94:	461a      	mov	r2, r3
 8005e96:	2300      	movs	r3, #0
 8005e98:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	01db      	lsls	r3, r3, #7
 8005ea4:	4413      	add	r3, r2
 8005ea6:	3384      	adds	r3, #132	; 0x84
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d102      	bne.n	8005ebe <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005eb8:	2304      	movs	r3, #4
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	e01b      	b.n	8005ef6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d102      	bne.n	8005ecc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	61fb      	str	r3, [r7, #28]
 8005eca:	e014      	b.n	8005ef6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d00b      	beq.n	8005eec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d007      	beq.n	8005eec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d003      	beq.n	8005eec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005ee8:	2b07      	cmp	r3, #7
 8005eea:	d102      	bne.n	8005ef2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005eec:	2302      	movs	r3, #2
 8005eee:	61fb      	str	r3, [r7, #28]
 8005ef0:	e001      	b.n	8005ef6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	01db      	lsls	r3, r3, #7
 8005f00:	4413      	add	r3, r2
 8005f02:	3384      	adds	r3, #132	; 0x84
 8005f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	6812      	ldr	r2, [r2, #0]
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	01d2      	lsls	r2, r2, #7
 8005f10:	440a      	add	r2, r1
 8005f12:	3284      	adds	r2, #132	; 0x84
 8005f14:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005f18:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	69fa      	ldr	r2, [r7, #28]
 8005f20:	fb02 f303 	mul.w	r3, r2, r3
 8005f24:	041a      	lsls	r2, r3, #16
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6859      	ldr	r1, [r3, #4]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	1acb      	subs	r3, r1, r3
 8005f30:	69f9      	ldr	r1, [r7, #28]
 8005f32:	fb01 f303 	mul.w	r3, r1, r3
 8005f36:	3307      	adds	r3, #7
 8005f38:	68f9      	ldr	r1, [r7, #12]
 8005f3a:	6809      	ldr	r1, [r1, #0]
 8005f3c:	4608      	mov	r0, r1
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	01c9      	lsls	r1, r1, #7
 8005f42:	4401      	add	r1, r0
 8005f44:	3184      	adds	r1, #132	; 0x84
 8005f46:	4313      	orrs	r3, r2
 8005f48:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	01db      	lsls	r3, r3, #7
 8005f54:	4413      	add	r3, r2
 8005f56:	3384      	adds	r3, #132	; 0x84
 8005f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	01db      	lsls	r3, r3, #7
 8005f64:	440b      	add	r3, r1
 8005f66:	3384      	adds	r3, #132	; 0x84
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4b14      	ldr	r3, [pc, #80]	; (8005fbc <LTDC_SetConfig+0x330>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	461a      	mov	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	01db      	lsls	r3, r3, #7
 8005f7a:	4413      	add	r3, r2
 8005f7c:	3384      	adds	r3, #132	; 0x84
 8005f7e:	461a      	mov	r2, r3
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	01db      	lsls	r3, r3, #7
 8005f90:	4413      	add	r3, r2
 8005f92:	3384      	adds	r3, #132	; 0x84
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	6812      	ldr	r2, [r2, #0]
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	01d2      	lsls	r2, r2, #7
 8005fa0:	440a      	add	r2, r1
 8005fa2:	3284      	adds	r2, #132	; 0x84
 8005fa4:	f043 0301 	orr.w	r3, r3, #1
 8005fa8:	6013      	str	r3, [r2, #0]
}
 8005faa:	bf00      	nop
 8005fac:	3724      	adds	r7, #36	; 0x24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	fffff8f8 	.word	0xfffff8f8
 8005fbc:	fffff800 	.word	0xfffff800

08005fc0 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e017      	b.n	8006002 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d004      	beq.n	8005fe8 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2280      	movs	r2, #128	; 0x80
 8005fe2:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e00c      	b.n	8006002 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2204      	movs	r2, #4
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0201 	bic.w	r2, r2, #1
 8005ffe:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
	...

08006010 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af02      	add	r7, sp, #8
 8006016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800601c:	f7fc ff42 	bl	8002ea4 <HAL_GetTick>
 8006020:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d102      	bne.n	800602e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	73fb      	strb	r3, [r7, #15]
 800602c:	e0a9      	b.n	8006182 <HAL_OSPI_Init+0x172>
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006038:	2b00      	cmp	r3, #0
 800603a:	f040 80a2 	bne.w	8006182 <HAL_OSPI_Init+0x172>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7fc fbec 	bl	800281c <HAL_OSPI_MspInit>
#endif

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006044:	f241 3188 	movw	r1, #5000	; 0x1388
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fb0f 	bl	800666c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	4b4d      	ldr	r3, [pc, #308]	; (800618c <HAL_OSPI_Init+0x17c>)
 8006056:	4013      	ands	r3, r2
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	68d1      	ldr	r1, [r2, #12]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6912      	ldr	r2, [r2, #16]
 8006060:	3a01      	subs	r2, #1
 8006062:	0412      	lsls	r2, r2, #16
 8006064:	4311      	orrs	r1, r2
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6952      	ldr	r2, [r2, #20]
 800606a:	3a01      	subs	r2, #1
 800606c:	0212      	lsls	r2, r2, #8
 800606e:	4311      	orrs	r1, r2
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006074:	0112      	lsls	r2, r2, #4
 8006076:	4311      	orrs	r1, r2
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800607c:	4311      	orrs	r1, r2
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	69d2      	ldr	r2, [r2, #28]
 8006082:	4311      	orrs	r1, r2
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6812      	ldr	r2, [r2, #0]
 8006088:	430b      	orrs	r3, r1
 800608a:	6093      	str	r3, [r2, #8]
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1a      	ldr	r2, [r3, #32]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximun transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) | (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a6:	0419      	lsls	r1, r3, #16
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80060bc:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	021a      	lsls	r2, r3, #8
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2200      	movs	r2, #0
 80060e2:	2120      	movs	r1, #32
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 ff97 	bl	8007018 <OSPI_WaitFlagStateUntilTimeout>
 80060ea:	4603      	mov	r3, r0
 80060ec:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d146      	bne.n	8006182 <HAL_OSPI_Init+0x172>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	1e5a      	subs	r2, r3, #1
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	60da      	str	r2, [r3, #12]

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689a      	ldr	r2, [r3, #8]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC), (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800612a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006136:	431a      	orrs	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f042 0201 	orr.w	r2, r2, #1
 8006150:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d107      	bne.n	800616a <HAL_OSPI_Init+0x15a>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f042 0202 	orr.w	r2, r2, #2
 8006168:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006172:	d103      	bne.n	800617c <HAL_OSPI_Init+0x16c>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	655a      	str	r2, [r3, #84]	; 0x54
 800617a:	e002      	b.n	8006182 <HAL_OSPI_Init+0x172>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Return function status */
  return status;
 8006182:	7bfb      	ldrb	r3, [r7, #15]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	f8e0f884 	.word	0xf8e0f884

08006190 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3350      	adds	r3, #80	; 0x50
 800619e:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b4:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d03a      	beq.n	8006236 <HAL_OSPI_IRQHandler+0xa6>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d035      	beq.n	8006236 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b18      	cmp	r3, #24
 80061ce:	d10f      	bne.n	80061f0 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d4:	781a      	ldrb	r2, [r3, #0]
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->XferCount--;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e8:	1e5a      	subs	r2, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80061ee:	e012      	b.n	8006216 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b28      	cmp	r3, #40	; 0x28
 80061f4:	d10f      	bne.n	8006216 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	7812      	ldrb	r2, [r2, #0]
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->XferCount--;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006210:	1e5a      	subs	r2, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	64da      	str	r2, [r3, #76]	; 0x4c
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800621a:	2b00      	cmp	r3, #0
 800621c:	d107      	bne.n	800622e <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800622c:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f9e0 	bl	80065f4 <HAL_OSPI_FifoThresholdCallback>
 8006234:	e0e7      	b.n	8006406 <HAL_OSPI_IRQHandler+0x276>
#endif
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d067      	beq.n	8006310 <HAL_OSPI_IRQHandler+0x180>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d062      	beq.n	8006310 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2b28      	cmp	r3, #40	; 0x28
 800624e:	d131      	bne.n	80062b4 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006254:	2b00      	cmp	r3, #0
 8006256:	d015      	beq.n	8006284 <HAL_OSPI_IRQHandler+0xf4>
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800625e:	2b00      	cmp	r3, #0
 8006260:	d010      	beq.n	8006284 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	7812      	ldrb	r2, [r2, #0]
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800627c:	1e5a      	subs	r2, r3, #1
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	64da      	str	r2, [r3, #76]	; 0x4c
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006282:	e0bd      	b.n	8006400 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006288:	2b00      	cmp	r3, #0
 800628a:	f040 80b9 	bne.w	8006400 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2202      	movs	r2, #2
 8006294:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80062a4:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2202      	movs	r2, #2
 80062aa:	655a      	str	r2, [r3, #84]	; 0x54

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f9b5 	bl	800661c <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80062b2:	e0a5      	b.n	8006400 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2202      	movs	r2, #2
 80062ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80062ca:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	655a      	str	r2, [r3, #84]	; 0x54

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2b18      	cmp	r3, #24
 80062d6:	d103      	bne.n	80062e0 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f9a9 	bl	8006630 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80062de:	e08f      	b.n	8006400 <HAL_OSPI_IRQHandler+0x270>
#endif
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b08      	cmp	r3, #8
 80062e4:	d103      	bne.n	80062ee <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f98e 	bl	8006608 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80062ec:	e088      	b.n	8006400 <HAL_OSPI_IRQHandler+0x270>
#endif
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062f4:	f040 8084 	bne.w	8006400 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d103      	bne.n	8006308 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f96d 	bl	80065e0 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006306:	e07b      	b.n	8006400 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f95f 	bl	80065cc <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800630e:	e077      	b.n	8006400 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f003 0308 	and.w	r3, r3, #8
 8006316:	2b00      	cmp	r3, #0
 8006318:	d01e      	beq.n	8006358 <HAL_OSPI_IRQHandler+0x1c8>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d019      	beq.n	8006358 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2208      	movs	r2, #8
 800632a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8006348:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2202      	movs	r2, #2
 800634e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f977 	bl	8006644 <HAL_OSPI_StatusMatchCallback>
 8006356:	e056      	b.n	8006406 <HAL_OSPI_IRQHandler+0x276>
#endif
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d03c      	beq.n	80063dc <HAL_OSPI_IRQHandler+0x24c>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d037      	beq.n	80063dc <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2201      	movs	r2, #1
 8006372:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8006382:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2202      	movs	r2, #2
 8006388:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01a      	beq.n	80063ce <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0204 	bic.w	r2, r2, #4
 80063a6:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ac:	4a18      	ldr	r2, [pc, #96]	; (8006410 <HAL_OSPI_IRQHandler+0x280>)
 80063ae:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff fe03 	bl	8005fc0 <HAL_MDMA_Abort_IT>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d021      	beq.n	8006404 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f900 	bl	80065cc <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80063cc:	e01a      	b.n	8006404 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2202      	movs	r2, #2
 80063d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f8f9 	bl	80065cc <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80063da:	e013      	b.n	8006404 <HAL_OSPI_IRQHandler+0x274>
#endif
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f003 0310 	and.w	r3, r3, #16
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00f      	beq.n	8006406 <HAL_OSPI_IRQHandler+0x276>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00a      	beq.n	8006406 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2210      	movs	r2, #16
 80063f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f92d 	bl	8006658 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80063fe:	e002      	b.n	8006406 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006400:	bf00      	nop
 8006402:	e000      	b.n	8006406 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006404:	bf00      	nop
}
 8006406:	bf00      	nop
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	08006fa1 	.word	0x08006fa1

08006414 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08a      	sub	sp, #40	; 0x28
 8006418:	af02      	add	r7, sp, #8
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8006420:	f7fc fd40 	bl	8002ea4 <HAL_GetTick>
 8006424:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006430:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2b02      	cmp	r3, #2
 8006436:	d104      	bne.n	8006442 <HAL_OSPI_Command+0x2e>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006440:	d115      	bne.n	800646e <HAL_OSPI_Command+0x5a>
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b14      	cmp	r3, #20
 8006446:	d107      	bne.n	8006458 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG) || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b02      	cmp	r3, #2
 800644e:	d00e      	beq.n	800646e <HAL_OSPI_Command+0x5a>
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b03      	cmp	r3, #3
 8006456:	d00a      	beq.n	800646e <HAL_OSPI_Command+0x5a>
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2b24      	cmp	r3, #36	; 0x24
 800645c:	d15b      	bne.n	8006516 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d003      	beq.n	800646e <HAL_OSPI_Command+0x5a>
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b03      	cmp	r3, #3
 800646c:	d153      	bne.n	8006516 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2200      	movs	r2, #0
 8006476:	2120      	movs	r1, #32
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 fdcd 	bl	8007018 <OSPI_WaitFlagStateUntilTimeout>
 800647e:	4603      	mov	r3, r0
 8006480:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8006482:	7ffb      	ldrb	r3, [r7, #31]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d14c      	bne.n	8006522 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 fdf9 	bl	8007088 <OSPI_ConfigCmd>
 8006496:	4603      	mov	r3, r0
 8006498:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800649a:	7ffb      	ldrb	r3, [r7, #31]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d140      	bne.n	8006522 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10e      	bne.n	80064c6 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2201      	movs	r2, #1
 80064b0:	2102      	movs	r1, #2
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 fdb0 	bl	8007018 <OSPI_WaitFlagStateUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2202      	movs	r2, #2
 80064c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80064c4:	e02d      	b.n	8006522 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d103      	bne.n	80064d6 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2204      	movs	r2, #4
 80064d2:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80064d4:	e025      	b.n	8006522 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d10b      	bne.n	80064f6 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e2:	2b24      	cmp	r3, #36	; 0x24
 80064e4:	d103      	bne.n	80064ee <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2204      	movs	r2, #4
 80064ea:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80064ec:	e019      	b.n	8006522 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2214      	movs	r2, #20
 80064f2:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80064f4:	e015      	b.n	8006522 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d111      	bne.n	8006522 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006502:	2b14      	cmp	r3, #20
 8006504:	d103      	bne.n	800650e <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2204      	movs	r2, #4
 800650a:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800650c:	e009      	b.n	8006522 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2224      	movs	r2, #36	; 0x24
 8006512:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8006514:	e005      	b.n	8006522 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2210      	movs	r2, #16
 800651e:	659a      	str	r2, [r3, #88]	; 0x58
 8006520:	e000      	b.n	8006524 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8006522:	bf00      	nop
  }

  /* Return function status */
  return status;
 8006524:	7ffb      	ldrb	r3, [r7, #31]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3720      	adds	r7, #32
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af02      	add	r7, sp, #8
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800653a:	f7fc fcb3 	bl	8002ea4 <HAL_GetTick>
 800653e:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006544:	2b04      	cmp	r3, #4
 8006546:	d134      	bne.n	80065b2 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2200      	movs	r2, #0
 8006552:	2120      	movs	r1, #32
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fd5f 	bl	8007018 <OSPI_WaitFlagStateUntilTimeout>
 800655a:	4603      	mov	r3, r0
 800655c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800655e:	7bfb      	ldrb	r3, [r7, #15]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d12b      	bne.n	80065bc <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2288      	movs	r2, #136	; 0x88
 8006568:	655a      	str	r2, [r3, #84]	; 0x54

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b08      	cmp	r3, #8
 8006570:	d111      	bne.n	8006596 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	6852      	ldr	r2, [r2, #4]
 800657a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2210      	movs	r2, #16
 8006584:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006594:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <HAL_OSPI_MemoryMapped+0x98>)
 800659e:	4013      	ands	r3, r2
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	6812      	ldr	r2, [r2, #0]
 80065a4:	431a      	orrs	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	e004      	b.n	80065bc <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2210      	movs	r2, #16
 80065ba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Return function status */
  return status;
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	cffffff7 	.word	0xcffffff7

080065cc <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
	...

0800668c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b094      	sub	sp, #80	; 0x50
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index, ospi_enabled = 0U, other_instance;
 800669e:	2300      	movs	r3, #0
 80066a0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a8f      	ldr	r2, [pc, #572]	; (80068e8 <HAL_OSPIM_Config+0x25c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d105      	bne.n	80066ba <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 80066b2:	2301      	movs	r3, #1
 80066b4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80066b8:	e004      	b.n	80066c4 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80066ba:	2301      	movs	r3, #1
 80066bc:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80066c4:	2300      	movs	r3, #0
 80066c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80066ca:	e01d      	b.n	8006708 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80066cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80066d0:	3301      	adds	r3, #1
 80066d2:	b2d8      	uxtb	r0, r3
 80066d4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80066d8:	f107 0114 	add.w	r1, r7, #20
 80066dc:	4613      	mov	r3, r2
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	4413      	add	r3, r2
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	440b      	add	r3, r1
 80066e6:	4619      	mov	r1, r3
 80066e8:	f000 fe48 	bl	800737c <OSPIM_GetConfig>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2208      	movs	r2, #8
 80066fc:	659a      	str	r2, [r3, #88]	; 0x58
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80066fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006702:	3301      	adds	r3, #1
 8006704:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006708:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800670c:	2b01      	cmp	r3, #1
 800670e:	d9dd      	bls.n	80066cc <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8006710:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006714:	2b00      	cmp	r3, #0
 8006716:	f040 8437 	bne.w	8006f88 <HAL_OSPIM_Config+0x8fc>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800671a:	4b73      	ldr	r3, [pc, #460]	; (80068e8 <HAL_OSPIM_Config+0x25c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00b      	beq.n	800673e <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006726:	4b70      	ldr	r3, [pc, #448]	; (80068e8 <HAL_OSPIM_Config+0x25c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a6f      	ldr	r2, [pc, #444]	; (80068e8 <HAL_OSPIM_Config+0x25c>)
 800672c:	f023 0301 	bic.w	r3, r3, #1
 8006730:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8006732:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006736:	f043 0301 	orr.w	r3, r3, #1
 800673a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800673e:	4b6b      	ldr	r3, [pc, #428]	; (80068ec <HAL_OSPIM_Config+0x260>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00b      	beq.n	8006762 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800674a:	4b68      	ldr	r3, [pc, #416]	; (80068ec <HAL_OSPIM_Config+0x260>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a67      	ldr	r2, [pc, #412]	; (80068ec <HAL_OSPIM_Config+0x260>)
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8006756:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800675a:	f043 0302 	orr.w	r3, r3, #2
 800675e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8006762:	4963      	ldr	r1, [pc, #396]	; (80068f0 <HAL_OSPIM_Config+0x264>)
 8006764:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006766:	4613      	mov	r3, r2
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	4413      	add	r3, r2
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006772:	4413      	add	r3, r2
 8006774:	3b34      	subs	r3, #52	; 0x34
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3b01      	subs	r3, #1
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	440b      	add	r3, r1
 800677e:	6859      	ldr	r1, [r3, #4]
 8006780:	485b      	ldr	r0, [pc, #364]	; (80068f0 <HAL_OSPIM_Config+0x264>)
 8006782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006784:	4613      	mov	r3, r2
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	4413      	add	r3, r2
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006790:	4413      	add	r3, r2
 8006792:	3b34      	subs	r3, #52	; 0x34
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3b01      	subs	r3, #1
 8006798:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4403      	add	r3, r0
 80067a0:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80067a2:	4b53      	ldr	r3, [pc, #332]	; (80068f0 <HAL_OSPIM_Config+0x264>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 80a2 	beq.w	80068f4 <HAL_OSPIM_Config+0x268>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80067b0:	4b4f      	ldr	r3, [pc, #316]	; (80068f0 <HAL_OSPIM_Config+0x264>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a4e      	ldr	r2, [pc, #312]	; (80068f0 <HAL_OSPIM_Config+0x264>)
 80067b6:	f023 0301 	bic.w	r3, r3, #1
 80067ba:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80067bc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	f040 812c 	bne.w	8006a1e <HAL_OSPIM_Config+0x392>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)],                          OCTOSPIM_PCR_CLKSRC);
 80067c6:	494a      	ldr	r1, [pc, #296]	; (80068f0 <HAL_OSPIM_Config+0x264>)
 80067c8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80067cc:	4613      	mov	r3, r2
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	4413      	add	r3, r2
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80067d8:	4413      	add	r3, r2
 80067da:	3b3c      	subs	r3, #60	; 0x3c
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3b01      	subs	r3, #1
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	440b      	add	r3, r1
 80067e4:	6859      	ldr	r1, [r3, #4]
 80067e6:	4842      	ldr	r0, [pc, #264]	; (80068f0 <HAL_OSPIM_Config+0x264>)
 80067e8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80067ec:	4613      	mov	r3, r2
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	4413      	add	r3, r2
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80067f8:	4413      	add	r3, r2
 80067fa:	3b3c      	subs	r3, #60	; 0x3c
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3b01      	subs	r3, #1
 8006800:	f041 0202 	orr.w	r2, r1, #2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4403      	add	r3, r0
 8006808:	605a      	str	r2, [r3, #4]
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)],                          OCTOSPIM_PCR_DQSSRC);
 800680a:	4939      	ldr	r1, [pc, #228]	; (80068f0 <HAL_OSPIM_Config+0x264>)
 800680c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006810:	4613      	mov	r3, r2
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	4413      	add	r3, r2
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800681c:	4413      	add	r3, r2
 800681e:	3b38      	subs	r3, #56	; 0x38
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3b01      	subs	r3, #1
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	440b      	add	r3, r1
 8006828:	6859      	ldr	r1, [r3, #4]
 800682a:	4831      	ldr	r0, [pc, #196]	; (80068f0 <HAL_OSPIM_Config+0x264>)
 800682c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006830:	4613      	mov	r3, r2
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	4413      	add	r3, r2
 8006836:	00db      	lsls	r3, r3, #3
 8006838:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800683c:	4413      	add	r3, r2
 800683e:	3b38      	subs	r3, #56	; 0x38
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3b01      	subs	r3, #1
 8006844:	f041 0220 	orr.w	r2, r1, #32
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4403      	add	r3, r0
 800684c:	605a      	str	r2, [r3, #4]
        SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],  OCTOSPIM_PCR_IOLSRC_1);
 800684e:	4928      	ldr	r1, [pc, #160]	; (80068f0 <HAL_OSPIM_Config+0x264>)
 8006850:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006854:	4613      	mov	r3, r2
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	4413      	add	r3, r2
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006860:	4413      	add	r3, r2
 8006862:	3b30      	subs	r3, #48	; 0x30
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3b01      	subs	r3, #1
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	440b      	add	r3, r1
 8006870:	6859      	ldr	r1, [r3, #4]
 8006872:	481f      	ldr	r0, [pc, #124]	; (80068f0 <HAL_OSPIM_Config+0x264>)
 8006874:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006878:	4613      	mov	r3, r2
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	4413      	add	r3, r2
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006884:	4413      	add	r3, r2
 8006886:	3b30      	subs	r3, #48	; 0x30
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3b01      	subs	r3, #1
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4403      	add	r3, r0
 8006898:	605a      	str	r2, [r3, #4]
        SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 800689a:	4915      	ldr	r1, [pc, #84]	; (80068f0 <HAL_OSPIM_Config+0x264>)
 800689c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80068a0:	4613      	mov	r3, r2
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	4413      	add	r3, r2
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80068ac:	4413      	add	r3, r2
 80068ae:	3b2c      	subs	r3, #44	; 0x2c
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3b01      	subs	r3, #1
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	440b      	add	r3, r1
 80068bc:	6859      	ldr	r1, [r3, #4]
 80068be:	480c      	ldr	r0, [pc, #48]	; (80068f0 <HAL_OSPIM_Config+0x264>)
 80068c0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80068c4:	4613      	mov	r3, r2
 80068c6:	005b      	lsls	r3, r3, #1
 80068c8:	4413      	add	r3, r2
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80068d0:	4413      	add	r3, r2
 80068d2:	3b2c      	subs	r3, #44	; 0x2c
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4403      	add	r3, r0
 80068e4:	605a      	str	r2, [r3, #4]
 80068e6:	e09a      	b.n	8006a1e <HAL_OSPIM_Config+0x392>
 80068e8:	52005000 	.word	0x52005000
 80068ec:	5200a000 	.word	0x5200a000
 80068f0:	5200b400 	.word	0x5200b400
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80068f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068f6:	4613      	mov	r3, r2
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	4413      	add	r3, r2
 80068fc:	00db      	lsls	r3, r3, #3
 80068fe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006902:	4413      	add	r3, r2
 8006904:	3b3c      	subs	r3, #60	; 0x3c
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 8088 	beq.w	8006a1e <HAL_OSPIM_Config+0x392>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)],                          OCTOSPIM_PCR_CLKEN);
 800690e:	498b      	ldr	r1, [pc, #556]	; (8006b3c <HAL_OSPIM_Config+0x4b0>)
 8006910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006912:	4613      	mov	r3, r2
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	4413      	add	r3, r2
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800691e:	4413      	add	r3, r2
 8006920:	3b3c      	subs	r3, #60	; 0x3c
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3b01      	subs	r3, #1
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	440b      	add	r3, r1
 800692a:	6859      	ldr	r1, [r3, #4]
 800692c:	4883      	ldr	r0, [pc, #524]	; (8006b3c <HAL_OSPIM_Config+0x4b0>)
 800692e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006930:	4613      	mov	r3, r2
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	4413      	add	r3, r2
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800693c:	4413      	add	r3, r2
 800693e:	3b3c      	subs	r3, #60	; 0x3c
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3b01      	subs	r3, #1
 8006944:	f021 0201 	bic.w	r2, r1, #1
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4403      	add	r3, r0
 800694c:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)],                          OCTOSPIM_PCR_DQSEN);
 800694e:	497b      	ldr	r1, [pc, #492]	; (8006b3c <HAL_OSPIM_Config+0x4b0>)
 8006950:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006952:	4613      	mov	r3, r2
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	4413      	add	r3, r2
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800695e:	4413      	add	r3, r2
 8006960:	3b38      	subs	r3, #56	; 0x38
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3b01      	subs	r3, #1
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	440b      	add	r3, r1
 800696a:	6859      	ldr	r1, [r3, #4]
 800696c:	4873      	ldr	r0, [pc, #460]	; (8006b3c <HAL_OSPIM_Config+0x4b0>)
 800696e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006970:	4613      	mov	r3, r2
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	4413      	add	r3, r2
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800697c:	4413      	add	r3, r2
 800697e:	3b38      	subs	r3, #56	; 0x38
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3b01      	subs	r3, #1
 8006984:	f021 0210 	bic.w	r2, r1, #16
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4403      	add	r3, r0
 800698c:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],  OCTOSPIM_PCR_IOLEN);
 800698e:	496b      	ldr	r1, [pc, #428]	; (8006b3c <HAL_OSPIM_Config+0x4b0>)
 8006990:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006992:	4613      	mov	r3, r2
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	4413      	add	r3, r2
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800699e:	4413      	add	r3, r2
 80069a0:	3b30      	subs	r3, #48	; 0x30
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3b01      	subs	r3, #1
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	6859      	ldr	r1, [r3, #4]
 80069b0:	4862      	ldr	r0, [pc, #392]	; (8006b3c <HAL_OSPIM_Config+0x4b0>)
 80069b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069b4:	4613      	mov	r3, r2
 80069b6:	005b      	lsls	r3, r3, #1
 80069b8:	4413      	add	r3, r2
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80069c0:	4413      	add	r3, r2
 80069c2:	3b30      	subs	r3, #48	; 0x30
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4403      	add	r3, r0
 80069d4:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80069d6:	4959      	ldr	r1, [pc, #356]	; (8006b3c <HAL_OSPIM_Config+0x4b0>)
 80069d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069da:	4613      	mov	r3, r2
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	4413      	add	r3, r2
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80069e6:	4413      	add	r3, r2
 80069e8:	3b2c      	subs	r3, #44	; 0x2c
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3b01      	subs	r3, #1
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	440b      	add	r3, r1
 80069f6:	6859      	ldr	r1, [r3, #4]
 80069f8:	4850      	ldr	r0, [pc, #320]	; (8006b3c <HAL_OSPIM_Config+0x4b0>)
 80069fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069fc:	4613      	mov	r3, r2
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	4413      	add	r3, r2
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a08:	4413      	add	r3, r2
 8006a0a:	3b2c      	subs	r3, #44	; 0x2c
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4403      	add	r3, r0
 8006a1c:	605a      	str	r2, [r3, #4]
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	6819      	ldr	r1, [r3, #0]
 8006a22:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a26:	4613      	mov	r3, r2
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	4413      	add	r3, r2
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a32:	4413      	add	r3, r2
 8006a34:	3b3c      	subs	r3, #60	; 0x3c
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4299      	cmp	r1, r3
 8006a3a:	d03c      	beq.n	8006ab6 <HAL_OSPIM_Config+0x42a>
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	6859      	ldr	r1, [r3, #4]
 8006a40:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a44:	4613      	mov	r3, r2
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	4413      	add	r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a50:	4413      	add	r3, r2
 8006a52:	3b38      	subs	r3, #56	; 0x38
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4299      	cmp	r1, r3
 8006a58:	d02d      	beq.n	8006ab6 <HAL_OSPIM_Config+0x42a>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	6899      	ldr	r1, [r3, #8]
 8006a5e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a62:	4613      	mov	r3, r2
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	4413      	add	r3, r2
 8006a68:	00db      	lsls	r3, r3, #3
 8006a6a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a6e:	4413      	add	r3, r2
 8006a70:	3b34      	subs	r3, #52	; 0x34
 8006a72:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006a74:	4299      	cmp	r1, r3
 8006a76:	d01e      	beq.n	8006ab6 <HAL_OSPIM_Config+0x42a>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	68d9      	ldr	r1, [r3, #12]
 8006a7c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a80:	4613      	mov	r3, r2
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	4413      	add	r3, r2
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a8c:	4413      	add	r3, r2
 8006a8e:	3b30      	subs	r3, #48	; 0x30
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4299      	cmp	r1, r3
 8006a94:	d00f      	beq.n	8006ab6 <HAL_OSPIM_Config+0x42a>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	6919      	ldr	r1, [r3, #16]
 8006a9a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	4413      	add	r3, r2
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006aaa:	4413      	add	r3, r2
 8006aac:	3b2c      	subs	r3, #44	; 0x2c
 8006aae:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006ab0:	4299      	cmp	r1, r3
 8006ab2:	f040 80f7 	bne.w	8006ca4 <HAL_OSPIM_Config+0x618>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   && (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort) &&
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	6819      	ldr	r1, [r3, #0]
 8006aba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006abe:	4613      	mov	r3, r2
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	4413      	add	r3, r2
 8006ac4:	00db      	lsls	r3, r3, #3
 8006ac6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006aca:	4413      	add	r3, r2
 8006acc:	3b3c      	subs	r3, #60	; 0x3c
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4299      	cmp	r1, r3
 8006ad2:	d135      	bne.n	8006b40 <HAL_OSPIM_Config+0x4b4>
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	6859      	ldr	r1, [r3, #4]
 8006ad8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006adc:	4613      	mov	r3, r2
 8006ade:	005b      	lsls	r3, r3, #1
 8006ae0:	4413      	add	r3, r2
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006ae8:	4413      	add	r3, r2
 8006aea:	3b38      	subs	r3, #56	; 0x38
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4299      	cmp	r1, r3
 8006af0:	d126      	bne.n	8006b40 <HAL_OSPIM_Config+0x4b4>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) && (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	68d9      	ldr	r1, [r3, #12]
 8006af6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006afa:	4613      	mov	r3, r2
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	4413      	add	r3, r2
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b06:	4413      	add	r3, r2
 8006b08:	3b30      	subs	r3, #48	; 0x30
 8006b0a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   && (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort) &&
 8006b0c:	4299      	cmp	r1, r3
 8006b0e:	d117      	bne.n	8006b40 <HAL_OSPIM_Config+0x4b4>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) && (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	6919      	ldr	r1, [r3, #16]
 8006b14:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006b18:	4613      	mov	r3, r2
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	4413      	add	r3, r2
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b24:	4413      	add	r3, r2
 8006b26:	3b2c      	subs	r3, #44	; 0x2c
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4299      	cmp	r1, r3
 8006b2c:	d108      	bne.n	8006b40 <HAL_OSPIM_Config+0x4b4>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006b2e:	4b03      	ldr	r3, [pc, #12]	; (8006b3c <HAL_OSPIM_Config+0x4b0>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a02      	ldr	r2, [pc, #8]	; (8006b3c <HAL_OSPIM_Config+0x4b0>)
 8006b34:	f043 0301 	orr.w	r3, r3, #1
 8006b38:	6013      	str	r3, [r2, #0]
 8006b3a:	e0b3      	b.n	8006ca4 <HAL_OSPIM_Config+0x618>
 8006b3c:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)],                          OCTOSPIM_PCR_CLKEN);
 8006b40:	49b6      	ldr	r1, [pc, #728]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006b42:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006b46:	4613      	mov	r3, r2
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	4413      	add	r3, r2
 8006b4c:	00db      	lsls	r3, r3, #3
 8006b4e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b52:	4413      	add	r3, r2
 8006b54:	3b3c      	subs	r3, #60	; 0x3c
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	440b      	add	r3, r1
 8006b5e:	6859      	ldr	r1, [r3, #4]
 8006b60:	48ae      	ldr	r0, [pc, #696]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006b62:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006b66:	4613      	mov	r3, r2
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	4413      	add	r3, r2
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b72:	4413      	add	r3, r2
 8006b74:	3b3c      	subs	r3, #60	; 0x3c
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	f021 0201 	bic.w	r2, r1, #1
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4403      	add	r3, r0
 8006b82:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)],                          OCTOSPIM_PCR_DQSEN);
 8006b84:	49a5      	ldr	r1, [pc, #660]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006b86:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	4413      	add	r3, r2
 8006b90:	00db      	lsls	r3, r3, #3
 8006b92:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b96:	4413      	add	r3, r2
 8006b98:	3b38      	subs	r3, #56	; 0x38
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	440b      	add	r3, r1
 8006ba2:	6859      	ldr	r1, [r3, #4]
 8006ba4:	489d      	ldr	r0, [pc, #628]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006ba6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006baa:	4613      	mov	r3, r2
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	4413      	add	r3, r2
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006bb6:	4413      	add	r3, r2
 8006bb8:	3b38      	subs	r3, #56	; 0x38
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	f021 0210 	bic.w	r2, r1, #16
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4403      	add	r3, r0
 8006bc6:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)],                          OCTOSPIM_PCR_NCSEN);
 8006bc8:	4994      	ldr	r1, [pc, #592]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006bca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006bce:	4613      	mov	r3, r2
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	4413      	add	r3, r2
 8006bd4:	00db      	lsls	r3, r3, #3
 8006bd6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006bda:	4413      	add	r3, r2
 8006bdc:	3b34      	subs	r3, #52	; 0x34
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	440b      	add	r3, r1
 8006be6:	6859      	ldr	r1, [r3, #4]
 8006be8:	488c      	ldr	r0, [pc, #560]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006bea:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006bee:	4613      	mov	r3, r2
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	4413      	add	r3, r2
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006bfa:	4413      	add	r3, r2
 8006bfc:	3b34      	subs	r3, #52	; 0x34
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4403      	add	r3, r0
 8006c0a:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],  OCTOSPIM_PCR_IOLEN);
 8006c0c:	4983      	ldr	r1, [pc, #524]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006c0e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006c12:	4613      	mov	r3, r2
 8006c14:	005b      	lsls	r3, r3, #1
 8006c16:	4413      	add	r3, r2
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c1e:	4413      	add	r3, r2
 8006c20:	3b30      	subs	r3, #48	; 0x30
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	440b      	add	r3, r1
 8006c2e:	6859      	ldr	r1, [r3, #4]
 8006c30:	487a      	ldr	r0, [pc, #488]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006c32:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006c36:	4613      	mov	r3, r2
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	4413      	add	r3, r2
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c42:	4413      	add	r3, r2
 8006c44:	3b30      	subs	r3, #48	; 0x30
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4403      	add	r3, r0
 8006c56:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006c58:	4970      	ldr	r1, [pc, #448]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006c5a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006c5e:	4613      	mov	r3, r2
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	4413      	add	r3, r2
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c6a:	4413      	add	r3, r2
 8006c6c:	3b2c      	subs	r3, #44	; 0x2c
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	440b      	add	r3, r1
 8006c7a:	6859      	ldr	r1, [r3, #4]
 8006c7c:	4867      	ldr	r0, [pc, #412]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006c7e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006c82:	4613      	mov	r3, r2
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	4413      	add	r3, r2
 8006c88:	00db      	lsls	r3, r3, #3
 8006c8a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c8e:	4413      	add	r3, r2
 8006c90:	3b2c      	subs	r3, #44	; 0x2c
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4403      	add	r3, r0
 8006ca2:	605a      	str	r2, [r3, #4]
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort-1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC), (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));
 8006ca4:	4a5d      	ldr	r2, [pc, #372]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb8:	025b      	lsls	r3, r3, #9
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	4957      	ldr	r1, [pc, #348]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	440b      	add	r3, r1
 8006ccc:	605a      	str	r2, [r3, #4]

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	1e5a      	subs	r2, r3, #1
 8006cd4:	4b51      	ldr	r3, [pc, #324]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	0c1b      	lsrs	r3, r3, #16
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d90a      	bls.n	8006cf6 <HAL_OSPIM_Config+0x66a>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8006ce0:	4b4e      	ldr	r3, [pc, #312]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	3b01      	subs	r3, #1
 8006cee:	041b      	lsls	r3, r3, #16
 8006cf0:	494a      	ldr	r1, [pc, #296]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006cf6:	4b49      	ldr	r3, [pc, #292]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 808e 	beq.w	8006e20 <HAL_OSPIM_Config+0x794>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006d04:	4a45      	ldr	r2, [pc, #276]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f023 0203 	bic.w	r2, r3, #3
 8006d16:	4941      	ldr	r1, [pc, #260]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	f042 0201 	orr.w	r2, r2, #1
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	440b      	add	r3, r1
 8006d26:	605a      	str	r2, [r3, #4]
      MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8006d28:	4a3c      	ldr	r2, [pc, #240]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006d3a:	4938      	ldr	r1, [pc, #224]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	3b01      	subs	r3, #1
 8006d42:	f042 0210 	orr.w	r2, r2, #16
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	440b      	add	r3, r1
 8006d4a:	605a      	str	r2, [r3, #4]

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d016      	beq.n	8006d86 <HAL_OSPIM_Config+0x6fa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
 8006d58:	4a30      	ldr	r2, [pc, #192]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006d6e:	492b      	ldr	r1, [pc, #172]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	3b01      	subs	r3, #1
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	440b      	add	r3, r1
 8006d82:	605a      	str	r2, [r3, #4]
 8006d84:	e015      	b.n	8006db2 <HAL_OSPIM_Config+0x726>
      }
      else
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC), OCTOSPIM_PCR_IOHEN);
 8006d86:	4a25      	ldr	r2, [pc, #148]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006d9c:	491f      	ldr	r1, [pc, #124]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	440b      	add	r3, r1
 8006db0:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d016      	beq.n	8006dec <HAL_OSPIM_Config+0x760>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
 8006dbe:	4a17      	ldr	r2, [pc, #92]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006dd4:	4911      	ldr	r1, [pc, #68]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	440b      	add	r3, r1
 8006de8:	605a      	str	r2, [r3, #4]
 8006dea:	e0b5      	b.n	8006f58 <HAL_OSPIM_Config+0x8cc>
      }
      else
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC), (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC_0));
 8006dec:	4a0b      	ldr	r2, [pc, #44]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006e02:	4906      	ldr	r1, [pc, #24]	; (8006e1c <HAL_OSPIM_Config+0x790>)
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	440b      	add	r3, r1
 8006e16:	605a      	str	r2, [r3, #4]
 8006e18:	e09e      	b.n	8006f58 <HAL_OSPIM_Config+0x8cc>
 8006e1a:	bf00      	nop
 8006e1c:	5200b400 	.word	0x5200b400
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
 8006e20:	4a5c      	ldr	r2, [pc, #368]	; (8006f94 <HAL_OSPIM_Config+0x908>)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3b01      	subs	r3, #1
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f023 0203 	bic.w	r2, r3, #3
 8006e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	431a      	orrs	r2, r3
 8006e38:	4956      	ldr	r1, [pc, #344]	; (8006f94 <HAL_OSPIM_Config+0x908>)
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	f042 0201 	orr.w	r2, r2, #1
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	440b      	add	r3, r1
 8006e48:	605a      	str	r2, [r3, #4]
      MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
 8006e4a:	4a52      	ldr	r2, [pc, #328]	; (8006f94 <HAL_OSPIM_Config+0x908>)
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e5e:	015b      	lsls	r3, r3, #5
 8006e60:	431a      	orrs	r2, r3
 8006e62:	494c      	ldr	r1, [pc, #304]	; (8006f94 <HAL_OSPIM_Config+0x908>)
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	f042 0210 	orr.w	r2, r2, #16
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	440b      	add	r3, r1
 8006e72:	605a      	str	r2, [r3, #4]

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d019      	beq.n	8006eb4 <HAL_OSPIM_Config+0x828>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 8006e80:	4a44      	ldr	r2, [pc, #272]	; (8006f94 <HAL_OSPIM_Config+0x908>)
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	3b01      	subs	r3, #1
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e98:	049b      	lsls	r3, r3, #18
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	493d      	ldr	r1, [pc, #244]	; (8006f94 <HAL_OSPIM_Config+0x908>)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	440b      	add	r3, r1
 8006eb0:	605a      	str	r2, [r3, #4]
 8006eb2:	e018      	b.n	8006ee6 <HAL_OSPIM_Config+0x85a>
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8006eb4:	4a37      	ldr	r2, [pc, #220]	; (8006f94 <HAL_OSPIM_Config+0x908>)
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ecc:	069b      	lsls	r3, r3, #26
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	4930      	ldr	r1, [pc, #192]	; (8006f94 <HAL_OSPIM_Config+0x908>)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	440b      	add	r3, r1
 8006ee4:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_IOHEN | (instance << (OCTOSPIM_PCR_IOHSRC_Pos+1U))));
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d019      	beq.n	8006f26 <HAL_OSPIM_Config+0x89a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 8006ef2:	4a28      	ldr	r2, [pc, #160]	; (8006f94 <HAL_OSPIM_Config+0x908>)
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f0a:	049b      	lsls	r3, r3, #18
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	4921      	ldr	r1, [pc, #132]	; (8006f94 <HAL_OSPIM_Config+0x908>)
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	605a      	str	r2, [r3, #4]
 8006f24:	e018      	b.n	8006f58 <HAL_OSPIM_Config+0x8cc>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8006f26:	4a1b      	ldr	r2, [pc, #108]	; (8006f94 <HAL_OSPIM_Config+0x908>)
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f3e:	069b      	lsls	r3, r3, #26
 8006f40:	431a      	orrs	r2, r3
 8006f42:	4914      	ldr	r1, [pc, #80]	; (8006f94 <HAL_OSPIM_Config+0x908>)
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC_0 | (instance << (OCTOSPIM_PCR_IOHSRC_Pos+1U))));
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8006f58:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d005      	beq.n	8006f70 <HAL_OSPIM_Config+0x8e4>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006f64:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <HAL_OSPIM_Config+0x90c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a0b      	ldr	r2, [pc, #44]	; (8006f98 <HAL_OSPIM_Config+0x90c>)
 8006f6a:	f043 0301 	orr.w	r3, r3, #1
 8006f6e:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8006f70:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006f74:	f003 0302 	and.w	r3, r3, #2
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d005      	beq.n	8006f88 <HAL_OSPIM_Config+0x8fc>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006f7c:	4b07      	ldr	r3, [pc, #28]	; (8006f9c <HAL_OSPIM_Config+0x910>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a06      	ldr	r2, [pc, #24]	; (8006f9c <HAL_OSPIM_Config+0x910>)
 8006f82:	f043 0301 	orr.w	r3, r3, #1
 8006f86:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8006f88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3750      	adds	r7, #80	; 0x50
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	5200b400 	.word	0x5200b400
 8006f98:	52005000 	.word	0x52005000
 8006f9c:	5200a000 	.word	0x5200a000

08006fa0 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fac:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fbc:	d122      	bne.n	8007004 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6a1b      	ldr	r3, [r3, #32]
 8006fc4:	f003 0320 	and.w	r3, r3, #32
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d014      	beq.n	8006ff6 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006fe2:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 0202 	orr.w	r2, r2, #2
 8006ff2:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif
  }
}
 8006ff4:	e00c      	b.n	8007010 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	655a      	str	r2, [r3, #84]	; 0x54
      HAL_OSPI_AbortCpltCallback(hospi);
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7ff faef 	bl	80065e0 <HAL_OSPI_AbortCpltCallback>
}
 8007002:	e005      	b.n	8007010 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2202      	movs	r2, #2
 8007008:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_OSPI_ErrorCallback(hospi);
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f7ff fade 	bl	80065cc <HAL_OSPI_ErrorCallback>
}
 8007010:	bf00      	nop
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	603b      	str	r3, [r7, #0]
 8007024:	4613      	mov	r3, r2
 8007026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007028:	e01a      	b.n	8007060 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007030:	d016      	beq.n	8007060 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007032:	f7fb ff37 	bl	8002ea4 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	429a      	cmp	r2, r3
 8007040:	d302      	bcc.n	8007048 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10b      	bne.n	8007060 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800704e:	655a      	str	r2, [r3, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007054:	f043 0201 	orr.w	r2, r3, #1
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e00e      	b.n	800707e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6a1a      	ldr	r2, [r3, #32]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	4013      	ands	r3, r2
 800706a:	2b00      	cmp	r3, #0
 800706c:	bf14      	ite	ne
 800706e:	2301      	movne	r3, #1
 8007070:	2300      	moveq	r3, #0
 8007072:	b2db      	uxtb	r3, r3
 8007074:	461a      	mov	r2, r3
 8007076:	79fb      	ldrb	r3, [r7, #7]
 8007078:	429a      	cmp	r2, r3
 800707a:	d1d6      	bne.n	800702a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
	...

08007088 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8007088:	b480      	push	{r7}
 800708a:	b089      	sub	sp, #36	; 0x24
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *ccr_reg, *tcr_reg, *ir_reg, *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80070a4:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10a      	bne.n	80070c4 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d114      	bne.n	80070f6 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80070d4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80070de:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80070e8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	e02c      	b.n	8007150 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d114      	bne.n	8007128 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007106:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8007110:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800711a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	e013      	b.n	8007150 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007130:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800713a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8007144:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800714e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007158:	431a      	orrs	r2, r3
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007162:	2b00      	cmp	r3, #0
 8007164:	d012      	beq.n	800718c <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717e:	4319      	orrs	r1, r3
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007184:	430b      	orrs	r3, r1
 8007186:	431a      	orrs	r2, r3
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f023 021f 	bic.w	r2, r3, #31
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007198:	431a      	orrs	r2, r3
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d009      	beq.n	80071ba <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d105      	bne.n	80071ba <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3a01      	subs	r2, #1
 80071b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 8095 	beq.w	80072ee <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	69db      	ldr	r3, [r3, #28]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d053      	beq.n	8007274 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d01e      	beq.n	8007212 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	4b64      	ldr	r3, [pc, #400]	; (800736c <OSPI_ConfigCmd+0x2e4>)
 80071da:	4013      	ands	r3, r2
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	68d1      	ldr	r1, [r2, #12]
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	6952      	ldr	r2, [r2, #20]
 80071e4:	4311      	orrs	r1, r2
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	6912      	ldr	r2, [r2, #16]
 80071ea:	4311      	orrs	r1, r2
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	69d2      	ldr	r2, [r2, #28]
 80071f0:	4311      	orrs	r1, r2
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071f6:	4311      	orrs	r1, r2
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	6a12      	ldr	r2, [r2, #32]
 80071fc:	4311      	orrs	r1, r2
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007202:	4311      	orrs	r1, r2
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007208:	430a      	orrs	r2, r1
 800720a:	431a      	orrs	r2, r3
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	e026      	b.n	8007260 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	4b56      	ldr	r3, [pc, #344]	; (8007370 <OSPI_ConfigCmd+0x2e8>)
 8007218:	4013      	ands	r3, r2
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	68d1      	ldr	r1, [r2, #12]
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	6952      	ldr	r2, [r2, #20]
 8007222:	4311      	orrs	r1, r2
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	6912      	ldr	r2, [r2, #16]
 8007228:	4311      	orrs	r1, r2
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	69d2      	ldr	r2, [r2, #28]
 800722e:	4311      	orrs	r1, r2
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007234:	4311      	orrs	r1, r2
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	6a12      	ldr	r2, [r2, #32]
 800723a:	430a      	orrs	r2, r1
 800723c:	431a      	orrs	r2, r3
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007246:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800724a:	d109      	bne.n	8007260 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8007250:	2b08      	cmp	r3, #8
 8007252:	d105      	bne.n	8007260 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	689a      	ldr	r2, [r3, #8]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	6992      	ldr	r2, [r2, #24]
 8007270:	649a      	str	r2, [r3, #72]	; 0x48
 8007272:	e074      	b.n	800735e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007278:	2b00      	cmp	r3, #0
 800727a:	d015      	beq.n	80072a8 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	4b3c      	ldr	r3, [pc, #240]	; (8007374 <OSPI_ConfigCmd+0x2ec>)
 8007282:	4013      	ands	r3, r2
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	68d1      	ldr	r1, [r2, #12]
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	6952      	ldr	r2, [r2, #20]
 800728c:	4311      	orrs	r1, r2
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	6912      	ldr	r2, [r2, #16]
 8007292:	4311      	orrs	r1, r2
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007298:	4311      	orrs	r1, r2
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800729e:	430a      	orrs	r2, r1
 80072a0:	431a      	orrs	r2, r3
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	e01d      	b.n	80072e4 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	68d9      	ldr	r1, [r3, #12]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	4319      	orrs	r1, r3
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	430b      	orrs	r3, r1
 80072c0:	431a      	orrs	r2, r3
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072ce:	d109      	bne.n	80072e4 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d105      	bne.n	80072e4 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	e037      	b.n	800735e <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d02e      	beq.n	8007354 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d015      	beq.n	800732a <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	4b1d      	ldr	r3, [pc, #116]	; (8007378 <OSPI_ConfigCmd+0x2f0>)
 8007304:	4013      	ands	r3, r2
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	69d1      	ldr	r1, [r2, #28]
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800730e:	4311      	orrs	r1, r2
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	6a12      	ldr	r2, [r2, #32]
 8007314:	4311      	orrs	r1, r2
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800731a:	4311      	orrs	r1, r2
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007320:	430a      	orrs	r2, r1
 8007322:	431a      	orrs	r2, r3
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	e00e      	b.n	8007348 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	69d9      	ldr	r1, [r3, #28]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	4319      	orrs	r1, r3
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	430b      	orrs	r3, r1
 8007342:	431a      	orrs	r2, r3
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	6992      	ldr	r2, [r2, #24]
 8007350:	649a      	str	r2, [r3, #72]	; 0x48
 8007352:	e004      	b.n	800735e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2208      	movs	r2, #8
 800735c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Return function status */
  return status;
 800735e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3724      	adds	r7, #36	; 0x24
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	f0ffc0c0 	.word	0xf0ffc0c0
 8007370:	ffffc0c0 	.word	0xffffc0c0
 8007374:	f0ffffc0 	.word	0xf0ffffc0
 8007378:	f0ffc0ff 	.word	0xf0ffc0ff

0800737c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	4603      	mov	r3, r0
 8007384:	6039      	str	r1, [r7, #0]
 8007386:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg, value = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8007390:	79fb      	ldrb	r3, [r7, #7]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d005      	beq.n	80073a2 <OSPIM_GetConfig+0x26>
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	2b02      	cmp	r3, #2
 800739a:	d802      	bhi.n	80073a2 <OSPIM_GetConfig+0x26>
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d102      	bne.n	80073a8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	75fb      	strb	r3, [r7, #23]
 80073a6:	e098      	b.n	80074da <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2200      	movs	r2, #0
 80073b2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	2200      	movs	r2, #0
 80073b8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2200      	movs	r2, #0
 80073be:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2200      	movs	r2, #0
 80073c4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80073c6:	79fb      	ldrb	r3, [r7, #7]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d10b      	bne.n	80073e4 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80073cc:	4b46      	ldr	r3, [pc, #280]	; (80074e8 <OSPIM_GetConfig+0x16c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d102      	bne.n	80073de <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
 80073d8:	4b44      	ldr	r3, [pc, #272]	; (80074ec <OSPIM_GetConfig+0x170>)
 80073da:	613b      	str	r3, [r7, #16]
 80073dc:	e002      	b.n	80073e4 <OSPIM_GetConfig+0x68>
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80073de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073e2:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80073e4:	2300      	movs	r3, #0
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	e074      	b.n	80074d4 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80073ea:	4a3f      	ldr	r2, [pc, #252]	; (80074e8 <OSPIM_GetConfig+0x16c>)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	4053      	eors	r3, r2
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d103      	bne.n	8007416 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f003 0310 	and.w	r3, r3, #16
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	4053      	eors	r3, r2
 8007426:	f003 0320 	and.w	r3, r3, #32
 800742a:	2b00      	cmp	r3, #0
 800742c:	d103      	bne.n	8007436 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00a      	beq.n	8007456 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	4053      	eors	r3, r2
 8007446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800744a:	2b00      	cmp	r3, #0
 800744c:	d103      	bne.n	8007456 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d018      	beq.n	8007492 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	4053      	eors	r3, r2
 8007466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d111      	bne.n	8007492 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d106      	bne.n	8007486 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	3301      	adds	r3, #1
 800747c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	60da      	str	r2, [r3, #12]
 8007484:	e005      	b.n	8007492 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	3301      	adds	r3, #1
 800748a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d018      	beq.n	80074ce <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	4053      	eors	r3, r2
 80074a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d111      	bne.n	80074ce <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d106      	bne.n	80074c2 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	3301      	adds	r3, #1
 80074b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	611a      	str	r2, [r3, #16]
 80074c0:	e005      	b.n	80074ce <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	3301      	adds	r3, #1
 80074c6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3301      	adds	r3, #1
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d987      	bls.n	80073ea <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80074da:	7dfb      	ldrb	r3, [r7, #23]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	371c      	adds	r7, #28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	5200b400 	.word	0x5200b400
 80074ec:	04040222 	.word	0x04040222

080074f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80074f8:	4b19      	ldr	r3, [pc, #100]	; (8007560 <HAL_PWREx_ConfigSupply+0x70>)
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b04      	cmp	r3, #4
 8007502:	d00a      	beq.n	800751a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007504:	4b16      	ldr	r3, [pc, #88]	; (8007560 <HAL_PWREx_ConfigSupply+0x70>)
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	f003 0307 	and.w	r3, r3, #7
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	429a      	cmp	r2, r3
 8007510:	d001      	beq.n	8007516 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e01f      	b.n	8007556 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	e01d      	b.n	8007556 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800751a:	4b11      	ldr	r3, [pc, #68]	; (8007560 <HAL_PWREx_ConfigSupply+0x70>)
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	f023 0207 	bic.w	r2, r3, #7
 8007522:	490f      	ldr	r1, [pc, #60]	; (8007560 <HAL_PWREx_ConfigSupply+0x70>)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4313      	orrs	r3, r2
 8007528:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800752a:	f7fb fcbb 	bl	8002ea4 <HAL_GetTick>
 800752e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007530:	e009      	b.n	8007546 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007532:	f7fb fcb7 	bl	8002ea4 <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007540:	d901      	bls.n	8007546 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e007      	b.n	8007556 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007546:	4b06      	ldr	r3, [pc, #24]	; (8007560 <HAL_PWREx_ConfigSupply+0x70>)
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800754e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007552:	d1ee      	bne.n	8007532 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	58024800 	.word	0x58024800

08007564 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b08c      	sub	sp, #48	; 0x30
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e3d7      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	f000 80b3 	beq.w	80076ea <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007584:	4b90      	ldr	r3, [pc, #576]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800758c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800758e:	4b8e      	ldr	r3, [pc, #568]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007592:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007596:	2b10      	cmp	r3, #16
 8007598:	d007      	beq.n	80075aa <HAL_RCC_OscConfig+0x46>
 800759a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759c:	2b18      	cmp	r3, #24
 800759e:	d112      	bne.n	80075c6 <HAL_RCC_OscConfig+0x62>
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	f003 0303 	and.w	r3, r3, #3
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d10d      	bne.n	80075c6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075aa:	4b87      	ldr	r3, [pc, #540]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 8098 	beq.w	80076e8 <HAL_RCC_OscConfig+0x184>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f040 8093 	bne.w	80076e8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e3af      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ce:	d106      	bne.n	80075de <HAL_RCC_OscConfig+0x7a>
 80075d0:	4b7d      	ldr	r3, [pc, #500]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a7c      	ldr	r2, [pc, #496]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80075d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075da:	6013      	str	r3, [r2, #0]
 80075dc:	e058      	b.n	8007690 <HAL_RCC_OscConfig+0x12c>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d112      	bne.n	800760c <HAL_RCC_OscConfig+0xa8>
 80075e6:	4b78      	ldr	r3, [pc, #480]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a77      	ldr	r2, [pc, #476]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80075ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075f0:	6013      	str	r3, [r2, #0]
 80075f2:	4b75      	ldr	r3, [pc, #468]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a74      	ldr	r2, [pc, #464]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80075f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	4b72      	ldr	r3, [pc, #456]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a71      	ldr	r2, [pc, #452]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007604:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	e041      	b.n	8007690 <HAL_RCC_OscConfig+0x12c>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007614:	d112      	bne.n	800763c <HAL_RCC_OscConfig+0xd8>
 8007616:	4b6c      	ldr	r3, [pc, #432]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a6b      	ldr	r2, [pc, #428]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 800761c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007620:	6013      	str	r3, [r2, #0]
 8007622:	4b69      	ldr	r3, [pc, #420]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a68      	ldr	r2, [pc, #416]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007628:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	4b66      	ldr	r3, [pc, #408]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a65      	ldr	r2, [pc, #404]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	e029      	b.n	8007690 <HAL_RCC_OscConfig+0x12c>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8007644:	d112      	bne.n	800766c <HAL_RCC_OscConfig+0x108>
 8007646:	4b60      	ldr	r3, [pc, #384]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a5f      	ldr	r2, [pc, #380]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 800764c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007650:	6013      	str	r3, [r2, #0]
 8007652:	4b5d      	ldr	r3, [pc, #372]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a5c      	ldr	r2, [pc, #368]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800765c:	6013      	str	r3, [r2, #0]
 800765e:	4b5a      	ldr	r3, [pc, #360]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a59      	ldr	r2, [pc, #356]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007668:	6013      	str	r3, [r2, #0]
 800766a:	e011      	b.n	8007690 <HAL_RCC_OscConfig+0x12c>
 800766c:	4b56      	ldr	r3, [pc, #344]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a55      	ldr	r2, [pc, #340]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	4b53      	ldr	r3, [pc, #332]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a52      	ldr	r2, [pc, #328]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 800767e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	4b50      	ldr	r3, [pc, #320]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a4f      	ldr	r2, [pc, #316]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 800768a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800768e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d013      	beq.n	80076c0 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007698:	f7fb fc04 	bl	8002ea4 <HAL_GetTick>
 800769c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800769e:	e008      	b.n	80076b2 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076a0:	f7fb fc00 	bl	8002ea4 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b64      	cmp	r3, #100	; 0x64
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e339      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076b2:	4b45      	ldr	r3, [pc, #276]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0f0      	beq.n	80076a0 <HAL_RCC_OscConfig+0x13c>
 80076be:	e014      	b.n	80076ea <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076c0:	f7fb fbf0 	bl	8002ea4 <HAL_GetTick>
 80076c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80076c6:	e008      	b.n	80076da <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076c8:	f7fb fbec 	bl	8002ea4 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	2b64      	cmp	r3, #100	; 0x64
 80076d4:	d901      	bls.n	80076da <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e325      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80076da:	4b3b      	ldr	r3, [pc, #236]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1f0      	bne.n	80076c8 <HAL_RCC_OscConfig+0x164>
 80076e6:	e000      	b.n	80076ea <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d070      	beq.n	80077d8 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076f6:	4b34      	ldr	r3, [pc, #208]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076fe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007700:	4b31      	ldr	r3, [pc, #196]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007704:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d007      	beq.n	800771c <HAL_RCC_OscConfig+0x1b8>
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	2b18      	cmp	r3, #24
 8007710:	d11b      	bne.n	800774a <HAL_RCC_OscConfig+0x1e6>
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	f003 0303 	and.w	r3, r3, #3
 8007718:	2b00      	cmp	r3, #0
 800771a:	d116      	bne.n	800774a <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800771c:	4b2a      	ldr	r3, [pc, #168]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0304 	and.w	r3, r3, #4
 8007724:	2b00      	cmp	r3, #0
 8007726:	d005      	beq.n	8007734 <HAL_RCC_OscConfig+0x1d0>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e2f8      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007734:	4b24      	ldr	r3, [pc, #144]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	061b      	lsls	r3, r3, #24
 8007742:	4921      	ldr	r1, [pc, #132]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007744:	4313      	orrs	r3, r2
 8007746:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007748:	e046      	b.n	80077d8 <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d026      	beq.n	80077a0 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007752:	4b1d      	ldr	r3, [pc, #116]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f023 0219 	bic.w	r2, r3, #25
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	491a      	ldr	r1, [pc, #104]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007760:	4313      	orrs	r3, r2
 8007762:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007764:	f7fb fb9e 	bl	8002ea4 <HAL_GetTick>
 8007768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800776a:	e008      	b.n	800777e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800776c:	f7fb fb9a 	bl	8002ea4 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b02      	cmp	r3, #2
 8007778:	d901      	bls.n	800777e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e2d3      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800777e:	4b12      	ldr	r3, [pc, #72]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0304 	and.w	r3, r3, #4
 8007786:	2b00      	cmp	r3, #0
 8007788:	d0f0      	beq.n	800776c <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800778a:	4b0f      	ldr	r3, [pc, #60]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	061b      	lsls	r3, r3, #24
 8007798:	490b      	ldr	r1, [pc, #44]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 800779a:	4313      	orrs	r3, r2
 800779c:	604b      	str	r3, [r1, #4]
 800779e:	e01b      	b.n	80077d8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077a0:	4b09      	ldr	r3, [pc, #36]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a08      	ldr	r2, [pc, #32]	; (80077c8 <HAL_RCC_OscConfig+0x264>)
 80077a6:	f023 0301 	bic.w	r3, r3, #1
 80077aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ac:	f7fb fb7a 	bl	8002ea4 <HAL_GetTick>
 80077b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077b2:	e00b      	b.n	80077cc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077b4:	f7fb fb76 	bl	8002ea4 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d904      	bls.n	80077cc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e2af      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
 80077c6:	bf00      	nop
 80077c8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077cc:	4b99      	ldr	r3, [pc, #612]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0304 	and.w	r3, r3, #4
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1ed      	bne.n	80077b4 <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0310 	and.w	r3, r3, #16
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d06a      	beq.n	80078ba <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077e4:	4b93      	ldr	r3, [pc, #588]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077ec:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077ee:	4b91      	ldr	r3, [pc, #580]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 80077f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	2b08      	cmp	r3, #8
 80077f8:	d007      	beq.n	800780a <HAL_RCC_OscConfig+0x2a6>
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	2b18      	cmp	r3, #24
 80077fe:	d11b      	bne.n	8007838 <HAL_RCC_OscConfig+0x2d4>
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f003 0303 	and.w	r3, r3, #3
 8007806:	2b01      	cmp	r3, #1
 8007808:	d116      	bne.n	8007838 <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800780a:	4b8a      	ldr	r3, [pc, #552]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007812:	2b00      	cmp	r3, #0
 8007814:	d005      	beq.n	8007822 <HAL_RCC_OscConfig+0x2be>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	2b80      	cmp	r3, #128	; 0x80
 800781c:	d001      	beq.n	8007822 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e281      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007822:	4b84      	ldr	r3, [pc, #528]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	061b      	lsls	r3, r3, #24
 8007830:	4980      	ldr	r1, [pc, #512]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 8007832:	4313      	orrs	r3, r2
 8007834:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007836:	e040      	b.n	80078ba <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d023      	beq.n	8007888 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007840:	4b7c      	ldr	r3, [pc, #496]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a7b      	ldr	r2, [pc, #492]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 8007846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800784a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800784c:	f7fb fb2a 	bl	8002ea4 <HAL_GetTick>
 8007850:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007852:	e008      	b.n	8007866 <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007854:	f7fb fb26 	bl	8002ea4 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e25f      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007866:	4b73      	ldr	r3, [pc, #460]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0f0      	beq.n	8007854 <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007872:	4b70      	ldr	r3, [pc, #448]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	061b      	lsls	r3, r3, #24
 8007880:	496c      	ldr	r1, [pc, #432]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 8007882:	4313      	orrs	r3, r2
 8007884:	60cb      	str	r3, [r1, #12]
 8007886:	e018      	b.n	80078ba <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007888:	4b6a      	ldr	r3, [pc, #424]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a69      	ldr	r2, [pc, #420]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 800788e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007894:	f7fb fb06 	bl	8002ea4 <HAL_GetTick>
 8007898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800789a:	e008      	b.n	80078ae <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800789c:	f7fb fb02 	bl	8002ea4 <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d901      	bls.n	80078ae <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e23b      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80078ae:	4b61      	ldr	r3, [pc, #388]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1f0      	bne.n	800789c <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0308 	and.w	r3, r3, #8
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d036      	beq.n	8007934 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d019      	beq.n	8007902 <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078ce:	4b59      	ldr	r3, [pc, #356]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 80078d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078d2:	4a58      	ldr	r2, [pc, #352]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 80078d4:	f043 0301 	orr.w	r3, r3, #1
 80078d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078da:	f7fb fae3 	bl	8002ea4 <HAL_GetTick>
 80078de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80078e0:	e008      	b.n	80078f4 <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078e2:	f7fb fadf 	bl	8002ea4 <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e218      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80078f4:	4b4f      	ldr	r3, [pc, #316]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 80078f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d0f0      	beq.n	80078e2 <HAL_RCC_OscConfig+0x37e>
 8007900:	e018      	b.n	8007934 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007902:	4b4c      	ldr	r3, [pc, #304]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 8007904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007906:	4a4b      	ldr	r2, [pc, #300]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 8007908:	f023 0301 	bic.w	r3, r3, #1
 800790c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800790e:	f7fb fac9 	bl	8002ea4 <HAL_GetTick>
 8007912:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007914:	e008      	b.n	8007928 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007916:	f7fb fac5 	bl	8002ea4 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	2b02      	cmp	r3, #2
 8007922:	d901      	bls.n	8007928 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e1fe      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007928:	4b42      	ldr	r3, [pc, #264]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 800792a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1f0      	bne.n	8007916 <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0320 	and.w	r3, r3, #32
 800793c:	2b00      	cmp	r3, #0
 800793e:	d036      	beq.n	80079ae <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d019      	beq.n	800797c <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007948:	4b3a      	ldr	r3, [pc, #232]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a39      	ldr	r2, [pc, #228]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 800794e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007952:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007954:	f7fb faa6 	bl	8002ea4 <HAL_GetTick>
 8007958:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800795a:	e008      	b.n	800796e <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800795c:	f7fb faa2 	bl	8002ea4 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	2b02      	cmp	r3, #2
 8007968:	d901      	bls.n	800796e <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e1db      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800796e:	4b31      	ldr	r3, [pc, #196]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d0f0      	beq.n	800795c <HAL_RCC_OscConfig+0x3f8>
 800797a:	e018      	b.n	80079ae <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800797c:	4b2d      	ldr	r3, [pc, #180]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a2c      	ldr	r2, [pc, #176]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 8007982:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007986:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007988:	f7fb fa8c 	bl	8002ea4 <HAL_GetTick>
 800798c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800798e:	e008      	b.n	80079a2 <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007990:	f7fb fa88 	bl	8002ea4 <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	2b02      	cmp	r3, #2
 800799c:	d901      	bls.n	80079a2 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e1c1      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80079a2:	4b24      	ldr	r3, [pc, #144]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1f0      	bne.n	8007990 <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0304 	and.w	r3, r3, #4
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 80af 	beq.w	8007b1a <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80079bc:	4b1e      	ldr	r3, [pc, #120]	; (8007a38 <HAL_RCC_OscConfig+0x4d4>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a1d      	ldr	r2, [pc, #116]	; (8007a38 <HAL_RCC_OscConfig+0x4d4>)
 80079c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079c8:	f7fb fa6c 	bl	8002ea4 <HAL_GetTick>
 80079cc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079ce:	e008      	b.n	80079e2 <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80079d0:	f7fb fa68 	bl	8002ea4 <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	2b64      	cmp	r3, #100	; 0x64
 80079dc:	d901      	bls.n	80079e2 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e1a1      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079e2:	4b15      	ldr	r3, [pc, #84]	; (8007a38 <HAL_RCC_OscConfig+0x4d4>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0f0      	beq.n	80079d0 <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d106      	bne.n	8007a04 <HAL_RCC_OscConfig+0x4a0>
 80079f6:	4b0f      	ldr	r3, [pc, #60]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 80079f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fa:	4a0e      	ldr	r2, [pc, #56]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 80079fc:	f043 0301 	orr.w	r3, r3, #1
 8007a00:	6713      	str	r3, [r2, #112]	; 0x70
 8007a02:	e05b      	b.n	8007abc <HAL_RCC_OscConfig+0x558>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d117      	bne.n	8007a3c <HAL_RCC_OscConfig+0x4d8>
 8007a0c:	4b09      	ldr	r3, [pc, #36]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 8007a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a10:	4a08      	ldr	r2, [pc, #32]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 8007a12:	f023 0301 	bic.w	r3, r3, #1
 8007a16:	6713      	str	r3, [r2, #112]	; 0x70
 8007a18:	4b06      	ldr	r3, [pc, #24]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 8007a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1c:	4a05      	ldr	r2, [pc, #20]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 8007a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a22:	6713      	str	r3, [r2, #112]	; 0x70
 8007a24:	4b03      	ldr	r3, [pc, #12]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 8007a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a28:	4a02      	ldr	r2, [pc, #8]	; (8007a34 <HAL_RCC_OscConfig+0x4d0>)
 8007a2a:	f023 0304 	bic.w	r3, r3, #4
 8007a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a30:	e044      	b.n	8007abc <HAL_RCC_OscConfig+0x558>
 8007a32:	bf00      	nop
 8007a34:	58024400 	.word	0x58024400
 8007a38:	58024800 	.word	0x58024800
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	2b05      	cmp	r3, #5
 8007a42:	d112      	bne.n	8007a6a <HAL_RCC_OscConfig+0x506>
 8007a44:	4b95      	ldr	r3, [pc, #596]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a48:	4a94      	ldr	r2, [pc, #592]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007a4a:	f043 0304 	orr.w	r3, r3, #4
 8007a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a50:	4b92      	ldr	r3, [pc, #584]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a54:	4a91      	ldr	r2, [pc, #580]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a5c:	4b8f      	ldr	r3, [pc, #572]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a60:	4a8e      	ldr	r2, [pc, #568]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007a62:	f043 0301 	orr.w	r3, r3, #1
 8007a66:	6713      	str	r3, [r2, #112]	; 0x70
 8007a68:	e028      	b.n	8007abc <HAL_RCC_OscConfig+0x558>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	2b85      	cmp	r3, #133	; 0x85
 8007a70:	d112      	bne.n	8007a98 <HAL_RCC_OscConfig+0x534>
 8007a72:	4b8a      	ldr	r3, [pc, #552]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a76:	4a89      	ldr	r2, [pc, #548]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007a78:	f043 0304 	orr.w	r3, r3, #4
 8007a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a7e:	4b87      	ldr	r3, [pc, #540]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a82:	4a86      	ldr	r2, [pc, #536]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a88:	6713      	str	r3, [r2, #112]	; 0x70
 8007a8a:	4b84      	ldr	r3, [pc, #528]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8e:	4a83      	ldr	r2, [pc, #524]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007a90:	f043 0301 	orr.w	r3, r3, #1
 8007a94:	6713      	str	r3, [r2, #112]	; 0x70
 8007a96:	e011      	b.n	8007abc <HAL_RCC_OscConfig+0x558>
 8007a98:	4b80      	ldr	r3, [pc, #512]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9c:	4a7f      	ldr	r2, [pc, #508]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007a9e:	f023 0301 	bic.w	r3, r3, #1
 8007aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8007aa4:	4b7d      	ldr	r3, [pc, #500]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa8:	4a7c      	ldr	r2, [pc, #496]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007aaa:	f023 0304 	bic.w	r3, r3, #4
 8007aae:	6713      	str	r3, [r2, #112]	; 0x70
 8007ab0:	4b7a      	ldr	r3, [pc, #488]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab4:	4a79      	ldr	r2, [pc, #484]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d015      	beq.n	8007af0 <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ac4:	f7fb f9ee 	bl	8002ea4 <HAL_GetTick>
 8007ac8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007aca:	e00a      	b.n	8007ae2 <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007acc:	f7fb f9ea 	bl	8002ea4 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e121      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ae2:	4b6e      	ldr	r3, [pc, #440]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d0ee      	beq.n	8007acc <HAL_RCC_OscConfig+0x568>
 8007aee:	e014      	b.n	8007b1a <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007af0:	f7fb f9d8 	bl	8002ea4 <HAL_GetTick>
 8007af4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007af6:	e00a      	b.n	8007b0e <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007af8:	f7fb f9d4 	bl	8002ea4 <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d901      	bls.n	8007b0e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e10b      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b0e:	4b63      	ldr	r3, [pc, #396]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b12:	f003 0302 	and.w	r3, r3, #2
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1ee      	bne.n	8007af8 <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 8100 	beq.w	8007d24 <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007b24:	4b5d      	ldr	r3, [pc, #372]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b2c:	2b18      	cmp	r3, #24
 8007b2e:	f000 80bb 	beq.w	8007ca8 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	f040 8095 	bne.w	8007c66 <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b3c:	4b57      	ldr	r3, [pc, #348]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a56      	ldr	r2, [pc, #344]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b48:	f7fb f9ac 	bl	8002ea4 <HAL_GetTick>
 8007b4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b4e:	e008      	b.n	8007b62 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b50:	f7fb f9a8 	bl	8002ea4 <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d901      	bls.n	8007b62 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e0e1      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b62:	4b4e      	ldr	r3, [pc, #312]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1f0      	bne.n	8007b50 <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b6e:	4b4b      	ldr	r3, [pc, #300]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b72:	4b4b      	ldr	r3, [pc, #300]	; (8007ca0 <HAL_RCC_OscConfig+0x73c>)
 8007b74:	4013      	ands	r3, r2
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007b7e:	0112      	lsls	r2, r2, #4
 8007b80:	430a      	orrs	r2, r1
 8007b82:	4946      	ldr	r1, [pc, #280]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	628b      	str	r3, [r1, #40]	; 0x28
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b96:	3b01      	subs	r3, #1
 8007b98:	025b      	lsls	r3, r3, #9
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	041b      	lsls	r3, r3, #16
 8007ba6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007baa:	431a      	orrs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	061b      	lsls	r3, r3, #24
 8007bb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007bb8:	4938      	ldr	r1, [pc, #224]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007bbe:	4b37      	ldr	r3, [pc, #220]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc2:	4a36      	ldr	r2, [pc, #216]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007bc4:	f023 0301 	bic.w	r3, r3, #1
 8007bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007bca:	4b34      	ldr	r3, [pc, #208]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bce:	4b35      	ldr	r3, [pc, #212]	; (8007ca4 <HAL_RCC_OscConfig+0x740>)
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007bd6:	00d2      	lsls	r2, r2, #3
 8007bd8:	4930      	ldr	r1, [pc, #192]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007bde:	4b2f      	ldr	r3, [pc, #188]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be2:	f023 020c 	bic.w	r2, r3, #12
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	492c      	ldr	r1, [pc, #176]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007bf0:	4b2a      	ldr	r3, [pc, #168]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf4:	f023 0202 	bic.w	r2, r3, #2
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfc:	4927      	ldr	r1, [pc, #156]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c02:	4b26      	ldr	r3, [pc, #152]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c06:	4a25      	ldr	r2, [pc, #148]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c0e:	4b23      	ldr	r3, [pc, #140]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c12:	4a22      	ldr	r2, [pc, #136]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007c1a:	4b20      	ldr	r3, [pc, #128]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1e:	4a1f      	ldr	r2, [pc, #124]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007c26:	4b1d      	ldr	r3, [pc, #116]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2a:	4a1c      	ldr	r2, [pc, #112]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007c2c:	f043 0301 	orr.w	r3, r3, #1
 8007c30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c32:	4b1a      	ldr	r3, [pc, #104]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a19      	ldr	r2, [pc, #100]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007c38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c3e:	f7fb f931 	bl	8002ea4 <HAL_GetTick>
 8007c42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c44:	e008      	b.n	8007c58 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c46:	f7fb f92d 	bl	8002ea4 <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d901      	bls.n	8007c58 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e066      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c58:	4b10      	ldr	r3, [pc, #64]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d0f0      	beq.n	8007c46 <HAL_RCC_OscConfig+0x6e2>
 8007c64:	e05e      	b.n	8007d24 <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c66:	4b0d      	ldr	r3, [pc, #52]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a0c      	ldr	r2, [pc, #48]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007c6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c72:	f7fb f917 	bl	8002ea4 <HAL_GetTick>
 8007c76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c78:	e008      	b.n	8007c8c <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c7a:	f7fb f913 	bl	8002ea4 <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d901      	bls.n	8007c8c <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e04c      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c8c:	4b03      	ldr	r3, [pc, #12]	; (8007c9c <HAL_RCC_OscConfig+0x738>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1f0      	bne.n	8007c7a <HAL_RCC_OscConfig+0x716>
 8007c98:	e044      	b.n	8007d24 <HAL_RCC_OscConfig+0x7c0>
 8007c9a:	bf00      	nop
 8007c9c:	58024400 	.word	0x58024400
 8007ca0:	fffffc0c 	.word	0xfffffc0c
 8007ca4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007ca8:	4b21      	ldr	r3, [pc, #132]	; (8007d30 <HAL_RCC_OscConfig+0x7cc>)
 8007caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007cae:	4b20      	ldr	r3, [pc, #128]	; (8007d30 <HAL_RCC_OscConfig+0x7cc>)
 8007cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d031      	beq.n	8007d20 <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f003 0203 	and.w	r2, r3, #3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d12a      	bne.n	8007d20 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	091b      	lsrs	r3, r3, #4
 8007cce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d122      	bne.n	8007d20 <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d11a      	bne.n	8007d20 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	0a5b      	lsrs	r3, r3, #9
 8007cee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d111      	bne.n	8007d20 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	0c1b      	lsrs	r3, r3, #16
 8007d00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d08:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d108      	bne.n	8007d20 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	0e1b      	lsrs	r3, r3, #24
 8007d12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d001      	beq.n	8007d24 <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e000      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3730      	adds	r7, #48	; 0x30
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	58024400 	.word	0x58024400

08007d34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e19c      	b.n	8008082 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d48:	4b8a      	ldr	r3, [pc, #552]	; (8007f74 <HAL_RCC_ClockConfig+0x240>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 030f 	and.w	r3, r3, #15
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d910      	bls.n	8007d78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d56:	4b87      	ldr	r3, [pc, #540]	; (8007f74 <HAL_RCC_ClockConfig+0x240>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f023 020f 	bic.w	r2, r3, #15
 8007d5e:	4985      	ldr	r1, [pc, #532]	; (8007f74 <HAL_RCC_ClockConfig+0x240>)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d66:	4b83      	ldr	r3, [pc, #524]	; (8007f74 <HAL_RCC_ClockConfig+0x240>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d001      	beq.n	8007d78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e184      	b.n	8008082 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d010      	beq.n	8007da6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	691a      	ldr	r2, [r3, #16]
 8007d88:	4b7b      	ldr	r3, [pc, #492]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d908      	bls.n	8007da6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007d94:	4b78      	ldr	r3, [pc, #480]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	4975      	ldr	r1, [pc, #468]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0308 	and.w	r3, r3, #8
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d010      	beq.n	8007dd4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	695a      	ldr	r2, [r3, #20]
 8007db6:	4b70      	ldr	r3, [pc, #448]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d908      	bls.n	8007dd4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007dc2:	4b6d      	ldr	r3, [pc, #436]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	496a      	ldr	r1, [pc, #424]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0310 	and.w	r3, r3, #16
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d010      	beq.n	8007e02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	699a      	ldr	r2, [r3, #24]
 8007de4:	4b64      	ldr	r3, [pc, #400]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d908      	bls.n	8007e02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007df0:	4b61      	ldr	r3, [pc, #388]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	495e      	ldr	r1, [pc, #376]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0320 	and.w	r3, r3, #32
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d010      	beq.n	8007e30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	69da      	ldr	r2, [r3, #28]
 8007e12:	4b59      	ldr	r3, [pc, #356]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d908      	bls.n	8007e30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007e1e:	4b56      	ldr	r3, [pc, #344]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	4953      	ldr	r1, [pc, #332]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d010      	beq.n	8007e5e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	4b4d      	ldr	r3, [pc, #308]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d908      	bls.n	8007e5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e4c:	4b4a      	ldr	r3, [pc, #296]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	f023 020f 	bic.w	r2, r3, #15
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	4947      	ldr	r1, [pc, #284]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d055      	beq.n	8007f16 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007e6a:	4b43      	ldr	r3, [pc, #268]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	4940      	ldr	r1, [pc, #256]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d107      	bne.n	8007e94 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e84:	4b3c      	ldr	r3, [pc, #240]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d121      	bne.n	8007ed4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e0f6      	b.n	8008082 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	d107      	bne.n	8007eac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e9c:	4b36      	ldr	r3, [pc, #216]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d115      	bne.n	8007ed4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e0ea      	b.n	8008082 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d107      	bne.n	8007ec4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007eb4:	4b30      	ldr	r3, [pc, #192]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d109      	bne.n	8007ed4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e0de      	b.n	8008082 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ec4:	4b2c      	ldr	r3, [pc, #176]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e0d6      	b.n	8008082 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ed4:	4b28      	ldr	r3, [pc, #160]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	f023 0207 	bic.w	r2, r3, #7
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	4925      	ldr	r1, [pc, #148]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ee6:	f7fa ffdd 	bl	8002ea4 <HAL_GetTick>
 8007eea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eec:	e00a      	b.n	8007f04 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007eee:	f7fa ffd9 	bl	8002ea4 <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d901      	bls.n	8007f04 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e0be      	b.n	8008082 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f04:	4b1c      	ldr	r3, [pc, #112]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	00db      	lsls	r3, r3, #3
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d1eb      	bne.n	8007eee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0302 	and.w	r3, r3, #2
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d010      	beq.n	8007f44 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68da      	ldr	r2, [r3, #12]
 8007f26:	4b14      	ldr	r3, [pc, #80]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	f003 030f 	and.w	r3, r3, #15
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d208      	bcs.n	8007f44 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f32:	4b11      	ldr	r3, [pc, #68]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	f023 020f 	bic.w	r2, r3, #15
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	490e      	ldr	r1, [pc, #56]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f44:	4b0b      	ldr	r3, [pc, #44]	; (8007f74 <HAL_RCC_ClockConfig+0x240>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 030f 	and.w	r3, r3, #15
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d214      	bcs.n	8007f7c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f52:	4b08      	ldr	r3, [pc, #32]	; (8007f74 <HAL_RCC_ClockConfig+0x240>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f023 020f 	bic.w	r2, r3, #15
 8007f5a:	4906      	ldr	r1, [pc, #24]	; (8007f74 <HAL_RCC_ClockConfig+0x240>)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f62:	4b04      	ldr	r3, [pc, #16]	; (8007f74 <HAL_RCC_ClockConfig+0x240>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 030f 	and.w	r3, r3, #15
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d005      	beq.n	8007f7c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e086      	b.n	8008082 <HAL_RCC_ClockConfig+0x34e>
 8007f74:	52002000 	.word	0x52002000
 8007f78:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 0304 	and.w	r3, r3, #4
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d010      	beq.n	8007faa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	691a      	ldr	r2, [r3, #16]
 8007f8c:	4b3f      	ldr	r3, [pc, #252]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d208      	bcs.n	8007faa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f98:	4b3c      	ldr	r3, [pc, #240]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	4939      	ldr	r1, [pc, #228]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0308 	and.w	r3, r3, #8
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d010      	beq.n	8007fd8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	695a      	ldr	r2, [r3, #20]
 8007fba:	4b34      	ldr	r3, [pc, #208]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8007fbc:	69db      	ldr	r3, [r3, #28]
 8007fbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d208      	bcs.n	8007fd8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007fc6:	4b31      	ldr	r3, [pc, #196]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	492e      	ldr	r1, [pc, #184]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0310 	and.w	r3, r3, #16
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d010      	beq.n	8008006 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	699a      	ldr	r2, [r3, #24]
 8007fe8:	4b28      	ldr	r3, [pc, #160]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8007fea:	69db      	ldr	r3, [r3, #28]
 8007fec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d208      	bcs.n	8008006 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ff4:	4b25      	ldr	r3, [pc, #148]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8007ff6:	69db      	ldr	r3, [r3, #28]
 8007ff8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	4922      	ldr	r1, [pc, #136]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8008002:	4313      	orrs	r3, r2
 8008004:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b00      	cmp	r3, #0
 8008010:	d010      	beq.n	8008034 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	69da      	ldr	r2, [r3, #28]
 8008016:	4b1d      	ldr	r3, [pc, #116]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800801e:	429a      	cmp	r2, r3
 8008020:	d208      	bcs.n	8008034 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008022:	4b1a      	ldr	r3, [pc, #104]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	4917      	ldr	r1, [pc, #92]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8008030:	4313      	orrs	r3, r2
 8008032:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8008034:	f000 f834 	bl	80080a0 <HAL_RCC_GetSysClockFreq>
 8008038:	4601      	mov	r1, r0
 800803a:	4b14      	ldr	r3, [pc, #80]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	0a1b      	lsrs	r3, r3, #8
 8008040:	f003 030f 	and.w	r3, r3, #15
 8008044:	4a12      	ldr	r2, [pc, #72]	; (8008090 <HAL_RCC_ClockConfig+0x35c>)
 8008046:	5cd3      	ldrb	r3, [r2, r3]
 8008048:	f003 031f 	and.w	r3, r3, #31
 800804c:	fa21 f303 	lsr.w	r3, r1, r3
 8008050:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008052:	4b0e      	ldr	r3, [pc, #56]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	f003 030f 	and.w	r3, r3, #15
 800805a:	4a0d      	ldr	r2, [pc, #52]	; (8008090 <HAL_RCC_ClockConfig+0x35c>)
 800805c:	5cd3      	ldrb	r3, [r2, r3]
 800805e:	f003 031f 	and.w	r3, r3, #31
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	fa22 f303 	lsr.w	r3, r2, r3
 8008068:	4a0a      	ldr	r2, [pc, #40]	; (8008094 <HAL_RCC_ClockConfig+0x360>)
 800806a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800806c:	4a0a      	ldr	r2, [pc, #40]	; (8008098 <HAL_RCC_ClockConfig+0x364>)
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008072:	4b0a      	ldr	r3, [pc, #40]	; (800809c <HAL_RCC_ClockConfig+0x368>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4618      	mov	r0, r3
 8008078:	f7fa feca 	bl	8002e10 <HAL_InitTick>
 800807c:	4603      	mov	r3, r0
 800807e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008080:	7bfb      	ldrb	r3, [r7, #15]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3718      	adds	r7, #24
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	58024400 	.word	0x58024400
 8008090:	0800db10 	.word	0x0800db10
 8008094:	2000002c 	.word	0x2000002c
 8008098:	20000028 	.word	0x20000028
 800809c:	20000030 	.word	0x20000030

080080a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b089      	sub	sp, #36	; 0x24
 80080a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080a6:	4baf      	ldr	r3, [pc, #700]	; (8008364 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080ae:	2b18      	cmp	r3, #24
 80080b0:	f200 814e 	bhi.w	8008350 <HAL_RCC_GetSysClockFreq+0x2b0>
 80080b4:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80080b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ba:	bf00      	nop
 80080bc:	08008121 	.word	0x08008121
 80080c0:	08008351 	.word	0x08008351
 80080c4:	08008351 	.word	0x08008351
 80080c8:	08008351 	.word	0x08008351
 80080cc:	08008351 	.word	0x08008351
 80080d0:	08008351 	.word	0x08008351
 80080d4:	08008351 	.word	0x08008351
 80080d8:	08008351 	.word	0x08008351
 80080dc:	08008147 	.word	0x08008147
 80080e0:	08008351 	.word	0x08008351
 80080e4:	08008351 	.word	0x08008351
 80080e8:	08008351 	.word	0x08008351
 80080ec:	08008351 	.word	0x08008351
 80080f0:	08008351 	.word	0x08008351
 80080f4:	08008351 	.word	0x08008351
 80080f8:	08008351 	.word	0x08008351
 80080fc:	0800814d 	.word	0x0800814d
 8008100:	08008351 	.word	0x08008351
 8008104:	08008351 	.word	0x08008351
 8008108:	08008351 	.word	0x08008351
 800810c:	08008351 	.word	0x08008351
 8008110:	08008351 	.word	0x08008351
 8008114:	08008351 	.word	0x08008351
 8008118:	08008351 	.word	0x08008351
 800811c:	08008153 	.word	0x08008153
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008120:	4b90      	ldr	r3, [pc, #576]	; (8008364 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0320 	and.w	r3, r3, #32
 8008128:	2b00      	cmp	r3, #0
 800812a:	d009      	beq.n	8008140 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800812c:	4b8d      	ldr	r3, [pc, #564]	; (8008364 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	08db      	lsrs	r3, r3, #3
 8008132:	f003 0303 	and.w	r3, r3, #3
 8008136:	4a8c      	ldr	r2, [pc, #560]	; (8008368 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008138:	fa22 f303 	lsr.w	r3, r2, r3
 800813c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800813e:	e10a      	b.n	8008356 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008140:	4b89      	ldr	r3, [pc, #548]	; (8008368 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008142:	61bb      	str	r3, [r7, #24]
    break;
 8008144:	e107      	b.n	8008356 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008146:	4b89      	ldr	r3, [pc, #548]	; (800836c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008148:	61bb      	str	r3, [r7, #24]
    break;
 800814a:	e104      	b.n	8008356 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800814c:	4b88      	ldr	r3, [pc, #544]	; (8008370 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800814e:	61bb      	str	r3, [r7, #24]
    break;
 8008150:	e101      	b.n	8008356 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008152:	4b84      	ldr	r3, [pc, #528]	; (8008364 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008156:	f003 0303 	and.w	r3, r3, #3
 800815a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800815c:	4b81      	ldr	r3, [pc, #516]	; (8008364 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800815e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008160:	091b      	lsrs	r3, r3, #4
 8008162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008166:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008168:	4b7e      	ldr	r3, [pc, #504]	; (8008364 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800816a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008172:	4b7c      	ldr	r3, [pc, #496]	; (8008364 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008176:	08db      	lsrs	r3, r3, #3
 8008178:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	fb02 f303 	mul.w	r3, r2, r3
 8008182:	ee07 3a90 	vmov	s15, r3
 8008186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 80da 	beq.w	800834a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d05a      	beq.n	8008252 <HAL_RCC_GetSysClockFreq+0x1b2>
 800819c:	2b01      	cmp	r3, #1
 800819e:	d302      	bcc.n	80081a6 <HAL_RCC_GetSysClockFreq+0x106>
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d078      	beq.n	8008296 <HAL_RCC_GetSysClockFreq+0x1f6>
 80081a4:	e099      	b.n	80082da <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081a6:	4b6f      	ldr	r3, [pc, #444]	; (8008364 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d02d      	beq.n	800820e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081b2:	4b6c      	ldr	r3, [pc, #432]	; (8008364 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	08db      	lsrs	r3, r3, #3
 80081b8:	f003 0303 	and.w	r3, r3, #3
 80081bc:	4a6a      	ldr	r2, [pc, #424]	; (8008368 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80081be:	fa22 f303 	lsr.w	r3, r2, r3
 80081c2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	ee07 3a90 	vmov	s15, r3
 80081ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	ee07 3a90 	vmov	s15, r3
 80081d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081dc:	4b61      	ldr	r3, [pc, #388]	; (8008364 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80081de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e4:	ee07 3a90 	vmov	s15, r3
 80081e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80081f0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8008374 <HAL_RCC_GetSysClockFreq+0x2d4>
 80081f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008200:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008208:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800820c:	e087      	b.n	800831e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	ee07 3a90 	vmov	s15, r3
 8008214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008218:	eddf 6a57 	vldr	s13, [pc, #348]	; 8008378 <HAL_RCC_GetSysClockFreq+0x2d8>
 800821c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008220:	4b50      	ldr	r3, [pc, #320]	; (8008364 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008228:	ee07 3a90 	vmov	s15, r3
 800822c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008230:	ed97 6a02 	vldr	s12, [r7, #8]
 8008234:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8008374 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008238:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800823c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008240:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008244:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800824c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008250:	e065      	b.n	800831e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	ee07 3a90 	vmov	s15, r3
 8008258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800837c <HAL_RCC_GetSysClockFreq+0x2dc>
 8008260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008264:	4b3f      	ldr	r3, [pc, #252]	; (8008364 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800826c:	ee07 3a90 	vmov	s15, r3
 8008270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008274:	ed97 6a02 	vldr	s12, [r7, #8]
 8008278:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008374 <HAL_RCC_GetSysClockFreq+0x2d4>
 800827c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008284:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800828c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008290:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008294:	e043      	b.n	800831e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	ee07 3a90 	vmov	s15, r3
 800829c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008380 <HAL_RCC_GetSysClockFreq+0x2e0>
 80082a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082a8:	4b2e      	ldr	r3, [pc, #184]	; (8008364 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80082aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b0:	ee07 3a90 	vmov	s15, r3
 80082b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80082bc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8008374 <HAL_RCC_GetSysClockFreq+0x2d4>
 80082c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082d8:	e021      	b.n	800831e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	ee07 3a90 	vmov	s15, r3
 80082e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800837c <HAL_RCC_GetSysClockFreq+0x2dc>
 80082e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ec:	4b1d      	ldr	r3, [pc, #116]	; (8008364 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80082ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f4:	ee07 3a90 	vmov	s15, r3
 80082f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8008300:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8008374 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008304:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008308:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800830c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008310:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008318:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800831c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800831e:	4b11      	ldr	r3, [pc, #68]	; (8008364 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008322:	0a5b      	lsrs	r3, r3, #9
 8008324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008328:	3301      	adds	r3, #1
 800832a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	ee07 3a90 	vmov	s15, r3
 8008332:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008336:	edd7 6a07 	vldr	s13, [r7, #28]
 800833a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800833e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008342:	ee17 3a90 	vmov	r3, s15
 8008346:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008348:	e005      	b.n	8008356 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	61bb      	str	r3, [r7, #24]
    break;
 800834e:	e002      	b.n	8008356 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8008350:	4b06      	ldr	r3, [pc, #24]	; (800836c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008352:	61bb      	str	r3, [r7, #24]
    break;
 8008354:	bf00      	nop
  }

  return sysclockfreq;
 8008356:	69bb      	ldr	r3, [r7, #24]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3724      	adds	r7, #36	; 0x24
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	58024400 	.word	0x58024400
 8008368:	03d09000 	.word	0x03d09000
 800836c:	003d0900 	.word	0x003d0900
 8008370:	016e3600 	.word	0x016e3600
 8008374:	46000000 	.word	0x46000000
 8008378:	4c742400 	.word	0x4c742400
 800837c:	4a742400 	.word	0x4a742400
 8008380:	4bb71b00 	.word	0x4bb71b00

08008384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800838a:	f7ff fe89 	bl	80080a0 <HAL_RCC_GetSysClockFreq>
 800838e:	4601      	mov	r1, r0
 8008390:	4b10      	ldr	r3, [pc, #64]	; (80083d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	0a1b      	lsrs	r3, r3, #8
 8008396:	f003 030f 	and.w	r3, r3, #15
 800839a:	4a0f      	ldr	r2, [pc, #60]	; (80083d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800839c:	5cd3      	ldrb	r3, [r2, r3]
 800839e:	f003 031f 	and.w	r3, r3, #31
 80083a2:	fa21 f303 	lsr.w	r3, r1, r3
 80083a6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80083a8:	4b0a      	ldr	r3, [pc, #40]	; (80083d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	f003 030f 	and.w	r3, r3, #15
 80083b0:	4a09      	ldr	r2, [pc, #36]	; (80083d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80083b2:	5cd3      	ldrb	r3, [r2, r3]
 80083b4:	f003 031f 	and.w	r3, r3, #31
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	fa22 f303 	lsr.w	r3, r2, r3
 80083be:	4a07      	ldr	r2, [pc, #28]	; (80083dc <HAL_RCC_GetHCLKFreq+0x58>)
 80083c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80083c2:	4a07      	ldr	r2, [pc, #28]	; (80083e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80083c8:	4b04      	ldr	r3, [pc, #16]	; (80083dc <HAL_RCC_GetHCLKFreq+0x58>)
 80083ca:	681b      	ldr	r3, [r3, #0]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	58024400 	.word	0x58024400
 80083d8:	0800db10 	.word	0x0800db10
 80083dc:	2000002c 	.word	0x2000002c
 80083e0:	20000028 	.word	0x20000028

080083e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80083ec:	2300      	movs	r3, #0
 80083ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80083f0:	2300      	movs	r3, #0
 80083f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d03d      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008408:	d013      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800840a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800840e:	d802      	bhi.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008410:	2b00      	cmp	r3, #0
 8008412:	d007      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8008414:	e01f      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8008416:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800841a:	d013      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800841c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008420:	d01c      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8008422:	e018      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008424:	4bad      	ldr	r3, [pc, #692]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	4aac      	ldr	r2, [pc, #688]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800842a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800842e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008430:	e015      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	3304      	adds	r3, #4
 8008436:	2102      	movs	r1, #2
 8008438:	4618      	mov	r0, r3
 800843a:	f001 fca7 	bl	8009d8c <RCCEx_PLL2_Config>
 800843e:	4603      	mov	r3, r0
 8008440:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008442:	e00c      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3324      	adds	r3, #36	; 0x24
 8008448:	2102      	movs	r1, #2
 800844a:	4618      	mov	r0, r3
 800844c:	f001 fd50 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008450:	4603      	mov	r3, r0
 8008452:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008454:	e003      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	75fb      	strb	r3, [r7, #23]
      break;
 800845a:	e000      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800845c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d109      	bne.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008464:	4b9d      	ldr	r3, [pc, #628]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008468:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008470:	499a      	ldr	r1, [pc, #616]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008472:	4313      	orrs	r3, r2
 8008474:	650b      	str	r3, [r1, #80]	; 0x50
 8008476:	e001      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008478:	7dfb      	ldrb	r3, [r7, #23]
 800847a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008484:	2b00      	cmp	r3, #0
 8008486:	d03d      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800848c:	2b04      	cmp	r3, #4
 800848e:	d826      	bhi.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8008490:	a201      	add	r2, pc, #4	; (adr r2, 8008498 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8008492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008496:	bf00      	nop
 8008498:	080084ad 	.word	0x080084ad
 800849c:	080084bb 	.word	0x080084bb
 80084a0:	080084cd 	.word	0x080084cd
 80084a4:	080084e5 	.word	0x080084e5
 80084a8:	080084e5 	.word	0x080084e5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084ac:	4b8b      	ldr	r3, [pc, #556]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80084ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b0:	4a8a      	ldr	r2, [pc, #552]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80084b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084b8:	e015      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	3304      	adds	r3, #4
 80084be:	2100      	movs	r1, #0
 80084c0:	4618      	mov	r0, r3
 80084c2:	f001 fc63 	bl	8009d8c <RCCEx_PLL2_Config>
 80084c6:	4603      	mov	r3, r0
 80084c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084ca:	e00c      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3324      	adds	r3, #36	; 0x24
 80084d0:	2100      	movs	r1, #0
 80084d2:	4618      	mov	r0, r3
 80084d4:	f001 fd0c 	bl	8009ef0 <RCCEx_PLL3_Config>
 80084d8:	4603      	mov	r3, r0
 80084da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084dc:	e003      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	75fb      	strb	r3, [r7, #23]
      break;
 80084e2:	e000      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80084e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084e6:	7dfb      	ldrb	r3, [r7, #23]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d109      	bne.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80084ec:	4b7b      	ldr	r3, [pc, #492]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80084ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f0:	f023 0207 	bic.w	r2, r3, #7
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f8:	4978      	ldr	r1, [pc, #480]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	650b      	str	r3, [r1, #80]	; 0x50
 80084fe:	e001      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800850c:	2b00      	cmp	r3, #0
 800850e:	d043      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008514:	2b80      	cmp	r3, #128	; 0x80
 8008516:	d01f      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8008518:	2b80      	cmp	r3, #128	; 0x80
 800851a:	d804      	bhi.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00b      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008520:	2b40      	cmp	r3, #64	; 0x40
 8008522:	d010      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8008524:	e021      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800852a:	d021      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800852c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008530:	d020      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8008532:	2bc0      	cmp	r3, #192	; 0xc0
 8008534:	d020      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8008536:	e018      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008538:	4b68      	ldr	r3, [pc, #416]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800853a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853c:	4a67      	ldr	r2, [pc, #412]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800853e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008542:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8008544:	e019      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	3304      	adds	r3, #4
 800854a:	2100      	movs	r1, #0
 800854c:	4618      	mov	r0, r3
 800854e:	f001 fc1d 	bl	8009d8c <RCCEx_PLL2_Config>
 8008552:	4603      	mov	r3, r0
 8008554:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8008556:	e010      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3324      	adds	r3, #36	; 0x24
 800855c:	2100      	movs	r1, #0
 800855e:	4618      	mov	r0, r3
 8008560:	f001 fcc6 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008564:	4603      	mov	r3, r0
 8008566:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8008568:	e007      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x196>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	75fb      	strb	r3, [r7, #23]
      break;
 800856e:	e004      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8008570:	bf00      	nop
 8008572:	e002      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8008574:	bf00      	nop
 8008576:	e000      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8008578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800857a:	7dfb      	ldrb	r3, [r7, #23]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d109      	bne.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008580:	4b56      	ldr	r3, [pc, #344]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008584:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800858c:	4953      	ldr	r1, [pc, #332]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800858e:	4313      	orrs	r3, r2
 8008590:	650b      	str	r3, [r1, #80]	; 0x50
 8008592:	e001      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008594:	7dfb      	ldrb	r3, [r7, #23]
 8008596:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d047      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ac:	d022      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80085ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b2:	d805      	bhi.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00d      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80085b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085bc:	d011      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80085be:	e022      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80085c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085c4:	d022      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x228>
 80085c6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80085ca:	d021      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 80085cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80085d0:	d020      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80085d2:	e018      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x222>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085d4:	4b41      	ldr	r3, [pc, #260]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	4a40      	ldr	r2, [pc, #256]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80085da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80085e0:	e019      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	3304      	adds	r3, #4
 80085e6:	2100      	movs	r1, #0
 80085e8:	4618      	mov	r0, r3
 80085ea:	f001 fbcf 	bl	8009d8c <RCCEx_PLL2_Config>
 80085ee:	4603      	mov	r3, r0
 80085f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80085f2:	e010      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3324      	adds	r3, #36	; 0x24
 80085f8:	2100      	movs	r1, #0
 80085fa:	4618      	mov	r0, r3
 80085fc:	f001 fc78 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008600:	4603      	mov	r3, r0
 8008602:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8008604:	e007      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x232>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	75fb      	strb	r3, [r7, #23]
      break;
 800860a:	e004      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 800860c:	bf00      	nop
 800860e:	e002      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8008610:	bf00      	nop
 8008612:	e000      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8008614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008616:	7dfb      	ldrb	r3, [r7, #23]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d109      	bne.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800861c:	4b2f      	ldr	r3, [pc, #188]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800861e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008620:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008628:	492c      	ldr	r1, [pc, #176]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800862a:	4313      	orrs	r3, r2
 800862c:	650b      	str	r3, [r1, #80]	; 0x50
 800862e:	e001      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008630:	7dfb      	ldrb	r3, [r7, #23]
 8008632:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d032      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008644:	2b10      	cmp	r3, #16
 8008646:	d009      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8008648:	2b10      	cmp	r3, #16
 800864a:	d802      	bhi.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800864c:	2b00      	cmp	r3, #0
 800864e:	d018      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8008650:	e014      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008652:	2b20      	cmp	r3, #32
 8008654:	d009      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008656:	2b30      	cmp	r3, #48	; 0x30
 8008658:	d015      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800865a:	e00f      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800865c:	4b1f      	ldr	r3, [pc, #124]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800865e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008660:	4a1e      	ldr	r2, [pc, #120]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008666:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008668:	e00e      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x2a4>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	3304      	adds	r3, #4
 800866e:	2102      	movs	r1, #2
 8008670:	4618      	mov	r0, r3
 8008672:	f001 fb8b 	bl	8009d8c <RCCEx_PLL2_Config>
 8008676:	4603      	mov	r3, r0
 8008678:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800867a:	e005      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	75fb      	strb	r3, [r7, #23]
      break;
 8008680:	e002      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8008682:	bf00      	nop
 8008684:	e000      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8008686:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008688:	7dfb      	ldrb	r3, [r7, #23]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d109      	bne.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800868e:	4b13      	ldr	r3, [pc, #76]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008692:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800869a:	4910      	ldr	r1, [pc, #64]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800869c:	4313      	orrs	r3, r2
 800869e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80086a0:	e001      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d044      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ba:	d021      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80086bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086c0:	d805      	bhi.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00c      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80086c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ca:	d010      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80086cc:	e021      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80086ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086d2:	d021      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x334>
 80086d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086d8:	d020      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x338>
 80086da:	e01a      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80086dc:	58024400 	.word	0x58024400
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086e0:	4ba6      	ldr	r3, [pc, #664]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80086e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e4:	4aa5      	ldr	r2, [pc, #660]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80086e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80086ec:	e017      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	3304      	adds	r3, #4
 80086f2:	2100      	movs	r1, #0
 80086f4:	4618      	mov	r0, r3
 80086f6:	f001 fb49 	bl	8009d8c <RCCEx_PLL2_Config>
 80086fa:	4603      	mov	r3, r0
 80086fc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80086fe:	e00e      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	3324      	adds	r3, #36	; 0x24
 8008704:	2100      	movs	r1, #0
 8008706:	4618      	mov	r0, r3
 8008708:	f001 fbf2 	bl	8009ef0 <RCCEx_PLL3_Config>
 800870c:	4603      	mov	r3, r0
 800870e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008710:	e005      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x33a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	75fb      	strb	r3, [r7, #23]
      break;
 8008716:	e002      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8008718:	bf00      	nop
 800871a:	e000      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 800871c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d109      	bne.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x354>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008724:	4b95      	ldr	r3, [pc, #596]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8008726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008728:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008730:	4992      	ldr	r1, [pc, #584]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8008732:	4313      	orrs	r3, r2
 8008734:	650b      	str	r3, [r1, #80]	; 0x50
 8008736:	e001      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x358>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008738:	7dfb      	ldrb	r3, [r7, #23]
 800873a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d042      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800874c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008750:	d01b      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8008752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008756:	d805      	bhi.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8008758:	2b00      	cmp	r3, #0
 800875a:	d022      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x3be>
 800875c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008760:	d00a      	beq.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8008762:	e01b      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8008764:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008768:	d01d      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 800876a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800876e:	d01c      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8008770:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008774:	d01b      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8008776:	e011      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3304      	adds	r3, #4
 800877c:	2101      	movs	r1, #1
 800877e:	4618      	mov	r0, r3
 8008780:	f001 fb04 	bl	8009d8c <RCCEx_PLL2_Config>
 8008784:	4603      	mov	r3, r0
 8008786:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008788:	e012      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	3324      	adds	r3, #36	; 0x24
 800878e:	2101      	movs	r1, #1
 8008790:	4618      	mov	r0, r3
 8008792:	f001 fbad 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008796:	4603      	mov	r3, r0
 8008798:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800879a:	e009      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	75fb      	strb	r3, [r7, #23]
      break;
 80087a0:	e006      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 80087a2:	bf00      	nop
 80087a4:	e004      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 80087a6:	bf00      	nop
 80087a8:	e002      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 80087aa:	bf00      	nop
 80087ac:	e000      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 80087ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d109      	bne.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80087b6:	4b71      	ldr	r3, [pc, #452]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80087b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087c2:	496e      	ldr	r1, [pc, #440]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80087c4:	4313      	orrs	r3, r2
 80087c6:	650b      	str	r3, [r1, #80]	; 0x50
 80087c8:	e001      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
 80087cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d049      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087e4:	d02a      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x458>
 80087e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087ea:	d808      	bhi.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80087ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087f0:	d00f      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80087f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087f6:	d015      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d021      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 80087fc:	e01b      	b.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80087fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008802:	d01f      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8008804:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008808:	d01e      	beq.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800880a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800880e:	d01d      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x468>
 8008810:	e011      	b.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x452>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	3304      	adds	r3, #4
 8008816:	2101      	movs	r1, #1
 8008818:	4618      	mov	r0, r3
 800881a:	f001 fab7 	bl	8009d8c <RCCEx_PLL2_Config>
 800881e:	4603      	mov	r3, r0
 8008820:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008822:	e014      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	3324      	adds	r3, #36	; 0x24
 8008828:	2101      	movs	r1, #1
 800882a:	4618      	mov	r0, r3
 800882c:	f001 fb60 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008830:	4603      	mov	r3, r0
 8008832:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008834:	e00b      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	75fb      	strb	r3, [r7, #23]
      break;
 800883a:	e008      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 800883c:	bf00      	nop
 800883e:	e006      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8008840:	bf00      	nop
 8008842:	e004      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8008844:	bf00      	nop
 8008846:	e002      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8008848:	bf00      	nop
 800884a:	e000      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 800884c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800884e:	7dfb      	ldrb	r3, [r7, #23]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10a      	bne.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008854:	4b49      	ldr	r3, [pc, #292]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8008856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008858:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008862:	4946      	ldr	r1, [pc, #280]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8008864:	4313      	orrs	r3, r2
 8008866:	658b      	str	r3, [r1, #88]	; 0x58
 8008868:	e001      	b.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800886a:	7dfb      	ldrb	r3, [r7, #23]
 800886c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d02d      	beq.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800887e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008882:	d005      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8008884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008888:	d009      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800888a:	2b00      	cmp	r3, #0
 800888c:	d013      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800888e:	e00f      	b.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008890:	4b3a      	ldr	r3, [pc, #232]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8008892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008894:	4a39      	ldr	r2, [pc, #228]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8008896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800889a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800889c:	e00c      	b.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	3304      	adds	r3, #4
 80088a2:	2101      	movs	r1, #1
 80088a4:	4618      	mov	r0, r3
 80088a6:	f001 fa71 	bl	8009d8c <RCCEx_PLL2_Config>
 80088aa:	4603      	mov	r3, r0
 80088ac:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80088ae:	e003      	b.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	75fb      	strb	r3, [r7, #23]
      break;
 80088b4:	e000      	b.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      break;
 80088b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088b8:	7dfb      	ldrb	r3, [r7, #23]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d109      	bne.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80088be:	4b2f      	ldr	r3, [pc, #188]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80088c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088ca:	492c      	ldr	r1, [pc, #176]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	650b      	str	r3, [r1, #80]	; 0x50
 80088d0:	e001      	b.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
 80088d4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d031      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	d81a      	bhi.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 80088ea:	a201      	add	r2, pc, #4	; (adr r2, 80088f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80088ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f0:	08008927 	.word	0x08008927
 80088f4:	08008901 	.word	0x08008901
 80088f8:	0800890f 	.word	0x0800890f
 80088fc:	08008927 	.word	0x08008927
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008900:	4b1e      	ldr	r3, [pc, #120]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8008902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008904:	4a1d      	ldr	r2, [pc, #116]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8008906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800890a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800890c:	e00c      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x544>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	3304      	adds	r3, #4
 8008912:	2102      	movs	r1, #2
 8008914:	4618      	mov	r0, r3
 8008916:	f001 fa39 	bl	8009d8c <RCCEx_PLL2_Config>
 800891a:	4603      	mov	r3, r0
 800891c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800891e:	e003      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x544>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	75fb      	strb	r3, [r7, #23]
      break;
 8008924:	e000      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x544>
      break;
 8008926:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008928:	7dfb      	ldrb	r3, [r7, #23]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d109      	bne.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800892e:	4b13      	ldr	r3, [pc, #76]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8008930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008932:	f023 0203 	bic.w	r2, r3, #3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800893a:	4910      	ldr	r1, [pc, #64]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800893c:	4313      	orrs	r3, r2
 800893e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008940:	e001      	b.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x562>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008942:	7dfb      	ldrb	r3, [r7, #23]
 8008944:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800894e:	2b00      	cmp	r3, #0
 8008950:	f000 808a 	beq.w	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008954:	4b0a      	ldr	r3, [pc, #40]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a09      	ldr	r2, [pc, #36]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800895a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800895e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008960:	f7fa faa0 	bl	8002ea4 <HAL_GetTick>
 8008964:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008966:	e00d      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008968:	f7fa fa9c 	bl	8002ea4 <HAL_GetTick>
 800896c:	4602      	mov	r2, r0
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	2b64      	cmp	r3, #100	; 0x64
 8008974:	d906      	bls.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        ret = HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	75fb      	strb	r3, [r7, #23]
        break;
 800897a:	e009      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800897c:	58024400 	.word	0x58024400
 8008980:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008984:	4bba      	ldr	r3, [pc, #744]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x88c>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800898c:	2b00      	cmp	r3, #0
 800898e:	d0eb      	beq.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x584>
      }
    }

    if(ret == HAL_OK)
 8008990:	7dfb      	ldrb	r3, [r7, #23]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d166      	bne.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008996:	4bb7      	ldr	r3, [pc, #732]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8008998:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089a0:	4053      	eors	r3, r2
 80089a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d013      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80089aa:	4bb2      	ldr	r3, [pc, #712]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80089ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089b2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089b4:	4baf      	ldr	r3, [pc, #700]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80089b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b8:	4aae      	ldr	r2, [pc, #696]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80089ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089be:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089c0:	4bac      	ldr	r3, [pc, #688]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80089c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c4:	4aab      	ldr	r2, [pc, #684]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80089c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089ca:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80089cc:	4aa9      	ldr	r2, [pc, #676]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089dc:	d115      	bne.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x626>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089de:	f7fa fa61 	bl	8002ea4 <HAL_GetTick>
 80089e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089e4:	e00b      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089e6:	f7fa fa5d 	bl	8002ea4 <HAL_GetTick>
 80089ea:	4602      	mov	r2, r0
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d902      	bls.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x61a>
          {
            ret = HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	75fb      	strb	r3, [r7, #23]
            break;
 80089fc:	e005      	b.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x626>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089fe:	4b9d      	ldr	r3, [pc, #628]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8008a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d0ed      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x602>
          }
        }
      }

      if(ret == HAL_OK)
 8008a0a:	7dfb      	ldrb	r3, [r7, #23]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d126      	bne.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a1e:	d10d      	bne.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x658>
 8008a20:	4b94      	ldr	r3, [pc, #592]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a2e:	0919      	lsrs	r1, r3, #4
 8008a30:	4b91      	ldr	r3, [pc, #580]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8008a32:	400b      	ands	r3, r1
 8008a34:	498f      	ldr	r1, [pc, #572]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	610b      	str	r3, [r1, #16]
 8008a3a:	e005      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008a3c:	4b8d      	ldr	r3, [pc, #564]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	4a8c      	ldr	r2, [pc, #560]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8008a42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a46:	6113      	str	r3, [r2, #16]
 8008a48:	4b8a      	ldr	r3, [pc, #552]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8008a4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a56:	4987      	ldr	r1, [pc, #540]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	670b      	str	r3, [r1, #112]	; 0x70
 8008a5c:	e004      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
 8008a60:	75bb      	strb	r3, [r7, #22]
 8008a62:	e001      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0301 	and.w	r3, r3, #1
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d07f      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a7a:	2b28      	cmp	r3, #40	; 0x28
 8008a7c:	d866      	bhi.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x768>
 8008a7e:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008b53 	.word	0x08008b53
 8008a88:	08008b4d 	.word	0x08008b4d
 8008a8c:	08008b4d 	.word	0x08008b4d
 8008a90:	08008b4d 	.word	0x08008b4d
 8008a94:	08008b4d 	.word	0x08008b4d
 8008a98:	08008b4d 	.word	0x08008b4d
 8008a9c:	08008b4d 	.word	0x08008b4d
 8008aa0:	08008b4d 	.word	0x08008b4d
 8008aa4:	08008b29 	.word	0x08008b29
 8008aa8:	08008b4d 	.word	0x08008b4d
 8008aac:	08008b4d 	.word	0x08008b4d
 8008ab0:	08008b4d 	.word	0x08008b4d
 8008ab4:	08008b4d 	.word	0x08008b4d
 8008ab8:	08008b4d 	.word	0x08008b4d
 8008abc:	08008b4d 	.word	0x08008b4d
 8008ac0:	08008b4d 	.word	0x08008b4d
 8008ac4:	08008b3b 	.word	0x08008b3b
 8008ac8:	08008b4d 	.word	0x08008b4d
 8008acc:	08008b4d 	.word	0x08008b4d
 8008ad0:	08008b4d 	.word	0x08008b4d
 8008ad4:	08008b4d 	.word	0x08008b4d
 8008ad8:	08008b4d 	.word	0x08008b4d
 8008adc:	08008b4d 	.word	0x08008b4d
 8008ae0:	08008b4d 	.word	0x08008b4d
 8008ae4:	08008b53 	.word	0x08008b53
 8008ae8:	08008b4d 	.word	0x08008b4d
 8008aec:	08008b4d 	.word	0x08008b4d
 8008af0:	08008b4d 	.word	0x08008b4d
 8008af4:	08008b4d 	.word	0x08008b4d
 8008af8:	08008b4d 	.word	0x08008b4d
 8008afc:	08008b4d 	.word	0x08008b4d
 8008b00:	08008b4d 	.word	0x08008b4d
 8008b04:	08008b53 	.word	0x08008b53
 8008b08:	08008b4d 	.word	0x08008b4d
 8008b0c:	08008b4d 	.word	0x08008b4d
 8008b10:	08008b4d 	.word	0x08008b4d
 8008b14:	08008b4d 	.word	0x08008b4d
 8008b18:	08008b4d 	.word	0x08008b4d
 8008b1c:	08008b4d 	.word	0x08008b4d
 8008b20:	08008b4d 	.word	0x08008b4d
 8008b24:	08008b53 	.word	0x08008b53
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f001 f92c 	bl	8009d8c <RCCEx_PLL2_Config>
 8008b34:	4603      	mov	r3, r0
 8008b36:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008b38:	e00c      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x770>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	3324      	adds	r3, #36	; 0x24
 8008b3e:	2101      	movs	r1, #1
 8008b40:	4618      	mov	r0, r3
 8008b42:	f001 f9d5 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008b46:	4603      	mov	r3, r0
 8008b48:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008b4a:	e003      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x770>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b50:	e000      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x770>
      break;
 8008b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10a      	bne.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b5a:	4b46      	ldr	r3, [pc, #280]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8008b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b5e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b68:	4942      	ldr	r1, [pc, #264]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	654b      	str	r3, [r1, #84]	; 0x54
 8008b6e:	e001      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x790>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b70:	7dfb      	ldrb	r3, [r7, #23]
 8008b72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 0302 	and.w	r3, r3, #2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d038      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b84:	2b05      	cmp	r3, #5
 8008b86:	d821      	bhi.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 8008b88:	a201      	add	r2, pc, #4	; (adr r2, 8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 8008b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8e:	bf00      	nop
 8008b90:	08008bd3 	.word	0x08008bd3
 8008b94:	08008ba9 	.word	0x08008ba9
 8008b98:	08008bbb 	.word	0x08008bbb
 8008b9c:	08008bd3 	.word	0x08008bd3
 8008ba0:	08008bd3 	.word	0x08008bd3
 8008ba4:	08008bd3 	.word	0x08008bd3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3304      	adds	r3, #4
 8008bac:	2101      	movs	r1, #1
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f001 f8ec 	bl	8009d8c <RCCEx_PLL2_Config>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008bb8:	e00c      	b.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	3324      	adds	r3, #36	; 0x24
 8008bbe:	2101      	movs	r1, #1
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f001 f995 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008bca:	e003      	b.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	75fb      	strb	r3, [r7, #23]
      break;
 8008bd0:	e000      	b.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      break;
 8008bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bd4:	7dfb      	ldrb	r3, [r7, #23]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d109      	bne.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x80a>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008bda:	4b26      	ldr	r3, [pc, #152]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8008bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bde:	f023 0207 	bic.w	r2, r3, #7
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008be6:	4923      	ldr	r1, [pc, #140]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8008be8:	4313      	orrs	r3, r2
 8008bea:	654b      	str	r3, [r1, #84]	; 0x54
 8008bec:	e001      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bee:	7dfb      	ldrb	r3, [r7, #23]
 8008bf0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 0304 	and.w	r3, r3, #4
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d040      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c04:	2b05      	cmp	r3, #5
 8008c06:	d821      	bhi.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x868>
 8008c08:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8008c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0e:	bf00      	nop
 8008c10:	08008c53 	.word	0x08008c53
 8008c14:	08008c29 	.word	0x08008c29
 8008c18:	08008c3b 	.word	0x08008c3b
 8008c1c:	08008c53 	.word	0x08008c53
 8008c20:	08008c53 	.word	0x08008c53
 8008c24:	08008c53 	.word	0x08008c53
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	2101      	movs	r1, #1
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f001 f8ac 	bl	8009d8c <RCCEx_PLL2_Config>
 8008c34:	4603      	mov	r3, r0
 8008c36:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008c38:	e00c      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x870>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	3324      	adds	r3, #36	; 0x24
 8008c3e:	2101      	movs	r1, #1
 8008c40:	4618      	mov	r0, r3
 8008c42:	f001 f955 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008c46:	4603      	mov	r3, r0
 8008c48:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008c4a:	e003      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x870>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8008c50:	e000      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x870>
      break;
 8008c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d110      	bne.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x898>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008c5a:	4b06      	ldr	r3, [pc, #24]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8008c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c5e:	f023 0207 	bic.w	r2, r3, #7
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c68:	4902      	ldr	r1, [pc, #8]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	658b      	str	r3, [r1, #88]	; 0x58
 8008c6e:	e007      	b.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8008c70:	58024800 	.word	0x58024800
 8008c74:	58024400 	.word	0x58024400
 8008c78:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c7c:	7dfb      	ldrb	r3, [r7, #23]
 8008c7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0320 	and.w	r3, r3, #32
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d044      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c96:	d01b      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8008c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c9c:	d805      	bhi.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d022      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x904>
 8008ca2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ca6:	d00a      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8008ca8:	e01b      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8008caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cae:	d01d      	beq.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x908>
 8008cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cb4:	d01c      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 8008cb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008cba:	d01b      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8008cbc:	e011      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f001 f861 	bl	8009d8c <RCCEx_PLL2_Config>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008cce:	e012      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x912>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	3324      	adds	r3, #36	; 0x24
 8008cd4:	2102      	movs	r1, #2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f001 f90a 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008ce0:	e009      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ce6:	e006      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8008ce8:	bf00      	nop
 8008cea:	e004      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8008cec:	bf00      	nop
 8008cee:	e002      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8008cf0:	bf00      	nop
 8008cf2:	e000      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8008cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cf6:	7dfb      	ldrb	r3, [r7, #23]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10a      	bne.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008cfc:	4bb3      	ldr	r3, [pc, #716]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8008cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d00:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d0a:	49b0      	ldr	r1, [pc, #704]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	654b      	str	r3, [r1, #84]	; 0x54
 8008d10:	e001      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x932>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d044      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d2c:	d01b      	beq.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d32:	d805      	bhi.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d022      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8008d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d3c:	d00a      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8008d3e:	e01b      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8008d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d44:	d01d      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8008d46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d4a:	d01c      	beq.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8008d4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d50:	d01b      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8008d52:	e011      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x994>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	3304      	adds	r3, #4
 8008d58:	2100      	movs	r1, #0
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f001 f816 	bl	8009d8c <RCCEx_PLL2_Config>
 8008d60:	4603      	mov	r3, r0
 8008d62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008d64:	e012      	b.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x9a8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	3324      	adds	r3, #36	; 0x24
 8008d6a:	2102      	movs	r1, #2
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f001 f8bf 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008d72:	4603      	mov	r3, r0
 8008d74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008d76:	e009      	b.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d7c:	e006      	b.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8008d7e:	bf00      	nop
 8008d80:	e004      	b.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8008d82:	bf00      	nop
 8008d84:	e002      	b.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8008d86:	bf00      	nop
 8008d88:	e000      	b.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8008d8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d8c:	7dfb      	ldrb	r3, [r7, #23]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10a      	bne.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008d92:	4b8e      	ldr	r3, [pc, #568]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8008d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d96:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008da0:	498a      	ldr	r1, [pc, #552]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8008da2:	4313      	orrs	r3, r2
 8008da4:	658b      	str	r3, [r1, #88]	; 0x58
 8008da6:	e001      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x9c8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da8:	7dfb      	ldrb	r3, [r7, #23]
 8008daa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d044      	beq.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dc2:	d01b      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xa18>
 8008dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dc8:	d805      	bhi.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d022      	beq.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd2:	d00a      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8008dd4:	e01b      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8008dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dda:	d01d      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8008ddc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008de0:	d01c      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8008de2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008de6:	d01b      	beq.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8008de8:	e011      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	3304      	adds	r3, #4
 8008dee:	2100      	movs	r1, #0
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 ffcb 	bl	8009d8c <RCCEx_PLL2_Config>
 8008df6:	4603      	mov	r3, r0
 8008df8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008dfa:	e012      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	3324      	adds	r3, #36	; 0x24
 8008e00:	2102      	movs	r1, #2
 8008e02:	4618      	mov	r0, r3
 8008e04:	f001 f874 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008e0c:	e009      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	75fb      	strb	r3, [r7, #23]
      break;
 8008e12:	e006      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8008e14:	bf00      	nop
 8008e16:	e004      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8008e18:	bf00      	nop
 8008e1a:	e002      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8008e1c:	bf00      	nop
 8008e1e:	e000      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8008e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e22:	7dfb      	ldrb	r3, [r7, #23]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10a      	bne.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008e28:	4b68      	ldr	r3, [pc, #416]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8008e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e36:	4965      	ldr	r1, [pc, #404]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	658b      	str	r3, [r1, #88]	; 0x58
 8008e3c:	e001      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e3e:	7dfb      	ldrb	r3, [r7, #23]
 8008e40:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0308 	and.w	r3, r3, #8
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d01a      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e58:	d10a      	bne.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	3324      	adds	r3, #36	; 0x24
 8008e5e:	2102      	movs	r1, #2
 8008e60:	4618      	mov	r0, r3
 8008e62:	f001 f845 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
        {
          status = HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008e70:	4b56      	ldr	r3, [pc, #344]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8008e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e7e:	4953      	ldr	r1, [pc, #332]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8008e80:	4313      	orrs	r3, r2
 8008e82:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 0310 	and.w	r3, r3, #16
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d01a      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e9a:	d10a      	bne.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	3324      	adds	r3, #36	; 0x24
 8008ea0:	2102      	movs	r1, #2
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f001 f824 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0xace>
      {
        status = HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008eb2:	4b46      	ldr	r3, [pc, #280]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8008eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ec0:	4942      	ldr	r1, [pc, #264]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d030      	beq.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008edc:	d00d      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xb16>
 8008ede:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ee2:	d016      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d111      	bne.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	3304      	adds	r3, #4
 8008eec:	2100      	movs	r1, #0
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 ff4c 	bl	8009d8c <RCCEx_PLL2_Config>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008ef8:	e00c      	b.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	3324      	adds	r3, #36	; 0x24
 8008efe:	2102      	movs	r1, #2
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 fff5 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008f06:	4603      	mov	r3, r0
 8008f08:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008f0a:	e003      	b.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f10:	e000      	b.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10a      	bne.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f1a:	4b2c      	ldr	r3, [pc, #176]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8008f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f28:	4928      	ldr	r1, [pc, #160]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	658b      	str	r3, [r1, #88]	; 0x58
 8008f2e:	e001      	b.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f30:	7dfb      	ldrb	r3, [r7, #23]
 8008f32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d02f      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f4a:	d00c      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008f4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f50:	d015      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0xb9a>
 8008f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f56:	d10f      	bne.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0xb94>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f58:	4b1c      	ldr	r3, [pc, #112]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8008f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5c:	4a1b      	ldr	r2, [pc, #108]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8008f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008f64:	e00c      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	3324      	adds	r3, #36	; 0x24
 8008f6a:	2101      	movs	r1, #1
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 ffbf 	bl	8009ef0 <RCCEx_PLL3_Config>
 8008f72:	4603      	mov	r3, r0
 8008f74:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008f76:	e003      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f7c:	e000      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      break;
 8008f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10a      	bne.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f86:	4b11      	ldr	r3, [pc, #68]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8008f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f94:	490d      	ldr	r1, [pc, #52]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8008f96:	4313      	orrs	r3, r2
 8008f98:	654b      	str	r3, [r1, #84]	; 0x54
 8008f9a:	e001      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f9c:	7dfb      	ldrb	r3, [r7, #23]
 8008f9e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d02c      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0xc22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d003      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8008fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fb8:	d00a      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8008fba:	e012      	b.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fbc:	4b03      	ldr	r3, [pc, #12]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8008fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc0:	4a02      	ldr	r2, [pc, #8]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8008fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008fc8:	e00e      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 8008fca:	bf00      	nop
 8008fcc:	58024400 	.word	0x58024400

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	2102      	movs	r1, #2
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 fed8 	bl	8009d8c <RCCEx_PLL2_Config>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008fe0:	e002      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xc04>

    default:
      ret = HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8008fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fe8:	7dfb      	ldrb	r3, [r7, #23]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d109      	bne.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008fee:	4b56      	ldr	r3, [pc, #344]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8008ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ff2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ffa:	4953      	ldr	r1, [pc, #332]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009000:	e001      	b.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009002:	7dfb      	ldrb	r3, [r7, #23]
 8009004:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00a      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xc44>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	3324      	adds	r3, #36	; 0x24
 8009016:	2102      	movs	r1, #2
 8009018:	4618      	mov	r0, r3
 800901a:	f000 ff69 	bl	8009ef0 <RCCEx_PLL3_Config>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d001      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xc44>
    {
      status=HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009030:	2b00      	cmp	r3, #0
 8009032:	d031      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800903a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800903e:	d00c      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009044:	d802      	bhi.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009046:	2b00      	cmp	r3, #0
 8009048:	d011      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 800904a:	e00d      	b.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800904c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009050:	d00f      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0xc8e>
 8009052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009056:	d00e      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009058:	e006      	b.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800905a:	4b3b      	ldr	r3, [pc, #236]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800905c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905e:	4a3a      	ldr	r2, [pc, #232]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8009060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009064:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009066:	e007      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	75fb      	strb	r3, [r7, #23]
      break;
 800906c:	e004      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 800906e:	bf00      	nop
 8009070:	e002      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 8009072:	bf00      	nop
 8009074:	e000      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 8009076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009078:	7dfb      	ldrb	r3, [r7, #23]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10a      	bne.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800907e:	4b32      	ldr	r3, [pc, #200]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8009080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009082:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800908c:	492e      	ldr	r1, [pc, #184]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800908e:	4313      	orrs	r3, r2
 8009090:	654b      	str	r3, [r1, #84]	; 0x54
 8009092:	e001      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009094:	7dfb      	ldrb	r3, [r7, #23]
 8009096:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d008      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80090a4:	4b28      	ldr	r3, [pc, #160]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80090a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090b0:	4925      	ldr	r1, [pc, #148]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d008      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80090c2:	4b21      	ldr	r3, [pc, #132]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80090c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ce:	491e      	ldr	r1, [pc, #120]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80090d0:	4313      	orrs	r3, r2
 80090d2:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d008      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80090e0:	4b19      	ldr	r3, [pc, #100]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80090e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ec:	4916      	ldr	r1, [pc, #88]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00d      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0xd36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090fe:	4b12      	ldr	r3, [pc, #72]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	4a11      	ldr	r2, [pc, #68]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8009104:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009108:	6113      	str	r3, [r2, #16]
 800910a:	4b0f      	ldr	r3, [pc, #60]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800910c:	691a      	ldr	r2, [r3, #16]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009114:	490c      	ldr	r1, [pc, #48]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8009116:	4313      	orrs	r3, r2
 8009118:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	da08      	bge.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009122:	4b09      	ldr	r3, [pc, #36]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8009124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009126:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800912e:	4906      	ldr	r1, [pc, #24]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8009130:	4313      	orrs	r3, r2
 8009132:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8009134:	7dbb      	ldrb	r3, [r7, #22]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    return HAL_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	e000      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  }
  return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
}
 8009140:	4618      	mov	r0, r3
 8009142:	3718      	adds	r7, #24
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	58024400 	.word	0x58024400

0800914c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b090      	sub	sp, #64	; 0x40
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800915a:	d150      	bne.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800915c:	4ba1      	ldr	r3, [pc, #644]	; (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800915e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009160:	f003 0307 	and.w	r3, r3, #7
 8009164:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009168:	2b04      	cmp	r3, #4
 800916a:	d844      	bhi.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800916c:	a201      	add	r2, pc, #4	; (adr r2, 8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800916e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009172:	bf00      	nop
 8009174:	08009189 	.word	0x08009189
 8009178:	08009199 	.word	0x08009199
 800917c:	080091a9 	.word	0x080091a9
 8009180:	080091f1 	.word	0x080091f1
 8009184:	080091b9 	.word	0x080091b9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800918c:	4618      	mov	r0, r3
 800918e:	f000 fcb1 	bl	8009af4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009196:	e1ef      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009198:	f107 0318 	add.w	r3, r7, #24
 800919c:	4618      	mov	r0, r3
 800919e:	f000 fa11 	bl	80095c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091a6:	e1e7      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091a8:	f107 030c 	add.w	r3, r7, #12
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 fb55 	bl	800985c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091b6:	e1df      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80091b8:	4b8a      	ldr	r3, [pc, #552]	; (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80091ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091c0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80091c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d102      	bne.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80091c8:	4b87      	ldr	r3, [pc, #540]	; (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80091ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80091cc:	e1d4      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80091ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091d4:	d102      	bne.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80091d6:	4b85      	ldr	r3, [pc, #532]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80091d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091da:	e1cd      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80091dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091e2:	d102      	bne.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80091e4:	4b82      	ldr	r3, [pc, #520]	; (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80091e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091e8:	e1c6      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091ee:	e1c3      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80091f0:	4b80      	ldr	r3, [pc, #512]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80091f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091f4:	e1c0      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091fa:	bf00      	nop
 80091fc:	e1bc      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009204:	d14f      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8009206:	4b77      	ldr	r3, [pc, #476]	; (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800920a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800920e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009212:	2b80      	cmp	r3, #128	; 0x80
 8009214:	d01c      	beq.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009216:	2b80      	cmp	r3, #128	; 0x80
 8009218:	d804      	bhi.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800921a:	2b00      	cmp	r3, #0
 800921c:	d008      	beq.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800921e:	2b40      	cmp	r3, #64	; 0x40
 8009220:	d00e      	beq.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009222:	e03c      	b.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8009224:	2bc0      	cmp	r3, #192	; 0xc0
 8009226:	d037      	beq.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8009228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800922c:	d018      	beq.n	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800922e:	e036      	b.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009234:	4618      	mov	r0, r3
 8009236:	f000 fc5d 	bl	8009af4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800923e:	e19b      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009240:	f107 0318 	add.w	r3, r7, #24
 8009244:	4618      	mov	r0, r3
 8009246:	f000 f9bd 	bl	80095c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800924e:	e193      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009250:	f107 030c 	add.w	r3, r7, #12
 8009254:	4618      	mov	r0, r3
 8009256:	f000 fb01 	bl	800985c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800925e:	e18b      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009260:	4b60      	ldr	r3, [pc, #384]	; (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009264:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009268:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800926a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926c:	2b00      	cmp	r3, #0
 800926e:	d102      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009270:	4b5d      	ldr	r3, [pc, #372]	; (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009272:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009274:	e180      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009278:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800927c:	d102      	bne.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800927e:	4b5b      	ldr	r3, [pc, #364]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009280:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009282:	e179      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800928a:	d102      	bne.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800928c:	4b58      	ldr	r3, [pc, #352]	; (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800928e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009290:	e172      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8009292:	2300      	movs	r3, #0
 8009294:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009296:	e16f      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009298:	4b56      	ldr	r3, [pc, #344]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800929a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800929c:	e16c      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 800929e:	2300      	movs	r3, #0
 80092a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092a2:	bf00      	nop
 80092a4:	e168      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092ac:	d153      	bne.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 80092ae:	4b4d      	ldr	r3, [pc, #308]	; (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80092b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b2:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80092b6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80092b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092be:	d01f      	beq.n	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80092c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092c4:	d805      	bhi.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00a      	beq.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80092ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092ce:	d00f      	beq.n	80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80092d0:	e03d      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80092d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80092d6:	d037      	beq.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80092d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092dc:	d018      	beq.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80092de:	e036      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 fc05 	bl	8009af4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092ee:	e143      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092f0:	f107 0318 	add.w	r3, r7, #24
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 f965 	bl	80095c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092fe:	e13b      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009300:	f107 030c 	add.w	r3, r7, #12
 8009304:	4618      	mov	r0, r3
 8009306:	f000 faa9 	bl	800985c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800930e:	e133      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009310:	4b34      	ldr	r3, [pc, #208]	; (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009314:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009318:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800931a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009320:	4b31      	ldr	r3, [pc, #196]	; (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009322:	63fb      	str	r3, [r7, #60]	; 0x3c
          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }
          break;
 8009324:	e128      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009328:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800932c:	d102      	bne.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800932e:	4b2f      	ldr	r3, [pc, #188]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009330:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009332:	e121      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009336:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800933a:	d102      	bne.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800933c:	4b2c      	ldr	r3, [pc, #176]	; (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800933e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009340:	e11a      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009346:	e117      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009348:	4b2a      	ldr	r3, [pc, #168]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800934a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800934c:	e114      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009352:	bf00      	nop
 8009354:	e110      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800935c:	d15d      	bne.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800935e:	4b21      	ldr	r3, [pc, #132]	; (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009362:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009366:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800936e:	d01f      	beq.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009374:	d805      	bhi.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00a      	beq.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800937a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800937e:	d00f      	beq.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8009380:	e047      	b.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8009382:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009386:	d041      	beq.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8009388:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800938c:	d018      	beq.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800938e:	e040      	b.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009394:	4618      	mov	r0, r3
 8009396:	f000 fbad 	bl	8009af4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800939e:	e0eb      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093a0:	f107 0318 	add.w	r3, r7, #24
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 f90d 	bl	80095c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093ae:	e0e3      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093b0:	f107 030c 	add.w	r3, r7, #12
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 fa51 	bl	800985c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093be:	e0db      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80093c0:	4b08      	ldr	r3, [pc, #32]	; (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80093c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093c8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80093ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d102      	bne.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80093d0:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80093d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80093d4:	e0d0      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80093d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093dc:	d10c      	bne.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80093de:	4b03      	ldr	r3, [pc, #12]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80093e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093e2:	e0c9      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 80093e4:	58024400 	.word	0x58024400
 80093e8:	03d09000 	.word	0x03d09000
 80093ec:	003d0900 	.word	0x003d0900
 80093f0:	016e3600 	.word	0x016e3600
 80093f4:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80093f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093fe:	d102      	bne.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8009400:	4b60      	ldr	r3, [pc, #384]	; (8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8009402:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009404:	e0b8      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8009406:	2300      	movs	r3, #0
 8009408:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800940a:	e0b5      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800940c:	4b5e      	ldr	r3, [pc, #376]	; (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 800940e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009410:	e0b2      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 8009412:	2300      	movs	r3, #0
 8009414:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009416:	bf00      	nop
 8009418:	e0ae      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009420:	d13d      	bne.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x352>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009422:	4b5a      	ldr	r3, [pc, #360]	; (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8009424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009426:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800942a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800942c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009432:	d00c      	beq.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8009434:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009438:	d011      	beq.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 800943a:	2b00      	cmp	r3, #0
 800943c:	d12b      	bne.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800943e:	f107 0318 	add.w	r3, r7, #24
 8009442:	4618      	mov	r0, r3
 8009444:	f000 f8be 	bl	80095c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800944c:	e094      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800944e:	f107 030c 	add.w	r3, r7, #12
 8009452:	4618      	mov	r0, r3
 8009454:	f000 fa02 	bl	800985c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800945c:	e08c      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800945e:	4b4b      	ldr	r3, [pc, #300]	; (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8009460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009462:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009466:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800946a:	2b00      	cmp	r3, #0
 800946c:	d102      	bne.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800946e:	4b48      	ldr	r3, [pc, #288]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 8009470:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009472:	e081      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800947a:	d102      	bne.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x336>
            frequency = CSI_VALUE;
 800947c:	4b45      	ldr	r3, [pc, #276]	; (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 800947e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009480:	e07a      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009488:	d102      	bne.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
            frequency = HSE_VALUE;
 800948a:	4b3e      	ldr	r3, [pc, #248]	; (8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800948c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800948e:	e073      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8009490:	2300      	movs	r3, #0
 8009492:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009494:	e070      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800949a:	bf00      	nop
 800949c:	e06c      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094a4:	d11f      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80094a6:	4b39      	ldr	r3, [pc, #228]	; (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 80094a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094ae:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80094b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80094b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094ba:	d008      	beq.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 80094bc:	e00f      	b.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x392>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 fb16 	bl	8009af4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094cc:	e054      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094ce:	f107 0318 	add.w	r3, r7, #24
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 f876 	bl	80095c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80094d8:	6a3b      	ldr	r3, [r7, #32]
 80094da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094dc:	e04c      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80094de:	2300      	movs	r3, #0
 80094e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094e2:	bf00      	nop
 80094e4:	e048      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094ec:	d142      	bne.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80094ee:	4b27      	ldr	r3, [pc, #156]	; (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 80094f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80094f6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80094f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094fe:	d029      	beq.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 8009500:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009504:	d808      	bhi.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8009506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800950a:	d013      	beq.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800950c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009510:	d018      	beq.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00a      	beq.n	800952c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8009516:	e029      	b.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8009518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800951c:	d020      	beq.n	8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800951e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8009522:	d020      	beq.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8009524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009528:	d017      	beq.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800952a:	e01f      	b.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800952c:	f000 f834 	bl	8009598 <HAL_RCCEx_GetD3PCLK1Freq>
 8009530:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009532:	e021      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009534:	f107 0318 	add.w	r3, r7, #24
 8009538:	4618      	mov	r0, r3
 800953a:	f000 f843 	bl	80095c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009542:	e019      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009544:	f107 030c 	add.w	r3, r7, #12
 8009548:	4618      	mov	r0, r3
 800954a:	f000 f987 	bl	800985c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009552:	e011      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8009554:	4b0e      	ldr	r3, [pc, #56]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 8009556:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009558:	e00e      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800955a:	4b0e      	ldr	r3, [pc, #56]	; (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 800955c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800955e:	e00b      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8009560:	4b08      	ldr	r3, [pc, #32]	; (8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8009562:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009564:	e008      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009566:	4b08      	ldr	r3, [pc, #32]	; (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8009568:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800956a:	e005      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800956c:	2300      	movs	r3, #0
 800956e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009570:	bf00      	nop
 8009572:	e001      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else
    {
      frequency = 0;
 8009574:	2300      	movs	r3, #0
 8009576:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800957a:	4618      	mov	r0, r3
 800957c:	3740      	adds	r7, #64	; 0x40
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	016e3600 	.word	0x016e3600
 8009588:	00bb8000 	.word	0x00bb8000
 800958c:	58024400 	.word	0x58024400
 8009590:	03d09000 	.word	0x03d09000
 8009594:	003d0900 	.word	0x003d0900

08009598 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800959c:	f7fe fef2 	bl	8008384 <HAL_RCC_GetHCLKFreq>
 80095a0:	4601      	mov	r1, r0
 80095a2:	4b06      	ldr	r3, [pc, #24]	; (80095bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	091b      	lsrs	r3, r3, #4
 80095a8:	f003 0307 	and.w	r3, r3, #7
 80095ac:	4a04      	ldr	r2, [pc, #16]	; (80095c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80095ae:	5cd3      	ldrb	r3, [r2, r3]
 80095b0:	f003 031f 	and.w	r3, r3, #31
 80095b4:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	58024400 	.word	0x58024400
 80095c0:	0800db10 	.word	0x0800db10

080095c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b089      	sub	sp, #36	; 0x24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095cc:	4b9d      	ldr	r3, [pc, #628]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80095ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d0:	f003 0303 	and.w	r3, r3, #3
 80095d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80095d6:	4b9b      	ldr	r3, [pc, #620]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80095d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095da:	0b1b      	lsrs	r3, r3, #12
 80095dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80095e2:	4b98      	ldr	r3, [pc, #608]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80095e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e6:	091b      	lsrs	r3, r3, #4
 80095e8:	f003 0301 	and.w	r3, r3, #1
 80095ec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80095ee:	4b95      	ldr	r3, [pc, #596]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80095f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095f2:	08db      	lsrs	r3, r3, #3
 80095f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	fb02 f303 	mul.w	r3, r2, r3
 80095fe:	ee07 3a90 	vmov	s15, r3
 8009602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009606:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	2b00      	cmp	r3, #0
 800960e:	f000 810a 	beq.w	8009826 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d05a      	beq.n	80096ce <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8009618:	2b01      	cmp	r3, #1
 800961a:	d302      	bcc.n	8009622 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800961c:	2b02      	cmp	r3, #2
 800961e:	d078      	beq.n	8009712 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8009620:	e099      	b.n	8009756 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009622:	4b88      	ldr	r3, [pc, #544]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 0320 	and.w	r3, r3, #32
 800962a:	2b00      	cmp	r3, #0
 800962c:	d02d      	beq.n	800968a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800962e:	4b85      	ldr	r3, [pc, #532]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	08db      	lsrs	r3, r3, #3
 8009634:	f003 0303 	and.w	r3, r3, #3
 8009638:	4a83      	ldr	r2, [pc, #524]	; (8009848 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800963a:	fa22 f303 	lsr.w	r3, r2, r3
 800963e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	ee07 3a90 	vmov	s15, r3
 8009650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009654:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009658:	4b7a      	ldr	r3, [pc, #488]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800965a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009660:	ee07 3a90 	vmov	s15, r3
 8009664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009668:	ed97 6a03 	vldr	s12, [r7, #12]
 800966c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800984c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009670:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009674:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009678:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800967c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009684:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009688:	e087      	b.n	800979a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	ee07 3a90 	vmov	s15, r3
 8009690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009694:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8009698:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800969c:	4b69      	ldr	r3, [pc, #420]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800969e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a4:	ee07 3a90 	vmov	s15, r3
 80096a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80096b0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800984c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80096b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096cc:	e065      	b.n	800979a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	ee07 3a90 	vmov	s15, r3
 80096d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80096dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096e0:	4b58      	ldr	r3, [pc, #352]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80096e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e8:	ee07 3a90 	vmov	s15, r3
 80096ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80096f4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800984c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80096f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009700:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009704:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800970c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009710:	e043      	b.n	800979a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	ee07 3a90 	vmov	s15, r3
 8009718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8009720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009724:	4b47      	ldr	r3, [pc, #284]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800972c:	ee07 3a90 	vmov	s15, r3
 8009730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009734:	ed97 6a03 	vldr	s12, [r7, #12]
 8009738:	eddf 5a44 	vldr	s11, [pc, #272]	; 800984c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800973c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009744:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800974c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009750:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009754:	e021      	b.n	800979a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	ee07 3a90 	vmov	s15, r3
 800975c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009760:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009768:	4b36      	ldr	r3, [pc, #216]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800976a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009770:	ee07 3a90 	vmov	s15, r3
 8009774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009778:	ed97 6a03 	vldr	s12, [r7, #12]
 800977c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800984c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009780:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009784:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009788:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800978c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009794:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009798:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800979a:	4b2a      	ldr	r3, [pc, #168]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800979c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979e:	0a5b      	lsrs	r3, r3, #9
 80097a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097a4:	ee07 3a90 	vmov	s15, r3
 80097a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80097b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097c0:	ee17 2a90 	vmov	r2, s15
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80097c8:	4b1e      	ldr	r3, [pc, #120]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80097ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097cc:	0c1b      	lsrs	r3, r3, #16
 80097ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097d2:	ee07 3a90 	vmov	s15, r3
 80097d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80097e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ee:	ee17 2a90 	vmov	r2, s15
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80097f6:	4b13      	ldr	r3, [pc, #76]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80097f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fa:	0e1b      	lsrs	r3, r3, #24
 80097fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009800:	ee07 3a90 	vmov	s15, r3
 8009804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800980c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009810:	edd7 6a07 	vldr	s13, [r7, #28]
 8009814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800981c:	ee17 2a90 	vmov	r2, s15
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009824:	e008      	b.n	8009838 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	609a      	str	r2, [r3, #8]
}
 8009838:	bf00      	nop
 800983a:	3724      	adds	r7, #36	; 0x24
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	58024400 	.word	0x58024400
 8009848:	03d09000 	.word	0x03d09000
 800984c:	46000000 	.word	0x46000000
 8009850:	4c742400 	.word	0x4c742400
 8009854:	4a742400 	.word	0x4a742400
 8009858:	4bb71b00 	.word	0x4bb71b00

0800985c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800985c:	b480      	push	{r7}
 800985e:	b089      	sub	sp, #36	; 0x24
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009864:	4b9d      	ldr	r3, [pc, #628]	; (8009adc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009868:	f003 0303 	and.w	r3, r3, #3
 800986c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800986e:	4b9b      	ldr	r3, [pc, #620]	; (8009adc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009872:	0d1b      	lsrs	r3, r3, #20
 8009874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009878:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800987a:	4b98      	ldr	r3, [pc, #608]	; (8009adc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800987c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987e:	0a1b      	lsrs	r3, r3, #8
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009886:	4b95      	ldr	r3, [pc, #596]	; (8009adc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800988a:	08db      	lsrs	r3, r3, #3
 800988c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009890:	693a      	ldr	r2, [r7, #16]
 8009892:	fb02 f303 	mul.w	r3, r2, r3
 8009896:	ee07 3a90 	vmov	s15, r3
 800989a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800989e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 810a 	beq.w	8009abe <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d05a      	beq.n	8009966 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d302      	bcc.n	80098ba <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d078      	beq.n	80099aa <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80098b8:	e099      	b.n	80099ee <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098ba:	4b88      	ldr	r3, [pc, #544]	; (8009adc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 0320 	and.w	r3, r3, #32
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d02d      	beq.n	8009922 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098c6:	4b85      	ldr	r3, [pc, #532]	; (8009adc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	08db      	lsrs	r3, r3, #3
 80098cc:	f003 0303 	and.w	r3, r3, #3
 80098d0:	4a83      	ldr	r2, [pc, #524]	; (8009ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80098d2:	fa22 f303 	lsr.w	r3, r2, r3
 80098d6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	ee07 3a90 	vmov	s15, r3
 80098de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	ee07 3a90 	vmov	s15, r3
 80098e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098f0:	4b7a      	ldr	r3, [pc, #488]	; (8009adc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80098f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f8:	ee07 3a90 	vmov	s15, r3
 80098fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009900:	ed97 6a03 	vldr	s12, [r7, #12]
 8009904:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009908:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800990c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009910:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009914:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800991c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009920:	e087      	b.n	8009a32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	ee07 3a90 	vmov	s15, r3
 8009928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800992c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8009930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009934:	4b69      	ldr	r3, [pc, #420]	; (8009adc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800993c:	ee07 3a90 	vmov	s15, r3
 8009940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009944:	ed97 6a03 	vldr	s12, [r7, #12]
 8009948:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800994c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009950:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009954:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800995c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009960:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009964:	e065      	b.n	8009a32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	ee07 3a90 	vmov	s15, r3
 800996c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009970:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009978:	4b58      	ldr	r3, [pc, #352]	; (8009adc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800997a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009980:	ee07 3a90 	vmov	s15, r3
 8009984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009988:	ed97 6a03 	vldr	s12, [r7, #12]
 800998c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009990:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009994:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009998:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800999c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099a8:	e043      	b.n	8009a32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	ee07 3a90 	vmov	s15, r3
 80099b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009af0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80099b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099bc:	4b47      	ldr	r3, [pc, #284]	; (8009adc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80099be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c4:	ee07 3a90 	vmov	s15, r3
 80099c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80099d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80099d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099ec:	e021      	b.n	8009a32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	ee07 3a90 	vmov	s15, r3
 80099f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80099fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a00:	4b36      	ldr	r3, [pc, #216]	; (8009adc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a08:	ee07 3a90 	vmov	s15, r3
 8009a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a10:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a14:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009a18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a30:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009a32:	4b2a      	ldr	r3, [pc, #168]	; (8009adc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a36:	0a5b      	lsrs	r3, r3, #9
 8009a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a3c:	ee07 3a90 	vmov	s15, r3
 8009a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a58:	ee17 2a90 	vmov	r2, s15
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009a60:	4b1e      	ldr	r3, [pc, #120]	; (8009adc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a64:	0c1b      	lsrs	r3, r3, #16
 8009a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a6a:	ee07 3a90 	vmov	s15, r3
 8009a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a86:	ee17 2a90 	vmov	r2, s15
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009a8e:	4b13      	ldr	r3, [pc, #76]	; (8009adc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a92:	0e1b      	lsrs	r3, r3, #24
 8009a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a98:	ee07 3a90 	vmov	s15, r3
 8009a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009aa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009aa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ab4:	ee17 2a90 	vmov	r2, s15
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009abc:	e008      	b.n	8009ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	609a      	str	r2, [r3, #8]
}
 8009ad0:	bf00      	nop
 8009ad2:	3724      	adds	r7, #36	; 0x24
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	58024400 	.word	0x58024400
 8009ae0:	03d09000 	.word	0x03d09000
 8009ae4:	46000000 	.word	0x46000000
 8009ae8:	4c742400 	.word	0x4c742400
 8009aec:	4a742400 	.word	0x4a742400
 8009af0:	4bb71b00 	.word	0x4bb71b00

08009af4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b089      	sub	sp, #36	; 0x24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009afc:	4b9d      	ldr	r3, [pc, #628]	; (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b00:	f003 0303 	and.w	r3, r3, #3
 8009b04:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009b06:	4b9b      	ldr	r3, [pc, #620]	; (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b0a:	091b      	lsrs	r3, r3, #4
 8009b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b10:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009b12:	4b98      	ldr	r3, [pc, #608]	; (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b16:	f003 0301 	and.w	r3, r3, #1
 8009b1a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009b1c:	4b95      	ldr	r3, [pc, #596]	; (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b20:	08db      	lsrs	r3, r3, #3
 8009b22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	fb02 f303 	mul.w	r3, r2, r3
 8009b2c:	ee07 3a90 	vmov	s15, r3
 8009b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b34:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	f000 810a 	beq.w	8009d54 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d05a      	beq.n	8009bfc <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d302      	bcc.n	8009b50 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d078      	beq.n	8009c40 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8009b4e:	e099      	b.n	8009c84 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b50:	4b88      	ldr	r3, [pc, #544]	; (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0320 	and.w	r3, r3, #32
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d02d      	beq.n	8009bb8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b5c:	4b85      	ldr	r3, [pc, #532]	; (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	08db      	lsrs	r3, r3, #3
 8009b62:	f003 0303 	and.w	r3, r3, #3
 8009b66:	4a84      	ldr	r2, [pc, #528]	; (8009d78 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8009b68:	fa22 f303 	lsr.w	r3, r2, r3
 8009b6c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	ee07 3a90 	vmov	s15, r3
 8009b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	ee07 3a90 	vmov	s15, r3
 8009b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b86:	4b7b      	ldr	r3, [pc, #492]	; (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8e:	ee07 3a90 	vmov	s15, r3
 8009b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009d7c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009bb6:	e087      	b.n	8009cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009d80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8009bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bca:	4b6a      	ldr	r3, [pc, #424]	; (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd2:	ee07 3a90 	vmov	s15, r3
 8009bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bde:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009d7c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bfa:	e065      	b.n	8009cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d84 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8009c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c0e:	4b59      	ldr	r3, [pc, #356]	; (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c16:	ee07 3a90 	vmov	s15, r3
 8009c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c22:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009d7c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c3e:	e043      	b.n	8009cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	ee07 3a90 	vmov	s15, r3
 8009c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009d88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c52:	4b48      	ldr	r3, [pc, #288]	; (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c5a:	ee07 3a90 	vmov	s15, r3
 8009c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c66:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009d7c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c82:	e021      	b.n	8009cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	ee07 3a90 	vmov	s15, r3
 8009c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d84 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8009c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c96:	4b37      	ldr	r3, [pc, #220]	; (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c9e:	ee07 3a90 	vmov	s15, r3
 8009ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009caa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009d7c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cc6:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009cc8:	4b2a      	ldr	r3, [pc, #168]	; (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ccc:	0a5b      	lsrs	r3, r3, #9
 8009cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cd2:	ee07 3a90 	vmov	s15, r3
 8009cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cee:	ee17 2a90 	vmov	r2, s15
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009cf6:	4b1f      	ldr	r3, [pc, #124]	; (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cfa:	0c1b      	lsrs	r3, r3, #16
 8009cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d00:	ee07 3a90 	vmov	s15, r3
 8009d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d1c:	ee17 2a90 	vmov	r2, s15
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009d24:	4b13      	ldr	r3, [pc, #76]	; (8009d74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d28:	0e1b      	lsrs	r3, r3, #24
 8009d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d2e:	ee07 3a90 	vmov	s15, r3
 8009d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d4a:	ee17 2a90 	vmov	r2, s15
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009d52:	e008      	b.n	8009d66 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	609a      	str	r2, [r3, #8]
}
 8009d66:	bf00      	nop
 8009d68:	3724      	adds	r7, #36	; 0x24
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	58024400 	.word	0x58024400
 8009d78:	03d09000 	.word	0x03d09000
 8009d7c:	46000000 	.word	0x46000000
 8009d80:	4c742400 	.word	0x4c742400
 8009d84:	4a742400 	.word	0x4a742400
 8009d88:	4bb71b00 	.word	0x4bb71b00

08009d8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d9a:	4b53      	ldr	r3, [pc, #332]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9e:	f003 0303 	and.w	r3, r3, #3
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	d101      	bne.n	8009daa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e099      	b.n	8009ede <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009daa:	4b4f      	ldr	r3, [pc, #316]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a4e      	ldr	r2, [pc, #312]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009db0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009db6:	f7f9 f875 	bl	8002ea4 <HAL_GetTick>
 8009dba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009dbc:	e008      	b.n	8009dd0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009dbe:	f7f9 f871 	bl	8002ea4 <HAL_GetTick>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	d901      	bls.n	8009dd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009dcc:	2303      	movs	r3, #3
 8009dce:	e086      	b.n	8009ede <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009dd0:	4b45      	ldr	r3, [pc, #276]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1f0      	bne.n	8009dbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009ddc:	4b42      	ldr	r3, [pc, #264]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	031b      	lsls	r3, r3, #12
 8009dea:	493f      	ldr	r1, [pc, #252]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	628b      	str	r3, [r1, #40]	; 0x28
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	025b      	lsls	r3, r3, #9
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	431a      	orrs	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	041b      	lsls	r3, r3, #16
 8009e0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e12:	431a      	orrs	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	061b      	lsls	r3, r3, #24
 8009e1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e20:	4931      	ldr	r1, [pc, #196]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e22:	4313      	orrs	r3, r2
 8009e24:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009e26:	4b30      	ldr	r3, [pc, #192]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	695b      	ldr	r3, [r3, #20]
 8009e32:	492d      	ldr	r1, [pc, #180]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e34:	4313      	orrs	r3, r2
 8009e36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009e38:	4b2b      	ldr	r3, [pc, #172]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3c:	f023 0220 	bic.w	r2, r3, #32
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	4928      	ldr	r1, [pc, #160]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e46:	4313      	orrs	r3, r2
 8009e48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e4a:	4b27      	ldr	r3, [pc, #156]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4e:	4a26      	ldr	r2, [pc, #152]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e50:	f023 0310 	bic.w	r3, r3, #16
 8009e54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e56:	4b24      	ldr	r3, [pc, #144]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e5a:	4b24      	ldr	r3, [pc, #144]	; (8009eec <RCCEx_PLL2_Config+0x160>)
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	69d2      	ldr	r2, [r2, #28]
 8009e62:	00d2      	lsls	r2, r2, #3
 8009e64:	4920      	ldr	r1, [pc, #128]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e66:	4313      	orrs	r3, r2
 8009e68:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009e6a:	4b1f      	ldr	r3, [pc, #124]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e6e:	4a1e      	ldr	r2, [pc, #120]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e70:	f043 0310 	orr.w	r3, r3, #16
 8009e74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d106      	bne.n	8009e8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009e7c:	4b1a      	ldr	r3, [pc, #104]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e80:	4a19      	ldr	r2, [pc, #100]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e88:	e00f      	b.n	8009eaa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d106      	bne.n	8009e9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009e90:	4b15      	ldr	r3, [pc, #84]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	4a14      	ldr	r2, [pc, #80]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009e96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e9c:	e005      	b.n	8009eaa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009e9e:	4b12      	ldr	r3, [pc, #72]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea2:	4a11      	ldr	r2, [pc, #68]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009ea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ea8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009eaa:	4b0f      	ldr	r3, [pc, #60]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a0e      	ldr	r2, [pc, #56]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009eb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009eb6:	f7f8 fff5 	bl	8002ea4 <HAL_GetTick>
 8009eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ebc:	e008      	b.n	8009ed0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009ebe:	f7f8 fff1 	bl	8002ea4 <HAL_GetTick>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d901      	bls.n	8009ed0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	e006      	b.n	8009ede <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ed0:	4b05      	ldr	r3, [pc, #20]	; (8009ee8 <RCCEx_PLL2_Config+0x15c>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d0f0      	beq.n	8009ebe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	58024400 	.word	0x58024400
 8009eec:	ffff0007 	.word	0xffff0007

08009ef0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009efe:	4b53      	ldr	r3, [pc, #332]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f02:	f003 0303 	and.w	r3, r3, #3
 8009f06:	2b03      	cmp	r3, #3
 8009f08:	d101      	bne.n	8009f0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e099      	b.n	800a042 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f0e:	4b4f      	ldr	r3, [pc, #316]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a4e      	ldr	r2, [pc, #312]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f1a:	f7f8 ffc3 	bl	8002ea4 <HAL_GetTick>
 8009f1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f20:	e008      	b.n	8009f34 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009f22:	f7f8 ffbf 	bl	8002ea4 <HAL_GetTick>
 8009f26:	4602      	mov	r2, r0
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d901      	bls.n	8009f34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f30:	2303      	movs	r3, #3
 8009f32:	e086      	b.n	800a042 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f34:	4b45      	ldr	r3, [pc, #276]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1f0      	bne.n	8009f22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f40:	4b42      	ldr	r3, [pc, #264]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f44:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	051b      	lsls	r3, r3, #20
 8009f4e:	493f      	ldr	r1, [pc, #252]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f50:	4313      	orrs	r3, r2
 8009f52:	628b      	str	r3, [r1, #40]	; 0x28
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	3b01      	subs	r3, #1
 8009f64:	025b      	lsls	r3, r3, #9
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	431a      	orrs	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	041b      	lsls	r3, r3, #16
 8009f72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f76:	431a      	orrs	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	061b      	lsls	r3, r3, #24
 8009f80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f84:	4931      	ldr	r1, [pc, #196]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f86:	4313      	orrs	r3, r2
 8009f88:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f8a:	4b30      	ldr	r3, [pc, #192]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	492d      	ldr	r1, [pc, #180]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009f9c:	4b2b      	ldr	r3, [pc, #172]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	4928      	ldr	r1, [pc, #160]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009faa:	4313      	orrs	r3, r2
 8009fac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009fae:	4b27      	ldr	r3, [pc, #156]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb2:	4a26      	ldr	r2, [pc, #152]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009fba:	4b24      	ldr	r3, [pc, #144]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fbe:	4b24      	ldr	r3, [pc, #144]	; (800a050 <RCCEx_PLL3_Config+0x160>)
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	69d2      	ldr	r2, [r2, #28]
 8009fc6:	00d2      	lsls	r2, r2, #3
 8009fc8:	4920      	ldr	r1, [pc, #128]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009fce:	4b1f      	ldr	r3, [pc, #124]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd2:	4a1e      	ldr	r2, [pc, #120]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d106      	bne.n	8009fee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009fe0:	4b1a      	ldr	r3, [pc, #104]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe4:	4a19      	ldr	r2, [pc, #100]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009fe6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009fea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009fec:	e00f      	b.n	800a00e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d106      	bne.n	800a002 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009ff4:	4b15      	ldr	r3, [pc, #84]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff8:	4a14      	ldr	r2, [pc, #80]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 8009ffa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ffe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a000:	e005      	b.n	800a00e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a002:	4b12      	ldr	r3, [pc, #72]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 800a004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a006:	4a11      	ldr	r2, [pc, #68]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 800a008:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a00c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a00e:	4b0f      	ldr	r3, [pc, #60]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a0e      	ldr	r2, [pc, #56]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 800a014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a01a:	f7f8 ff43 	bl	8002ea4 <HAL_GetTick>
 800a01e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a020:	e008      	b.n	800a034 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a022:	f7f8 ff3f 	bl	8002ea4 <HAL_GetTick>
 800a026:	4602      	mov	r2, r0
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	d901      	bls.n	800a034 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a030:	2303      	movs	r3, #3
 800a032:	e006      	b.n	800a042 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a034:	4b05      	ldr	r3, [pc, #20]	; (800a04c <RCCEx_PLL3_Config+0x15c>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d0f0      	beq.n	800a022 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a040:	7bfb      	ldrb	r3, [r7, #15]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	58024400 	.word	0x58024400
 800a050:	ffff0007 	.word	0xffff0007

0800a054 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d101      	bne.n	800a066 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e082      	b.n	800a16c <HAL_RNG_Init+0x118>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	7a5b      	ldrb	r3, [r3, #9]
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d105      	bne.n	800a07c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7f8 fcae 	bl	80029d8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2202      	movs	r2, #2
 800a080:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f022 0204 	bic.w	r2, r2, #4
 800a090:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	4b36      	ldr	r3, [pc, #216]	; (800a174 <HAL_RNG_Init+0x120>)
 800a09a:	4013      	ands	r3, r2
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	6852      	ldr	r2, [r2, #4]
 800a0a0:	431a      	orrs	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a0aa:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a31      	ldr	r2, [pc, #196]	; (800a178 <HAL_RNG_Init+0x124>)
 800a0b2:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a30      	ldr	r2, [pc, #192]	; (800a17c <HAL_RNG_Init+0x128>)
 800a0ba:	611a      	str	r2, [r3, #16]
#endif

  /* Writing bits CONDRST=0*/
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800a0ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a0cc:	f7f8 feea 	bl	8002ea4 <HAL_GetTick>
 800a0d0:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a0d2:	e00e      	b.n	800a0f2 <HAL_RNG_Init+0x9e>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a0d4:	f7f8 fee6 	bl	8002ea4 <HAL_GetTick>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	1ad3      	subs	r3, r2, r3
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d907      	bls.n	800a0f2 <HAL_RNG_Init+0x9e>
    {
      hrng->State = HAL_RNG_STATE_READY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e03c      	b.n	800a16c <HAL_RNG_Init+0x118>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a100:	d0e8      	beq.n	800a0d4 <HAL_RNG_Init+0x80>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f042 0204 	orr.w	r2, r2, #4
 800a110:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a11c:	2b40      	cmp	r3, #64	; 0x40
 800a11e:	d104      	bne.n	800a12a <HAL_RNG_Init+0xd6>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2204      	movs	r2, #4
 800a124:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	e020      	b.n	800a16c <HAL_RNG_Init+0x118>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800a12a:	f7f8 febb 	bl	8002ea4 <HAL_GetTick>
 800a12e:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800a130:	e00e      	b.n	800a150 <HAL_RNG_Init+0xfc>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a132:	f7f8 feb7 	bl	8002ea4 <HAL_GetTick>
 800a136:	4602      	mov	r2, r0
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	1ad3      	subs	r3, r2, r3
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d907      	bls.n	800a150 <HAL_RNG_Init+0xfc>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2204      	movs	r2, #4
 800a144:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2202      	movs	r2, #2
 800a14a:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e00d      	b.n	800a16c <HAL_RNG_Init+0x118>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	f003 0304 	and.w	r3, r3, #4
 800a15a:	2b04      	cmp	r3, #4
 800a15c:	d0e9      	beq.n	800a132 <HAL_RNG_Init+0xde>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2201      	movs	r2, #1
 800a162:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	bfffffdf 	.word	0xbfffffdf
 800a178:	17590abc 	.word	0x17590abc
 800a17c:	000caa74 	.word	0x000caa74

0800a180 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a18a:	2300      	movs	r3, #0
 800a18c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	7a1b      	ldrb	r3, [r3, #8]
 800a192:	2b01      	cmp	r3, #1
 800a194:	d101      	bne.n	800a19a <HAL_RNG_GenerateRandomNumber+0x1a>
 800a196:	2302      	movs	r3, #2
 800a198:	e03d      	b.n	800a216 <HAL_RNG_GenerateRandomNumber+0x96>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2201      	movs	r2, #1
 800a19e:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	7a5b      	ldrb	r3, [r3, #9]
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d12c      	bne.n	800a204 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2202      	movs	r2, #2
 800a1ae:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a1b0:	f7f8 fe78 	bl	8002ea4 <HAL_GetTick>
 800a1b4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a1b6:	e011      	b.n	800a1dc <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a1b8:	f7f8 fe74 	bl	8002ea4 <HAL_GetTick>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d90a      	bls.n	800a1dc <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e01c      	b.n	800a216 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	f003 0301 	and.w	r3, r3, #1
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d1e6      	bne.n	800a1b8 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	689a      	ldr	r2, [r3, #8]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	691a      	ldr	r2, [r3, #16]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	725a      	strb	r2, [r3, #9]
 800a202:	e004      	b.n	800a20e <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2204      	movs	r2, #4
 800a208:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	721a      	strb	r2, [r3, #8]

  return status;
 800a214:	7bfb      	ldrb	r3, [r7, #15]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
	...

0800a220 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
 800a22c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	2b04      	cmp	r3, #4
 800a232:	d81f      	bhi.n	800a274 <HAL_SAI_InitProtocol+0x54>
 800a234:	a201      	add	r2, pc, #4	; (adr r2, 800a23c <HAL_SAI_InitProtocol+0x1c>)
 800a236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23a:	bf00      	nop
 800a23c:	0800a251 	.word	0x0800a251
 800a240:	0800a251 	.word	0x0800a251
 800a244:	0800a251 	.word	0x0800a251
 800a248:	0800a263 	.word	0x0800a263
 800a24c:	0800a263 	.word	0x0800a263
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	68b9      	ldr	r1, [r7, #8]
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f000 fc6e 	bl	800ab38 <SAI_InitI2S>
 800a25c:	4603      	mov	r3, r0
 800a25e:	75fb      	strb	r3, [r7, #23]
      break;
 800a260:	e00b      	b.n	800a27a <HAL_SAI_InitProtocol+0x5a>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	68b9      	ldr	r1, [r7, #8]
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f000 fd17 	bl	800ac9c <SAI_InitPCM>
 800a26e:	4603      	mov	r3, r0
 800a270:	75fb      	strb	r3, [r7, #23]
      break;
 800a272:	e002      	b.n	800a27a <HAL_SAI_InitProtocol+0x5a>
    default :
      status = HAL_ERROR;
 800a274:	2301      	movs	r3, #1
 800a276:	75fb      	strb	r3, [r7, #23]
      break;
 800a278:	bf00      	nop
  }

  if (status == HAL_OK)
 800a27a:	7dfb      	ldrb	r3, [r7, #23]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d104      	bne.n	800a28a <HAL_SAI_InitProtocol+0x6a>
  {
    status = HAL_SAI_Init(hsai);
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f000 f807 	bl	800a294 <HAL_SAI_Init>
 800a286:	4603      	mov	r3, r0
 800a288:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a28a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3718      	adds	r7, #24
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08a      	sub	sp, #40	; 0x28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d101      	bne.n	800a2a6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e1ea      	b.n	800a67c <HAL_SAI_Init+0x3e8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d10e      	bne.n	800a2ce <HAL_SAI_Init+0x3a>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
    {
      return HAL_ERROR;
    }
#else
    if ((hsai->Instance != SAI1_Block_A) ||
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a90      	ldr	r2, [pc, #576]	; (800a4f8 <HAL_SAI_Init+0x264>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d107      	bne.n	800a2ca <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d103      	bne.n	800a2ca <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e1d6      	b.n	800a67c <HAL_SAI_Init+0x3e8>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a89      	ldr	r2, [pc, #548]	; (800a4f8 <HAL_SAI_Init+0x264>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d004      	beq.n	800a2e2 <HAL_SAI_Init+0x4e>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a87      	ldr	r2, [pc, #540]	; (800a4fc <HAL_SAI_Init+0x268>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d102      	bne.n	800a2e8 <HAL_SAI_Init+0x54>
  {
    SaiBaseAddress = SAI1;
 800a2e2:	4b87      	ldr	r3, [pc, #540]	; (800a500 <HAL_SAI_Init+0x26c>)
 800a2e4:	61bb      	str	r3, [r7, #24]
 800a2e6:	e00e      	b.n	800a306 <HAL_SAI_Init+0x72>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a85      	ldr	r2, [pc, #532]	; (800a504 <HAL_SAI_Init+0x270>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d004      	beq.n	800a2fc <HAL_SAI_Init+0x68>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a84      	ldr	r2, [pc, #528]	; (800a508 <HAL_SAI_Init+0x274>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d102      	bne.n	800a302 <HAL_SAI_Init+0x6e>
  {
    SaiBaseAddress = SAI2;
 800a2fc:	4b83      	ldr	r3, [pc, #524]	; (800a50c <HAL_SAI_Init+0x278>)
 800a2fe:	61bb      	str	r3, [r7, #24]
 800a300:	e001      	b.n	800a306 <HAL_SAI_Init+0x72>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e1ba      	b.n	800a67c <HAL_SAI_Init+0x3e8>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d106      	bne.n	800a320 <HAL_SAI_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f7f8 fbc8 	bl	8002ab0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 fd3d 	bl	800ada0 <SAI_Disable>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d001      	beq.n	800a330 <HAL_SAI_Init+0x9c>
  {
    return HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	e1a5      	b.n	800a67c <HAL_SAI_Init+0x3e8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2202      	movs	r2, #2
 800a334:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d007      	beq.n	800a350 <HAL_SAI_Init+0xbc>
 800a340:	2b01      	cmp	r3, #1
 800a342:	d302      	bcc.n	800a34a <HAL_SAI_Init+0xb6>
 800a344:	2b02      	cmp	r3, #2
 800a346:	d006      	beq.n	800a356 <HAL_SAI_Init+0xc2>
 800a348:	e008      	b.n	800a35c <HAL_SAI_Init+0xc8>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a34a:	2300      	movs	r3, #0
 800a34c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a34e:	e008      	b.n	800a362 <HAL_SAI_Init+0xce>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a350:	2310      	movs	r3, #16
 800a352:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a354:	e005      	b.n	800a362 <HAL_SAI_Init+0xce>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a356:	2320      	movs	r3, #32
 800a358:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a35a:	e002      	b.n	800a362 <HAL_SAI_Init+0xce>
    default:
      tmpregisterGCR = 0;
 800a35c:	2300      	movs	r3, #0
 800a35e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a360:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	2b03      	cmp	r3, #3
 800a368:	d81d      	bhi.n	800a3a6 <HAL_SAI_Init+0x112>
 800a36a:	a201      	add	r2, pc, #4	; (adr r2, 800a370 <HAL_SAI_Init+0xdc>)
 800a36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a370:	0800a381 	.word	0x0800a381
 800a374:	0800a387 	.word	0x0800a387
 800a378:	0800a38f 	.word	0x0800a38f
 800a37c:	0800a397 	.word	0x0800a397
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a380:	2300      	movs	r3, #0
 800a382:	61fb      	str	r3, [r7, #28]
      break;
 800a384:	e012      	b.n	800a3ac <HAL_SAI_Init+0x118>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a38a:	61fb      	str	r3, [r7, #28]
      break;
 800a38c:	e00e      	b.n	800a3ac <HAL_SAI_Init+0x118>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a38e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a392:	61fb      	str	r3, [r7, #28]
      break;
 800a394:	e00a      	b.n	800a3ac <HAL_SAI_Init+0x118>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a396:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a39a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39e:	f043 0301 	orr.w	r3, r3, #1
 800a3a2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a3a4:	e002      	b.n	800a3ac <HAL_SAI_Init+0x118>
      syncen_bits = SAI_xCR1_SYNCEN_1;
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
      break;
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	61fb      	str	r3, [r7, #28]
      break;
 800a3aa:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3b0:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a1b      	ldr	r3, [r3, #32]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f000 8084 	beq.w	800a4c4 <HAL_SAI_Init+0x230>
  {
    uint32_t freq = 0;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a4c      	ldr	r2, [pc, #304]	; (800a4f8 <HAL_SAI_Init+0x264>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d004      	beq.n	800a3d4 <HAL_SAI_Init+0x140>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a4b      	ldr	r2, [pc, #300]	; (800a4fc <HAL_SAI_Init+0x268>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d104      	bne.n	800a3de <HAL_SAI_Init+0x14a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a3d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a3d8:	f7fe feb8 	bl	800914c <HAL_RCCEx_GetPeriphCLKFreq>
 800a3dc:	6178      	str	r0, [r7, #20]
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
    }
#else
    if (hsai->Instance == SAI2_Block_A)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a48      	ldr	r2, [pc, #288]	; (800a504 <HAL_SAI_Init+0x270>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d104      	bne.n	800a3f2 <HAL_SAI_Init+0x15e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2A);
 800a3e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a3ec:	f7fe feae 	bl	800914c <HAL_RCCEx_GetPeriphCLKFreq>
 800a3f0:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI2_Block_B)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a44      	ldr	r2, [pc, #272]	; (800a508 <HAL_SAI_Init+0x274>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d104      	bne.n	800a406 <HAL_SAI_Init+0x172>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2B);
 800a3fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a400:	f7fe fea4 	bl	800914c <HAL_RCCEx_GetPeriphCLKFreq>
 800a404:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a40e:	d120      	bne.n	800a452 <HAL_SAI_Init+0x1be>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a414:	2b04      	cmp	r3, #4
 800a416:	d102      	bne.n	800a41e <HAL_SAI_Init+0x18a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800a418:	2340      	movs	r3, #64	; 0x40
 800a41a:	60fb      	str	r3, [r7, #12]
 800a41c:	e00a      	b.n	800a434 <HAL_SAI_Init+0x1a0>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a422:	2b08      	cmp	r3, #8
 800a424:	d103      	bne.n	800a42e <HAL_SAI_Init+0x19a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800a426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a42a:	60fb      	str	r3, [r7, #12]
 800a42c:	e002      	b.n	800a434 <HAL_SAI_Init+0x1a0>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a432:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a434:	697a      	ldr	r2, [r7, #20]
 800a436:	4613      	mov	r3, r2
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4413      	add	r3, r2
 800a43c:	005b      	lsls	r3, r3, #1
 800a43e:	4619      	mov	r1, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a1b      	ldr	r3, [r3, #32]
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	fb02 f303 	mul.w	r3, r2, r3
 800a44a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a44e:	613b      	str	r3, [r7, #16]
 800a450:	e017      	b.n	800a482 <HAL_SAI_Init+0x1ee>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a456:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a45a:	d101      	bne.n	800a460 <HAL_SAI_Init+0x1cc>
 800a45c:	2302      	movs	r3, #2
 800a45e:	e000      	b.n	800a462 <HAL_SAI_Init+0x1ce>
 800a460:	2301      	movs	r3, #1
 800a462:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a464:	697a      	ldr	r2, [r7, #20]
 800a466:	4613      	mov	r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4413      	add	r3, r2
 800a46c:	005b      	lsls	r3, r3, #1
 800a46e:	4619      	mov	r1, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a1b      	ldr	r3, [r3, #32]
 800a474:	68ba      	ldr	r2, [r7, #8]
 800a476:	fb02 f303 	mul.w	r3, r2, r3
 800a47a:	021b      	lsls	r3, r3, #8
 800a47c:	fbb1 f3f3 	udiv	r3, r1, r3
 800a480:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	4a22      	ldr	r2, [pc, #136]	; (800a510 <HAL_SAI_Init+0x27c>)
 800a486:	fba2 2303 	umull	r2, r3, r2, r3
 800a48a:	08da      	lsrs	r2, r3, #3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a490:	6939      	ldr	r1, [r7, #16]
 800a492:	4b1f      	ldr	r3, [pc, #124]	; (800a510 <HAL_SAI_Init+0x27c>)
 800a494:	fba3 2301 	umull	r2, r3, r3, r1
 800a498:	08da      	lsrs	r2, r3, #3
 800a49a:	4613      	mov	r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	4413      	add	r3, r2
 800a4a0:	005b      	lsls	r3, r3, #1
 800a4a2:	1aca      	subs	r2, r1, r3
 800a4a4:	2a08      	cmp	r2, #8
 800a4a6:	d904      	bls.n	800a4b2 <HAL_SAI_Init+0x21e>
    {
      hsai->Init.Mckdiv += 1U;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ac:	1c5a      	adds	r2, r3, #1
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b6:	2b04      	cmp	r3, #4
 800a4b8:	d104      	bne.n	800a4c4 <HAL_SAI_Init+0x230>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4be:	085a      	lsrs	r2, r3, #1
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d003      	beq.n	800a4d4 <HAL_SAI_Init+0x240>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d109      	bne.n	800a4e8 <HAL_SAI_Init+0x254>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d101      	bne.n	800a4e0 <HAL_SAI_Init+0x24c>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	e001      	b.n	800a4e4 <HAL_SAI_Init+0x250>
 800a4e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4e4:	623b      	str	r3, [r7, #32]
 800a4e6:	e017      	b.n	800a518 <HAL_SAI_Init+0x284>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d111      	bne.n	800a514 <HAL_SAI_Init+0x280>
 800a4f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4f4:	e00f      	b.n	800a516 <HAL_SAI_Init+0x282>
 800a4f6:	bf00      	nop
 800a4f8:	40015804 	.word	0x40015804
 800a4fc:	40015824 	.word	0x40015824
 800a500:	40015800 	.word	0x40015800
 800a504:	40015c04 	.word	0x40015c04
 800a508:	40015c24 	.word	0x40015c24
 800a50c:	40015c00 	.word	0x40015c00
 800a510:	cccccccd 	.word	0xcccccccd
 800a514:	2300      	movs	r3, #0
 800a516:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6819      	ldr	r1, [r3, #0]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	4b58      	ldr	r3, [pc, #352]	; (800a684 <HAL_SAI_Init+0x3f0>)
 800a524:	400b      	ands	r3, r1
 800a526:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6819      	ldr	r1, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	685a      	ldr	r2, [r3, #4]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a536:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a53c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a542:	431a      	orrs	r2, r3
 800a544:	6a3b      	ldr	r3, [r7, #32]
 800a546:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800a550:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	695b      	ldr	r3, [r3, #20]
 800a556:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a55c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a562:	051b      	lsls	r3, r3, #20
 800a564:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a56a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	691b      	ldr	r3, [r3, #16]
 800a570:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	6859      	ldr	r1, [r3, #4]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	4b40      	ldr	r3, [pc, #256]	; (800a688 <HAL_SAI_Init+0x3f4>)
 800a586:	400b      	ands	r3, r1
 800a588:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	6859      	ldr	r1, [r3, #4]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	69da      	ldr	r2, [r3, #28]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a598:	431a      	orrs	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59e:	431a      	orrs	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	430a      	orrs	r2, r1
 800a5a6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6899      	ldr	r1, [r3, #8]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	4b36      	ldr	r3, [pc, #216]	; (800a68c <HAL_SAI_Init+0x3f8>)
 800a5b4:	400b      	ands	r3, r1
 800a5b6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	6899      	ldr	r1, [r3, #8]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5c2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a5c8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800a5ce:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800a5d4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a5de:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	430a      	orrs	r2, r1
 800a5e6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68d9      	ldr	r1, [r3, #12]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a5f6:	400b      	ands	r3, r1
 800a5f8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68d9      	ldr	r1, [r3, #12]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a608:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a60e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a610:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a616:	3b01      	subs	r3, #1
 800a618:	021b      	lsls	r3, r3, #8
 800a61a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	430a      	orrs	r2, r1
 800a622:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
#else
  if (hsai->Instance == SAI1_Block_A)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a19      	ldr	r2, [pc, #100]	; (800a690 <HAL_SAI_Init+0x3fc>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d119      	bne.n	800a662 <HAL_SAI_Init+0x3ce>
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a632:	f023 0201 	bic.w	r2, r3, #1
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a640:	2b01      	cmp	r3, #1
 800a642:	d10e      	bne.n	800a662 <HAL_SAI_Init+0x3ce>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a64c:	3b01      	subs	r3, #1
 800a64e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a650:	431a      	orrs	r2, r3
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a65a:	f043 0201 	orr.w	r2, r3, #1
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2201      	movs	r2, #1
 800a66e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3728      	adds	r7, #40	; 0x28
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	f005c010 	.word	0xf005c010
 800a688:	ffff1ff0 	.word	0xffff1ff0
 800a68c:	fff88000 	.word	0xfff88000
 800a690:	40015804 	.word	0x40015804

0800a694 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d101      	bne.n	800a6ae <HAL_SAI_Abort+0x1a>
 800a6aa:	2302      	movs	r3, #2
 800a6ac:	e07d      	b.n	800a7aa <HAL_SAI_Abort+0x116>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6c4:	d14f      	bne.n	800a766 <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a6d4:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b12      	cmp	r3, #18
 800a6e0:	d11d      	bne.n	800a71e <HAL_SAI_Abort+0x8a>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d018      	beq.n	800a71e <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7f9 f8a4 	bl	8003840 <HAL_DMA_Abort>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00f      	beq.n	800a71e <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a706:	2b80      	cmp	r3, #128	; 0x80
 800a708:	d009      	beq.n	800a71e <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a714:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a724:	b2db      	uxtb	r3, r3
 800a726:	2b22      	cmp	r3, #34	; 0x22
 800a728:	d11d      	bne.n	800a766 <HAL_SAI_Abort+0xd2>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a730:	2b00      	cmp	r3, #0
 800a732:	d018      	beq.n	800a766 <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7f9 f880 	bl	8003840 <HAL_DMA_Abort>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00f      	beq.n	800a766 <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a74c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a74e:	2b80      	cmp	r3, #128	; 0x80
 800a750:	d009      	beq.n	800a766 <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a75c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2200      	movs	r2, #0
 800a76c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f04f 32ff 	mov.w	r2, #4294967295
 800a776:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 fb11 	bl	800ada0 <SAI_Disable>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d001      	beq.n	800a788 <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f042 0208 	orr.w	r2, r2, #8
 800a796:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
 800a7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
	...

0800a7b4 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f000 81a7 	beq.w	800ab18 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	691b      	ldr	r3, [r3, #16]
 800a7d8:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occured ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	f003 0308 	and.w	r3, r3, #8
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00a      	beq.n	800a802 <HAL_SAI_IRQHandler+0x4e>
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	f003 0308 	and.w	r3, r3, #8
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d005      	beq.n	800a802 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	4798      	blx	r3
 800a800:	e18a      	b.n	800ab18 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	f003 0301 	and.w	r3, r3, #1
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d01e      	beq.n	800a84a <HAL_SAI_IRQHandler+0x96>
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	2b00      	cmp	r3, #0
 800a814:	d019      	beq.n	800a84a <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2201      	movs	r2, #1
 800a81c:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a824:	b2db      	uxtb	r3, r3
 800a826:	2b22      	cmp	r3, #34	; 0x22
 800a828:	d101      	bne.n	800a82e <HAL_SAI_IRQHandler+0x7a>
 800a82a:	2301      	movs	r3, #1
 800a82c:	e000      	b.n	800a830 <HAL_SAI_IRQHandler+0x7c>
 800a82e:	2302      	movs	r3, #2
 800a830:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	431a      	orrs	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f96e 	bl	800ab24 <HAL_SAI_ErrorCallback>
 800a848:	e166      	b.n	800ab18 <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	f003 0302 	and.w	r3, r3, #2
 800a850:	2b00      	cmp	r3, #0
 800a852:	d013      	beq.n	800a87c <HAL_SAI_IRQHandler+0xc8>
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	f003 0302 	and.w	r3, r3, #2
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00e      	beq.n	800a87c <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2202      	movs	r2, #2
 800a864:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f000 8153 	beq.w	800ab18 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a878:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800a87a:	e14d      	b.n	800ab18 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	f003 0320 	and.w	r3, r3, #32
 800a882:	2b00      	cmp	r3, #0
 800a884:	d05b      	beq.n	800a93e <HAL_SAI_IRQHandler+0x18a>
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	f003 0320 	and.w	r3, r3, #32
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d056      	beq.n	800a93e <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2220      	movs	r2, #32
 800a896:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a89e:	f043 0204 	orr.w	r2, r3, #4
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d03e      	beq.n	800a930 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d018      	beq.n	800a8ee <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8c2:	4a97      	ldr	r2, [pc, #604]	; (800ab20 <HAL_SAI_IRQHandler+0x36c>)
 800a8c4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7f9 fad5 	bl	8003e7c <HAL_DMA_Abort_IT>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00a      	beq.n	800a8ee <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f91b 	bl	800ab24 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f000 810a 	beq.w	800ab0e <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a900:	4a87      	ldr	r2, [pc, #540]	; (800ab20 <HAL_SAI_IRQHandler+0x36c>)
 800a902:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7f9 fab6 	bl	8003e7c <HAL_DMA_Abort_IT>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	f000 80fb 	beq.w	800ab0e <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a91e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f8fb 	bl	800ab24 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a92e:	e0ee      	b.n	800ab0e <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f7ff feaf 	bl	800a694 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f8f4 	bl	800ab24 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a93c:	e0e7      	b.n	800ab0e <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a944:	2b00      	cmp	r3, #0
 800a946:	d05b      	beq.n	800aa00 <HAL_SAI_IRQHandler+0x24c>
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d056      	beq.n	800aa00 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2240      	movs	r2, #64	; 0x40
 800a958:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a960:	f043 0208 	orr.w	r2, r3, #8
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a970:	2b00      	cmp	r3, #0
 800a972:	d03e      	beq.n	800a9f2 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d018      	beq.n	800a9b0 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a984:	4a66      	ldr	r2, [pc, #408]	; (800ab20 <HAL_SAI_IRQHandler+0x36c>)
 800a986:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a98e:	4618      	mov	r0, r3
 800a990:	f7f9 fa74 	bl	8003e7c <HAL_DMA_Abort_IT>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00a      	beq.n	800a9b0 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f8ba 	bl	800ab24 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f000 80ab 	beq.w	800ab12 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9c2:	4a57      	ldr	r2, [pc, #348]	; (800ab20 <HAL_SAI_IRQHandler+0x36c>)
 800a9c4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7f9 fa55 	bl	8003e7c <HAL_DMA_Abort_IT>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f000 809c 	beq.w	800ab12 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 f89a 	bl	800ab24 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a9f0:	e08f      	b.n	800ab12 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f7ff fe4e 	bl	800a694 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f893 	bl	800ab24 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a9fe:	e088      	b.n	800ab12 <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	f003 0304 	and.w	r3, r3, #4
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d067      	beq.n	800aada <HAL_SAI_IRQHandler+0x326>
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	f003 0304 	and.w	r3, r3, #4
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d062      	beq.n	800aada <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2204      	movs	r2, #4
 800aa1a:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa22:	f043 0220 	orr.w	r2, r3, #32
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d03c      	beq.n	800aab0 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d018      	beq.n	800aa72 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa46:	4a36      	ldr	r2, [pc, #216]	; (800ab20 <HAL_SAI_IRQHandler+0x36c>)
 800aa48:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7f9 fa13 	bl	8003e7c <HAL_DMA_Abort_IT>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d00a      	beq.n	800aa72 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa62:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 f859 	bl	800ab24 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d04c      	beq.n	800ab16 <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa82:	4a27      	ldr	r2, [pc, #156]	; (800ab20 <HAL_SAI_IRQHandler+0x36c>)
 800aa84:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7f9 f9f5 	bl	8003e7c <HAL_DMA_Abort_IT>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d03e      	beq.n	800ab16 <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa9e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f83b 	bl	800ab24 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800aaae:	e032      	b.n	800ab16 <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2200      	movs	r2, #0
 800aab6:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f04f 32ff 	mov.w	r2, #4294967295
 800aac0:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2201      	movs	r2, #1
 800aac6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 f826 	bl	800ab24 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800aad8:	e01d      	b.n	800ab16 <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	f003 0310 	and.w	r3, r3, #16
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d019      	beq.n	800ab18 <HAL_SAI_IRQHandler+0x364>
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	f003 0310 	and.w	r3, r3, #16
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d014      	beq.n	800ab18 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2210      	movs	r2, #16
 800aaf4:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aafc:	f043 0210 	orr.w	r2, r3, #16
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 f80c 	bl	800ab24 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800ab0c:	e004      	b.n	800ab18 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ab0e:	bf00      	nop
 800ab10:	e002      	b.n	800ab18 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ab12:	bf00      	nop
 800ab14:	e000      	b.n	800ab18 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ab16:	bf00      	nop
}
 800ab18:	bf00      	nop
 800ab1a:	3718      	adds	r7, #24
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	0800ae15 	.word	0x0800ae15

0800ab24 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800ab2c:	bf00      	nop
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b087      	sub	sp, #28
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	607a      	str	r2, [r7, #4]
 800ab44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab46:	2300      	movs	r3, #0
 800ab48:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2200      	movs	r2, #0
 800ab54:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d003      	beq.n	800ab66 <SAI_InitI2S+0x2e>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d103      	bne.n	800ab6e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	651a      	str	r2, [r3, #80]	; 0x50
 800ab6c:	e002      	b.n	800ab74 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2201      	movs	r2, #1
 800ab72:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ab7a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab82:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	f003 0301 	and.w	r3, r3, #1
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d001      	beq.n	800ab9e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e077      	b.n	800ac8e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d107      	bne.n	800abb4 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800abb0:	665a      	str	r2, [r3, #100]	; 0x64
 800abb2:	e006      	b.n	800abc2 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800abba:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2b03      	cmp	r3, #3
 800abc6:	d84f      	bhi.n	800ac68 <SAI_InitI2S+0x130>
 800abc8:	a201      	add	r2, pc, #4	; (adr r2, 800abd0 <SAI_InitI2S+0x98>)
 800abca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abce:	bf00      	nop
 800abd0:	0800abe1 	.word	0x0800abe1
 800abd4:	0800ac03 	.word	0x0800ac03
 800abd8:	0800ac25 	.word	0x0800ac25
 800abdc:	0800ac47 	.word	0x0800ac47
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2280      	movs	r2, #128	; 0x80
 800abe4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	085b      	lsrs	r3, r3, #1
 800abea:	015a      	lsls	r2, r3, #5
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	085b      	lsrs	r3, r3, #1
 800abf4:	011a      	lsls	r2, r3, #4
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2240      	movs	r2, #64	; 0x40
 800abfe:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ac00:	e035      	b.n	800ac6e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2280      	movs	r2, #128	; 0x80
 800ac06:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	085b      	lsrs	r3, r3, #1
 800ac0c:	019a      	lsls	r2, r3, #6
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	085b      	lsrs	r3, r3, #1
 800ac16:	015a      	lsls	r2, r3, #5
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2280      	movs	r2, #128	; 0x80
 800ac20:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ac22:	e024      	b.n	800ac6e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	22c0      	movs	r2, #192	; 0xc0
 800ac28:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	085b      	lsrs	r3, r3, #1
 800ac2e:	019a      	lsls	r2, r3, #6
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	085b      	lsrs	r3, r3, #1
 800ac38:	015a      	lsls	r2, r3, #5
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2280      	movs	r2, #128	; 0x80
 800ac42:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ac44:	e013      	b.n	800ac6e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	22e0      	movs	r2, #224	; 0xe0
 800ac4a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	085b      	lsrs	r3, r3, #1
 800ac50:	019a      	lsls	r2, r3, #6
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	085b      	lsrs	r3, r3, #1
 800ac5a:	015a      	lsls	r2, r3, #5
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2280      	movs	r2, #128	; 0x80
 800ac64:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ac66:	e002      	b.n	800ac6e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	75fb      	strb	r3, [r7, #23]
      break;
 800ac6c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	2b02      	cmp	r3, #2
 800ac72:	d10b      	bne.n	800ac8c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d102      	bne.n	800ac80 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2210      	movs	r2, #16
 800ac7e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2b02      	cmp	r3, #2
 800ac84:	d102      	bne.n	800ac8c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2208      	movs	r2, #8
 800ac8a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800ac8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	371c      	adds	r7, #28
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop

0800ac9c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b087      	sub	sp, #28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d003      	beq.n	800acca <SAI_InitPCM+0x2e>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d103      	bne.n	800acd2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2201      	movs	r2, #1
 800acce:	651a      	str	r2, [r3, #80]	; 0x50
 800acd0:	e002      	b.n	800acd8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2200      	movs	r2, #0
 800acdc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ace4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800acec:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	683a      	ldr	r2, [r7, #0]
 800acf8:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad00:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	2b04      	cmp	r3, #4
 800ad06:	d103      	bne.n	800ad10 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	659a      	str	r2, [r3, #88]	; 0x58
 800ad0e:	e002      	b.n	800ad16 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	220d      	movs	r2, #13
 800ad14:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2b03      	cmp	r3, #3
 800ad1a:	d837      	bhi.n	800ad8c <SAI_InitPCM+0xf0>
 800ad1c:	a201      	add	r2, pc, #4	; (adr r2, 800ad24 <SAI_InitPCM+0x88>)
 800ad1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad22:	bf00      	nop
 800ad24:	0800ad35 	.word	0x0800ad35
 800ad28:	0800ad4b 	.word	0x0800ad4b
 800ad2c:	0800ad61 	.word	0x0800ad61
 800ad30:	0800ad77 	.word	0x0800ad77
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2280      	movs	r2, #128	; 0x80
 800ad38:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	011a      	lsls	r2, r3, #4
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2240      	movs	r2, #64	; 0x40
 800ad46:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ad48:	e023      	b.n	800ad92 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2280      	movs	r2, #128	; 0x80
 800ad4e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	015a      	lsls	r2, r3, #5
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2280      	movs	r2, #128	; 0x80
 800ad5c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ad5e:	e018      	b.n	800ad92 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	22c0      	movs	r2, #192	; 0xc0
 800ad64:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	015a      	lsls	r2, r3, #5
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2280      	movs	r2, #128	; 0x80
 800ad72:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ad74:	e00d      	b.n	800ad92 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	22e0      	movs	r2, #224	; 0xe0
 800ad7a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	015a      	lsls	r2, r3, #5
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2280      	movs	r2, #128	; 0x80
 800ad88:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ad8a:	e002      	b.n	800ad92 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	75fb      	strb	r3, [r7, #23]
      break;
 800ad90:	bf00      	nop
  }

  return status;
 800ad92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	371c      	adds	r7, #28
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b085      	sub	sp, #20
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ada8:	4b18      	ldr	r3, [pc, #96]	; (800ae0c <SAI_Disable+0x6c>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a18      	ldr	r2, [pc, #96]	; (800ae10 <SAI_Disable+0x70>)
 800adae:	fba2 2303 	umull	r2, r3, r2, r3
 800adb2:	0b1b      	lsrs	r3, r3, #12
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800adb8:	2300      	movs	r3, #0
 800adba:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800adca:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10a      	bne.n	800ade8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800add8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800ade2:	2303      	movs	r3, #3
 800ade4:	72fb      	strb	r3, [r7, #11]
      break;
 800ade6:	e009      	b.n	800adfc <SAI_Disable+0x5c>
    }
    count--;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	3b01      	subs	r3, #1
 800adec:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d1e7      	bne.n	800adcc <SAI_Disable+0x2c>

  return status;
 800adfc:	7afb      	ldrb	r3, [r7, #11]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3714      	adds	r7, #20
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop
 800ae0c:	20000028 	.word	0x20000028
 800ae10:	95cbec1b 	.word	0x95cbec1b

0800ae14 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae20:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ae30:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2200      	movs	r2, #0
 800ae38:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae42:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae4a:	2b20      	cmp	r3, #32
 800ae4c:	d00a      	beq.n	800ae64 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f7ff ffa6 	bl	800ada0 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	685a      	ldr	r2, [r3, #4]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f042 0208 	orr.w	r2, r2, #8
 800ae62:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2201      	movs	r2, #1
 800ae68:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f7ff fe55 	bl	800ab24 <HAL_SAI_ErrorCallback>
#endif
}
 800ae7a:	bf00      	nop
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
	...

0800ae84 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d101      	bne.n	800ae9a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	e0e2      	b.n	800b060 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a70      	ldr	r2, [pc, #448]	; (800b068 <HAL_SPI_Init+0x1e4>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d00f      	beq.n	800aeca <HAL_SPI_Init+0x46>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a6f      	ldr	r2, [pc, #444]	; (800b06c <HAL_SPI_Init+0x1e8>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d00a      	beq.n	800aeca <HAL_SPI_Init+0x46>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a6d      	ldr	r2, [pc, #436]	; (800b070 <HAL_SPI_Init+0x1ec>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d005      	beq.n	800aeca <HAL_SPI_Init+0x46>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	2b0f      	cmp	r3, #15
 800aec4:	d901      	bls.n	800aeca <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	e0ca      	b.n	800b060 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fb92 	bl	800b5f4 <SPI_GetPacketSize>
 800aed0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a64      	ldr	r2, [pc, #400]	; (800b068 <HAL_SPI_Init+0x1e4>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d00c      	beq.n	800aef6 <HAL_SPI_Init+0x72>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a62      	ldr	r2, [pc, #392]	; (800b06c <HAL_SPI_Init+0x1e8>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d007      	beq.n	800aef6 <HAL_SPI_Init+0x72>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a61      	ldr	r2, [pc, #388]	; (800b070 <HAL_SPI_Init+0x1ec>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d002      	beq.n	800aef6 <HAL_SPI_Init+0x72>
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	2b08      	cmp	r3, #8
 800aef4:	d811      	bhi.n	800af1a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aefa:	4a5b      	ldr	r2, [pc, #364]	; (800b068 <HAL_SPI_Init+0x1e4>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d009      	beq.n	800af14 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a59      	ldr	r2, [pc, #356]	; (800b06c <HAL_SPI_Init+0x1e8>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d004      	beq.n	800af14 <HAL_SPI_Init+0x90>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a58      	ldr	r2, [pc, #352]	; (800b070 <HAL_SPI_Init+0x1ec>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d104      	bne.n	800af1e <HAL_SPI_Init+0x9a>
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	2b10      	cmp	r3, #16
 800af18:	d901      	bls.n	800af1e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	e0a0      	b.n	800b060 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800af24:	b2db      	uxtb	r3, r3
 800af26:	2b00      	cmp	r3, #0
 800af28:	d106      	bne.n	800af38 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f7f7 fd72 	bl	8002a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2202      	movs	r2, #2
 800af3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f022 0201 	bic.w	r2, r2, #1
 800af4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	699b      	ldr	r3, [r3, #24]
 800af54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af58:	d110      	bne.n	800af7c <HAL_SPI_Init+0xf8>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af62:	d10b      	bne.n	800af7c <HAL_SPI_Init+0xf8>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d107      	bne.n	800af7c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800af7a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	69da      	ldr	r2, [r3, #28]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af84:	431a      	orrs	r2, r3
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	431a      	orrs	r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af8e:	ea42 0103 	orr.w	r1, r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	68da      	ldr	r2, [r3, #12]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	430a      	orrs	r2, r1
 800af9c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa6:	431a      	orrs	r2, r3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afac:	431a      	orrs	r2, r3
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	699b      	ldr	r3, [r3, #24]
 800afb2:	431a      	orrs	r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	431a      	orrs	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	695b      	ldr	r3, [r3, #20]
 800afbe:	431a      	orrs	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a1b      	ldr	r3, [r3, #32]
 800afc4:	431a      	orrs	r2, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	431a      	orrs	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afd0:	431a      	orrs	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	431a      	orrs	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afdc:	ea42 0103 	orr.w	r1, r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	430a      	orrs	r2, r1
 800afea:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d113      	bne.n	800b01c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b006:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b01a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f022 0201 	bic.w	r2, r2, #1
 800b02a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00a      	beq.n	800b04e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	430a      	orrs	r2, r1
 800b04c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2201      	movs	r2, #1
 800b05a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	40013000 	.word	0x40013000
 800b06c:	40003800 	.word	0x40003800
 800b070:	40003c00 	.word	0x40003c00

0800b074 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b08a      	sub	sp, #40	; 0x28
 800b078:	af02      	add	r7, sp, #8
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	603b      	str	r3, [r7, #0]
 800b080:	4613      	mov	r3, r2
 800b082:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	3320      	adds	r3, #32
 800b08a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b096:	2b01      	cmp	r3, #1
 800b098:	d101      	bne.n	800b09e <HAL_SPI_Transmit+0x2a>
 800b09a:	2302      	movs	r3, #2
 800b09c:	e1d7      	b.n	800b44e <HAL_SPI_Transmit+0x3da>
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b0a6:	f7f7 fefd 	bl	8002ea4 <HAL_GetTick>
 800b0aa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d007      	beq.n	800b0c8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b0c4:	7efb      	ldrb	r3, [r7, #27]
 800b0c6:	e1c2      	b.n	800b44e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d002      	beq.n	800b0d4 <HAL_SPI_Transmit+0x60>
 800b0ce:	88fb      	ldrh	r3, [r7, #6]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d107      	bne.n	800b0e4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b0e0:	7efb      	ldrb	r3, [r7, #27]
 800b0e2:	e1b4      	b.n	800b44e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2203      	movs	r2, #3
 800b0e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	68ba      	ldr	r2, [r7, #8]
 800b0f8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	88fa      	ldrh	r2, [r7, #6]
 800b0fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	88fa      	ldrh	r2, [r7, #6]
 800b106:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2200      	movs	r2, #0
 800b10e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2200      	movs	r2, #0
 800b114:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2200      	movs	r2, #0
 800b124:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2200      	movs	r2, #0
 800b12a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b134:	d107      	bne.n	800b146 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b144:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	685a      	ldr	r2, [r3, #4]
 800b14c:	4b96      	ldr	r3, [pc, #600]	; (800b3a8 <HAL_SPI_Transmit+0x334>)
 800b14e:	4013      	ands	r3, r2
 800b150:	88f9      	ldrh	r1, [r7, #6]
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	6812      	ldr	r2, [r2, #0]
 800b156:	430b      	orrs	r3, r1
 800b158:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f042 0201 	orr.w	r2, r2, #1
 800b168:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b172:	d107      	bne.n	800b184 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b182:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	2b0f      	cmp	r3, #15
 800b18a:	d947      	bls.n	800b21c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b18c:	e03f      	b.n	800b20e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	695b      	ldr	r3, [r3, #20]
 800b194:	f003 0302 	and.w	r3, r3, #2
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d114      	bne.n	800b1c6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	6812      	ldr	r2, [r2, #0]
 800b1a6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1ac:	1d1a      	adds	r2, r3, #4
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b1c4:	e023      	b.n	800b20e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1c6:	f7f7 fe6d 	bl	8002ea4 <HAL_GetTick>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	683a      	ldr	r2, [r7, #0]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d803      	bhi.n	800b1de <HAL_SPI_Transmit+0x16a>
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1dc:	d102      	bne.n	800b1e4 <HAL_SPI_Transmit+0x170>
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d114      	bne.n	800b20e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f000 f937 	bl	800b458 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2201      	movs	r2, #1
 800b206:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	e11f      	b.n	800b44e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b214:	b29b      	uxth	r3, r3
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1b9      	bne.n	800b18e <HAL_SPI_Transmit+0x11a>
 800b21a:	e0f2      	b.n	800b402 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	2b07      	cmp	r3, #7
 800b222:	f240 80e7 	bls.w	800b3f4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b226:	e05d      	b.n	800b2e4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	695b      	ldr	r3, [r3, #20]
 800b22e:	f003 0302 	and.w	r3, r3, #2
 800b232:	2b02      	cmp	r3, #2
 800b234:	d132      	bne.n	800b29c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d918      	bls.n	800b274 <HAL_SPI_Transmit+0x200>
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b246:	2b00      	cmp	r3, #0
 800b248:	d014      	beq.n	800b274 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	6812      	ldr	r2, [r2, #0]
 800b254:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b25a:	1d1a      	adds	r2, r3, #4
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b266:	b29b      	uxth	r3, r3
 800b268:	3b02      	subs	r3, #2
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b272:	e037      	b.n	800b2e4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b278:	881a      	ldrh	r2, [r3, #0]
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b282:	1c9a      	adds	r2, r3, #2
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b28e:	b29b      	uxth	r3, r3
 800b290:	3b01      	subs	r3, #1
 800b292:	b29a      	uxth	r2, r3
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b29a:	e023      	b.n	800b2e4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b29c:	f7f7 fe02 	bl	8002ea4 <HAL_GetTick>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	1ad3      	subs	r3, r2, r3
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d803      	bhi.n	800b2b4 <HAL_SPI_Transmit+0x240>
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b2:	d102      	bne.n	800b2ba <HAL_SPI_Transmit+0x246>
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d114      	bne.n	800b2e4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f000 f8cc 	bl	800b458 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	e0b4      	b.n	800b44e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d19b      	bne.n	800b228 <HAL_SPI_Transmit+0x1b4>
 800b2f0:	e087      	b.n	800b402 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	695b      	ldr	r3, [r3, #20]
 800b2f8:	f003 0302 	and.w	r3, r3, #2
 800b2fc:	2b02      	cmp	r3, #2
 800b2fe:	d155      	bne.n	800b3ac <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b306:	b29b      	uxth	r3, r3
 800b308:	2b03      	cmp	r3, #3
 800b30a:	d918      	bls.n	800b33e <HAL_SPI_Transmit+0x2ca>
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b310:	2b40      	cmp	r3, #64	; 0x40
 800b312:	d914      	bls.n	800b33e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	6812      	ldr	r2, [r2, #0]
 800b31e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b324:	1d1a      	adds	r2, r3, #4
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b330:	b29b      	uxth	r3, r3
 800b332:	3b04      	subs	r3, #4
 800b334:	b29a      	uxth	r2, r3
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b33c:	e05a      	b.n	800b3f4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b344:	b29b      	uxth	r3, r3
 800b346:	2b01      	cmp	r3, #1
 800b348:	d917      	bls.n	800b37a <HAL_SPI_Transmit+0x306>
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d013      	beq.n	800b37a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b356:	881a      	ldrh	r2, [r3, #0]
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b360:	1c9a      	adds	r2, r3, #2
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	3b02      	subs	r3, #2
 800b370:	b29a      	uxth	r2, r3
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b378:	e03c      	b.n	800b3f4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	3320      	adds	r3, #32
 800b384:	7812      	ldrb	r2, [r2, #0]
 800b386:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b38c:	1c5a      	adds	r2, r3, #1
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b398:	b29b      	uxth	r3, r3
 800b39a:	3b01      	subs	r3, #1
 800b39c:	b29a      	uxth	r2, r3
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b3a4:	e026      	b.n	800b3f4 <HAL_SPI_Transmit+0x380>
 800b3a6:	bf00      	nop
 800b3a8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3ac:	f7f7 fd7a 	bl	8002ea4 <HAL_GetTick>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	1ad3      	subs	r3, r2, r3
 800b3b6:	683a      	ldr	r2, [r7, #0]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d803      	bhi.n	800b3c4 <HAL_SPI_Transmit+0x350>
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c2:	d102      	bne.n	800b3ca <HAL_SPI_Transmit+0x356>
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d114      	bne.n	800b3f4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f000 f844 	bl	800b458 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e02c      	b.n	800b44e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f47f af78 	bne.w	800b2f2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	2200      	movs	r2, #0
 800b40a:	2108      	movs	r1, #8
 800b40c:	68f8      	ldr	r0, [r7, #12]
 800b40e:	f000 f8c3 	bl	800b598 <SPI_WaitOnFlagUntilTimeout>
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d007      	beq.n	800b428 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b41e:	f043 0220 	orr.w	r2, r3, #32
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f000 f815 	bl	800b458 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2201      	movs	r2, #1
 800b43a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b444:	2b00      	cmp	r3, #0
 800b446:	d001      	beq.n	800b44c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	e000      	b.n	800b44e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800b44c:	7efb      	ldrb	r3, [r7, #27]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3720      	adds	r7, #32
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop

0800b458 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	695b      	ldr	r3, [r3, #20]
 800b466:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	699a      	ldr	r2, [r3, #24]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f042 0208 	orr.w	r2, r2, #8
 800b476:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	699a      	ldr	r2, [r3, #24]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f042 0210 	orr.w	r2, r2, #16
 800b486:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f022 0201 	bic.w	r2, r2, #1
 800b496:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6919      	ldr	r1, [r3, #16]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	4b3c      	ldr	r3, [pc, #240]	; (800b594 <SPI_CloseTransfer+0x13c>)
 800b4a4:	400b      	ands	r3, r1
 800b4a6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	689a      	ldr	r2, [r3, #8]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b4b6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	2b04      	cmp	r3, #4
 800b4c2:	d014      	beq.n	800b4ee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f003 0320 	and.w	r3, r3, #32
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00f      	beq.n	800b4ee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	699a      	ldr	r2, [r3, #24]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f042 0220 	orr.w	r2, r2, #32
 800b4ec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	2b03      	cmp	r3, #3
 800b4f8:	d014      	beq.n	800b524 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00f      	beq.n	800b524 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b50a:	f043 0204 	orr.w	r2, r3, #4
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	699a      	ldr	r2, [r3, #24]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b522:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00f      	beq.n	800b54e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b534:	f043 0201 	orr.w	r2, r3, #1
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	699a      	ldr	r2, [r3, #24]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b54c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b554:	2b00      	cmp	r3, #0
 800b556:	d00f      	beq.n	800b578 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b55e:	f043 0208 	orr.w	r2, r3, #8
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	699a      	ldr	r2, [r3, #24]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b576:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b588:	bf00      	nop
 800b58a:	3714      	adds	r7, #20
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr
 800b594:	fffffc90 	.word	0xfffffc90

0800b598 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	603b      	str	r3, [r7, #0]
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b5a8:	e010      	b.n	800b5cc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5aa:	f7f7 fc7b 	bl	8002ea4 <HAL_GetTick>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	1ad3      	subs	r3, r2, r3
 800b5b4:	69ba      	ldr	r2, [r7, #24]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d803      	bhi.n	800b5c2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b5ba:	69bb      	ldr	r3, [r7, #24]
 800b5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c0:	d102      	bne.n	800b5c8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b5c2:	69bb      	ldr	r3, [r7, #24]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d101      	bne.n	800b5cc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b5c8:	2303      	movs	r3, #3
 800b5ca:	e00f      	b.n	800b5ec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	695a      	ldr	r2, [r3, #20]
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	4013      	ands	r3, r2
 800b5d6:	68ba      	ldr	r2, [r7, #8]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	bf0c      	ite	eq
 800b5dc:	2301      	moveq	r3, #1
 800b5de:	2300      	movne	r3, #0
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	79fb      	ldrb	r3, [r7, #7]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d0df      	beq.n	800b5aa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3710      	adds	r7, #16
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b600:	095b      	lsrs	r3, r3, #5
 800b602:	3301      	adds	r3, #1
 800b604:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	3301      	adds	r3, #1
 800b60c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	3307      	adds	r3, #7
 800b612:	08db      	lsrs	r3, r3, #3
 800b614:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3714      	adds	r7, #20
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
	...

0800b62c <__libc_init_array>:
 800b62c:	b570      	push	{r4, r5, r6, lr}
 800b62e:	4e0d      	ldr	r6, [pc, #52]	; (800b664 <__libc_init_array+0x38>)
 800b630:	4c0d      	ldr	r4, [pc, #52]	; (800b668 <__libc_init_array+0x3c>)
 800b632:	1ba4      	subs	r4, r4, r6
 800b634:	10a4      	asrs	r4, r4, #2
 800b636:	2500      	movs	r5, #0
 800b638:	42a5      	cmp	r5, r4
 800b63a:	d109      	bne.n	800b650 <__libc_init_array+0x24>
 800b63c:	4e0b      	ldr	r6, [pc, #44]	; (800b66c <__libc_init_array+0x40>)
 800b63e:	4c0c      	ldr	r4, [pc, #48]	; (800b670 <__libc_init_array+0x44>)
 800b640:	f000 f820 	bl	800b684 <_init>
 800b644:	1ba4      	subs	r4, r4, r6
 800b646:	10a4      	asrs	r4, r4, #2
 800b648:	2500      	movs	r5, #0
 800b64a:	42a5      	cmp	r5, r4
 800b64c:	d105      	bne.n	800b65a <__libc_init_array+0x2e>
 800b64e:	bd70      	pop	{r4, r5, r6, pc}
 800b650:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b654:	4798      	blx	r3
 800b656:	3501      	adds	r5, #1
 800b658:	e7ee      	b.n	800b638 <__libc_init_array+0xc>
 800b65a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b65e:	4798      	blx	r3
 800b660:	3501      	adds	r5, #1
 800b662:	e7f2      	b.n	800b64a <__libc_init_array+0x1e>
 800b664:	0800db28 	.word	0x0800db28
 800b668:	0800db28 	.word	0x0800db28
 800b66c:	0800db28 	.word	0x0800db28
 800b670:	0800db2c 	.word	0x0800db2c

0800b674 <memset>:
 800b674:	4402      	add	r2, r0
 800b676:	4603      	mov	r3, r0
 800b678:	4293      	cmp	r3, r2
 800b67a:	d100      	bne.n	800b67e <memset+0xa>
 800b67c:	4770      	bx	lr
 800b67e:	f803 1b01 	strb.w	r1, [r3], #1
 800b682:	e7f9      	b.n	800b678 <memset+0x4>

0800b684 <_init>:
 800b684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b686:	bf00      	nop
 800b688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b68a:	bc08      	pop	{r3}
 800b68c:	469e      	mov	lr, r3
 800b68e:	4770      	bx	lr

0800b690 <_fini>:
 800b690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b692:	bf00      	nop
 800b694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b696:	bc08      	pop	{r3}
 800b698:	469e      	mov	lr, r3
 800b69a:	4770      	bx	lr
